diff -drupN a/modules/gpu/mali-utgard/driver/src/devicedrv/mali/include/linux/sunxi/platform.h b/modules/gpu/mali-utgard/driver/src/devicedrv/mali/include/linux/sunxi/platform.h
--- a/modules/gpu/mali-utgard/driver/src/devicedrv/mali/include/linux/sunxi/platform.h	1970-01-01 03:00:00.000000000 +0300
+++ b/modules/gpu/mali-utgard/driver/src/devicedrv/mali/include/linux/sunxi/platform.h	2022-06-12 05:28:14.000000000 +0300
@@ -0,0 +1,273 @@
+/**
+ * Copyright (C) 2015-2016 Allwinner Technology Limited. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * Author: Albert Yu <yuxyun@allwinnertech.com>
+ */
+
+#ifndef _PLATFORM_H_
+#define _PLATFORM_H_
+
+#include <linux/dma-mapping.h>
+#include <linux/mali/mali_utgard.h>
+#include <linux/platform_device.h>
+#include <linux/version.h>
+#include <linux/clk.h>
+#include <linux/pm_runtime.h>
+#include <linux/stat.h>
+#include <linux/delay.h>
+#include <linux/workqueue.h>
+#include <linux/regulator/consumer.h>
+#ifdef CONFIG_MALI_DT
+#include <linux/of_device.h>
+#include <linux/of_irq.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#else /* CONFIG_MALI_DT */
+#include <linux/clk/sunxi_name.h>
+#include <mach/irqs.h>
+#include <mach/sys_config.h>
+#include <mach/platform.h>
+#endif /* CONFIG_MALI_DT */
+#include "mali_kernel_common.h"
+#ifdef CONFIG_MALI_DEVFREQ
+#include "mali_osk_mali.h"
+#endif
+#ifdef CONFIG_DEBUG_FS
+#include <linux/debugfs.h>
+#endif
+
+/* max dynamic tune frequency&voltage delayed time 2000ms */
+#define THERMAL_DOWN_DELAY_MAX 2000
+/* min dynamic tune frequency&voltage delayed time 100ms */
+#define THERMAL_DOWN_DELAY_MIN 100
+
+/*
+* Keep same data type defined by disp driver
+*/
+//#ifdef CONFIG_DISP2_SUNXI
+struct __fb_addr_para {
+	uintptr_t fb_paddr;
+	int fb_size;
+};
+//#elif defined(CONFIG_FB_SUNXI)
+//struct __fb_addr_para {
+//	int fb_paddr;
+//	int fb_size;
+//};
+//#endif
+
+enum power_ctl_mode {
+	POWER_ON_OFF_CTL = 0X01, /* not used */
+	POWER_MAN_CTL = 0x02, /* not used */
+	POWER_THERMAL_CTL = 0x04, /* thermal control mode */
+	POWER_SCENE_CTL = 0x08, /* not used */
+	POWER_DVFS_CTL = 0x10, /* dvfs control mode */
+};
+
+enum thermal_level_status {
+	/* status is low, it can increase thermal target vf_table level */
+	THERMAL_LEVEL_LOW = 1,
+	/* status is stable, it will stop dynamic tune frequency&voltage */
+	THERMAL_LEVEL_STABELED,
+	/* status is urgent, it can decrease thermal target vf_table level */
+	THERMAL_LEVEL_URGENT,
+};
+
+typedef struct sunxi_clk_data {
+	const char   *clk_name;    /* Clock name */
+#ifndef CONFIG_MALI_DT
+	/* Clock ID, which is in the system configuration header file */
+	const char   *clk_id;
+#endif /* CONFIG_MALI_DT */
+	struct clk   *clk_handle;
+	int freq; /* MHz */
+	bool         clk_status;
+} sunxi_clk_data;
+
+/*
+* Store vf_table frequency and voltage
+*/
+typedef struct vf_table_data {
+	unsigned long vol;  /* mV */
+	unsigned long freq; /* MHz */
+} vf_table_data;
+
+/*
+* Used for other module to tune frequency&voltage
+*/
+typedef struct sunxi_ctrl_mode {
+	bool enable;
+	bool do_setting;
+	struct vf_table_data target_vf;
+} sunxi_ctrl_mode;
+
+/*
+* Used to store dvfs(devfreq) control data
+*/
+typedef struct sunxi_dvfs_ctrl_mode {
+	/* 1-enable dvfs control, 0-disable dvfs control */
+	bool enable;
+	/* Not used */
+	bool do_setting;
+	/* data to store dvfs control target vf_table */
+	struct vf_table_data target_vf;
+#if defined(CONFIG_MALI_DEVFREQ) \
+	&& defined(CONFIG_DEVFREQ_GOV_SIMPLE_ONDEMAND)
+	/* offer upthreshold and downdifferential for simple ondemand policy */
+	struct devfreq_simple_ondemand_data sunxi_simple_ondemand_data;
+#endif
+} sunxi_dvfs_ctrl_mode;
+
+
+#ifdef CONFIG_SUNXI_GPU_COOLING
+/*
+* Used to store gpu thermal cool control data
+*/
+typedef struct sunxi_thermal_ctrl_mode {
+	/* enable gpu thermal cool feature */
+	bool enable;
+	/*
+	* 1-dynamic to increase/decrease target vf_table level,
+	* 0-stop increase/decrease target vf_table level
+	*/
+	bool do_setting;
+	/* data to store thermal control target vf_table */
+	struct vf_table_data target_vf;
+	/* use to wait a time to increase/decrease target vf_table level */
+	wait_queue_head_t thermal_queue;
+	/* work for increase frequency&voltage */
+	struct work_struct thermal_down_delay;
+	/* work for decrease frequency&voltage */
+	struct work_struct thermal_up_delay;
+	/* mutex for protect thermal_target_level */
+	struct mutex thermal_target_mutex;
+	/* mutex for protect do_setting flag */
+	struct mutex thermal_lock;
+	/*
+	* store thermal target vf_table level, not actual
+	* setting to hardware vf_table level
+	*/
+	unsigned int thermal_target_level;
+} sunxi_thermal_ctrl_mode;
+#endif
+
+typedef struct sunxi_pm_data {
+	/* store gpu regulator */
+	struct regulator *regulator;
+	char   *regulator_id;
+	int    current_vol;
+	/* store gpu_pll(clk[0]) and gpu_clk(clk[1]) data */
+	struct sunxi_clk_data clk[2];
+	/* mutex to protect set frequency&voltage to hardware */
+	struct mutex vf_setting_lock;
+	/* mutex to protect to call sunxi_update_vf_policy */
+	struct mutex vf_policy_lock;
+	/* store all available vf_tables */
+	struct vf_table_data *vf_table;
+	/* store all available vf_tables' count */
+	int vf_table_count;
+	/* store current vf_table(real vf_table to hardware) */
+	struct vf_table_data current_vf;
+	/* not used */
+	int    cool_freq;
+	/* store the first vf_table level */
+	int    begin_level;
+	/* store current vf_table level */
+	int    current_level;
+	/* not used */
+	int    max_available_level;
+	/* store max vf_table level */
+	int    max_level;
+	/* store min vf_table level */
+	int    min_level;
+	/*
+	*1 means GPU should provide the highest performance
+	* for now, not used
+	*/
+	int    scene_ctrl_cmd;
+	/* 1-independent power supply, 0-system power supply */
+	bool   independent_pow;
+	/* store gpu power off gating iomap address */
+	void __iomem *poweroff_gating_addr;
+	/*
+	* 1-enable linear frequency modulation,
+	* 0-disable linear frequency modulation
+	*/
+	bool   lfm;
+	/*
+	* 1-enable dynamic voltage monitor,
+	* 0-disable dynamic voltage monitor
+	*/
+	bool   dvm;
+	/* 1-enable dvfs, 0-disable dvfs */
+	bool   dvfs_status;
+	/* 1-enable gpu thermal cool, 0-disable gpu thermal cool */
+	bool   thermal_ctrl_status;
+	bool   scene_ctrl_status;
+
+	struct sunxi_ctrl_mode idle_ctrl;
+	/* data for gpu thermal cool */
+	struct sunxi_thermal_ctrl_mode thermal_ctrl;
+	/* not used */
+	struct sunxi_ctrl_mode scene_ctrl;
+	/* data for devfreq to do dvfs */
+	struct sunxi_dvfs_ctrl_mode dvfs_ctrl;
+} sunxi_pm_data;
+
+typedef struct sunxi_utilization_data {
+	spinlock_t lock;
+	/* store gp pp gp_pp utilization */
+	struct mali_gpu_utilization_data data;
+} sunxi_utilization_data;
+
+/*
+* store debug flags, this can be operated by debugfs node
+*/
+typedef struct sunxi_debug {
+	bool enable;
+	bool frequency;
+	bool voltage;
+	bool thermal;
+	bool dvfs;
+	bool level;
+} sunxi_debug;
+
+/*
+* Store sunxi platform private data
+*/
+typedef struct sunxi_private_data {
+	/* used to get mali_device */
+	void *platform_device;
+#ifdef CONFIG_MALI_DT
+	/* mali dts node */
+	struct device_node *np_gpu;
+#endif /* CONFIG_MALI_DT */
+#ifdef CONFIG_DEBUG_FS
+struct dentry *sunxi_mali_debugfs;
+#endif
+	/* store optimizing data for power comsumption; */
+	struct sunxi_pm_data pm;
+	/* store gp pp gp_pp utilization */
+	struct sunxi_utilization_data utilization;
+	struct sunxi_debug debug;
+} sunxi_private_data;
+
+extern sunxi_private_data *sunxi_private;
+int sunxi_update_vf_policy(enum power_ctl_mode mode,
+	unsigned long *freq, unsigned long *voltage);
+void enable_gpu_clk(void);
+void disable_gpu_clk(void);
+void sunxi_suspend(void);
+void sunxi_resume(void);
+
+
+#endif /* _PLATFORM_H_ */
