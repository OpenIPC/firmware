diff -drupN a/modules/gpu/mali-midgard/kernel_mode/driver/drivers/gpu/arm/midgard/platform/sunxi/mali_kbase_config_sunxi.c b/modules/gpu/mali-midgard/kernel_mode/driver/drivers/gpu/arm/midgard/platform/sunxi/mali_kbase_config_sunxi.c
--- a/modules/gpu/mali-midgard/kernel_mode/driver/drivers/gpu/arm/midgard/platform/sunxi/mali_kbase_config_sunxi.c	1970-01-01 03:00:00.000000000 +0300
+++ b/modules/gpu/mali-midgard/kernel_mode/driver/drivers/gpu/arm/midgard/platform/sunxi/mali_kbase_config_sunxi.c	2022-06-12 05:28:14.000000000 +0300
@@ -0,0 +1,1146 @@
+/*
+ * Copyright (C) 2016-2017 Allwinner Technology Limited. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * Author: Albert Yu <yuxyun@allwinnertech.com>
+ */
+
+#include <linux/clk.h>
+#include <linux/clk/sunxi.h>
+#include <linux/clk-provider.h>
+#include <linux/regulator/consumer.h>
+#include <linux/of_device.h>
+#include <linux/ioport.h>
+#include <mali_kbase.h>
+#include <mali_kbase_defs.h>
+#include <mali_kbase_config.h>
+#include <backend/gpu/mali_kbase_pm_internal.h>
+#include "platform.h"
+
+#define GPU_DEFAULT_FREQ (624 * 1000 * 1000) /* Hz */
+#define GPU_DEFAULT_VOL (900 * 1000) /* uV */
+
+#define SMC_REG_BASE 0x3007000
+#define SMC_GPU_DRM_REG (SMC_REG_BASE) + 0x54
+#define GPU_POWEROFF_GATING_REG (0x07010000 + 0x0254)
+
+#define sunxi_err(format, args...) \
+	do { \
+		if (sunxi_kbdev->dev != NULL) \
+			dev_err(sunxi_kbdev->dev, format, ## args); \
+	} while (false)
+
+#define POINTER_IS_NULL(p) \
+	do { \
+		if (p == NULL) { \
+			sunxi_err(#p " is invalid!\n"); \
+			return -EINVAL; \
+		} \
+	} while (false)
+
+static struct kbase_device *sunxi_kbdev;
+static struct device_node *sunxi_np;
+static struct sunxi_regs *sunxi_regs;
+static struct sunxi_clks *sunxi_clks;
+static struct sunxi_levels *sunxi_levels;
+static struct sunxi_vf_table *sunxi_vf_table;
+#if defined(CONFIG_REGULATOR)
+static struct regulator *sunxi_regulator;
+#endif
+#ifdef CONFIG_DEBUG_FS
+static struct sunxi_debug *sunxi_debug;
+static struct dentry *sunxi_debugfs;
+#endif /* CONFIG_DEBUG_FS */
+
+static bool sunxi_initialized;
+
+/* GPU relevant functionalities */
+static bool sunxi_idle_enabled;
+static bool sunxi_scenectrl_enabled;
+#ifdef CONFIG_MALI_DEVFREQ
+static bool sunxi_dvfs_enabled;
+#endif
+
+static enum scene_ctrl_cmd sunxi_scenectrl_cmd;
+
+static inline int set_reg_bit(unsigned char bit,
+                        bool val, void __iomem *ioaddr)
+{
+	int data;
+
+	POINTER_IS_NULL(ioaddr);
+
+	data = readl(ioaddr);
+	if (!val)
+		data &= ~(1 << bit);
+	else
+		data |= (1 << bit);
+
+	writel(data, ioaddr);
+
+	return 0;
+}
+
+static inline void *alloc_os_mem(size_t size)
+{
+	void *vaddr;
+
+	if (size <= 0)
+		return NULL;
+
+	vaddr = kzalloc(size, GFP_KERNEL);
+
+	return vaddr;
+}
+
+static inline int free_os_mem(void *vaddr)
+{
+	POINTER_IS_NULL(vaddr);
+
+	kfree(vaddr);
+
+	return 0;
+}
+
+static inline void ioremap_regs(void)
+{
+	struct reg *drm;
+	struct reg *poweroff_gating;
+
+	sunxi_regs = alloc_os_mem(sizeof(struct sunxi_regs));
+	if (sunxi_regs == NULL) {
+		sunxi_err("failed to allocate memory for sunxi_regs!\n");
+		return;
+	}
+
+	drm = &sunxi_regs->drm;
+	poweroff_gating = &sunxi_regs->poweroff_gating;
+
+	drm->phys_addr = SMC_GPU_DRM_REG;
+	poweroff_gating->phys_addr = GPU_POWEROFF_GATING_REG;
+
+	drm->ioaddr = ioremap(drm->phys_addr, 1);
+	poweroff_gating->ioaddr = ioremap(poweroff_gating->phys_addr, 1);
+}
+
+static inline int iounmap_regs(void)
+{
+	struct reg *drm;
+	struct reg *poweroff_gating;
+
+	POINTER_IS_NULL(sunxi_regs);
+
+	drm = &sunxi_regs->drm;
+	poweroff_gating = &sunxi_regs->poweroff_gating;
+
+	iounmap(drm->ioaddr);
+	iounmap(poweroff_gating->ioaddr);
+
+	free_os_mem(sunxi_regs);
+
+	return 0;
+}
+
+static inline int set_poweroff_gating(bool status)
+{
+	void __iomem *ioaddr;
+
+	POINTER_IS_NULL(sunxi_regs);
+
+	ioaddr = sunxi_regs->poweroff_gating.ioaddr;
+	POINTER_IS_NULL(ioaddr);
+
+	set_reg_bit(0, status, ioaddr);
+
+	return 0;
+}
+
+static inline int set_gpu_drm_mode(bool status)
+{
+	void __iomem *ioaddr;
+
+	POINTER_IS_NULL(sunxi_regs);
+
+	ioaddr = sunxi_regs->drm.ioaddr;
+	POINTER_IS_NULL(ioaddr);
+
+	set_reg_bit(0, status, ioaddr);
+
+	return 0;
+}
+
+static int get_gpu_clk(void)
+{
+	sunxi_clks = alloc_os_mem(sizeof(struct sunxi_clks));
+	if (sunxi_clks == NULL) {
+		sunxi_err("failed to allocate memory for sunxi_clks!\n");
+		return -ENOMEM;
+	}
+
+	sunxi_clks->pll = of_clk_get(sunxi_np, 0);
+	if (IS_ERR_OR_NULL(sunxi_clks->pll)) {
+		sunxi_err("failed to get GPU pll clock!\n");
+		return -EPERM;
+	}
+
+	sunxi_clks->core = of_clk_get(sunxi_np, 1);
+	if (IS_ERR_OR_NULL(sunxi_clks->core)) {
+		sunxi_err("failed to get GPU core clock!\n");
+		return -EPERM;
+	}
+
+	sunxi_kbdev->clock = sunxi_clks->pll;
+
+	return 0;
+}
+
+static int put_gpu_clk(void)
+{
+	POINTER_IS_NULL(sunxi_clks);
+
+	free_os_mem(sunxi_clks);
+
+	return 0;
+}
+
+static int enable_gpu_clk(void)
+{
+	int err;
+
+	POINTER_IS_NULL(sunxi_clks);
+
+	if (!__clk_is_enabled(sunxi_clks->pll)) {
+		err = clk_prepare_enable(sunxi_clks->pll);
+		if (err)
+			return err;
+	}
+
+	if (!__clk_is_enabled(sunxi_clks->core)) {
+		err = clk_prepare_enable(sunxi_clks->core);
+		if (err)
+			return err;
+	}
+
+	return 0;
+}
+
+static void disable_gpu_clk(void)
+{
+	if (__clk_is_enabled(sunxi_clks->core))
+		clk_disable_unprepare(sunxi_clks->core);
+	if (__clk_is_enabled(sunxi_clks->pll))
+		clk_disable_unprepare(sunxi_clks->pll);
+}
+
+static int set_gpu_freq_unsafe(unsigned long freq /* Hz */)
+{
+	int err;
+	unsigned long current_freq;
+
+	POINTER_IS_NULL(sunxi_kbdev);
+	POINTER_IS_NULL(sunxi_clks);
+
+	current_freq = clk_get_rate(sunxi_clks->core);
+	if (freq == current_freq)
+		return 0;
+
+	err = clk_set_rate(sunxi_clks->pll, freq);
+	if (err) {
+		sunxi_err("failed to set GPU pll clock to %lu MHz!\n",
+					freq/1000/1000);
+		return err;
+	}
+
+	err = clk_set_rate(sunxi_clks->core, freq);
+	if (err)
+		sunxi_err("failed to set GPU core clock to %lu MHz!\n",
+					freq/1000/1000);
+
+#ifdef CONFIG_MALI_DEVFREQ
+	sunxi_kbdev->current_freq = clk_get_rate(sunxi_clks->pll);
+#endif
+
+	return err;
+}
+
+static int set_gpu_freq_safe(unsigned long freq /* Hz */)
+{
+	int err;
+
+	POINTER_IS_NULL(sunxi_kbdev);
+
+	kbase_pm_suspend(sunxi_kbdev);
+	err = set_gpu_freq_unsafe(freq);
+	kbase_pm_resume(sunxi_kbdev);
+
+	return err;
+}
+
+#if defined(CONFIG_REGULATOR)
+static int get_gpu_power(void)
+{
+	sunxi_regulator = regulator_get(NULL, "vdd-gpu");
+	if (sunxi_regulator == NULL) {
+		sunxi_err("failed to get the GPU regulator!\n");
+		return -EPERM;
+	}
+
+	sunxi_kbdev->regulator = sunxi_regulator;
+
+	return 0;
+}
+
+static void put_gpu_power(void)
+{
+	sunxi_regulator = NULL;
+}
+
+static int enable_gpu_power(void)
+{
+	int err;
+
+	POINTER_IS_NULL(sunxi_regulator);
+
+	/*
+	 * regulator_is_enabled is the status for the GPU DCDC hardware. And
+	 * GPU power is always enabled during the system boot. at the same
+	 * time, however, the refcount of GPU regulator is 0. So here we force
+	 * calling regulator_enable at the first time to make the result of
+	 * regulator_is_enabled and regulator refcount match or else kernel
+	 * crash may occur.
+	 */
+	if (sunxi_initialized && regulator_is_enabled(sunxi_regulator))
+		return 0;
+
+	err = regulator_enable(sunxi_regulator);
+	if (err) {
+		sunxi_err("failed to enable GPU power!\n");
+		return err;
+	}
+
+	set_poweroff_gating(0);
+
+	return err;
+}
+
+static int disable_gpu_power(void)
+{
+	int err = 0;
+
+	POINTER_IS_NULL(sunxi_regulator);
+
+	/* If GPU is not initialized, regulator_disable must not be used. */
+	if (!sunxi_initialized)
+		return 0;
+
+	if (!regulator_is_enabled(sunxi_regulator))
+		return 0;
+
+	set_poweroff_gating(1);
+
+	err = regulator_disable(sunxi_regulator);
+	if (err) {
+		sunxi_err("failed to disable GPU power!\n");
+		return -EPERM;
+	}
+
+	return 0;
+}
+
+static int set_gpu_voltage_unsafe(int vol /* uV */)
+{
+	int err;
+	int current_vol;
+
+	POINTER_IS_NULL(sunxi_kbdev);
+	POINTER_IS_NULL(sunxi_regulator);
+
+	current_vol = regulator_get_voltage(sunxi_regulator);
+	if (vol == current_vol)
+		return 0;
+
+	err = regulator_set_voltage(sunxi_regulator, vol, vol);
+	if (err) {
+		sunxi_err("failed to set GPU voltage to %d mV!\n",
+					vol/1000);
+		return -EPERM;
+	}
+
+#ifdef CONFIG_MALI_DEVFREQ
+	sunxi_kbdev->current_voltage = regulator_get_voltage(sunxi_regulator);
+#endif
+
+	return err;
+}
+
+static int set_gpu_voltage_safe(int vol /* uV */)
+{
+	int err;
+
+	POINTER_IS_NULL(sunxi_kbdev);
+
+	kbase_pm_suspend(sunxi_kbdev);
+	err = set_gpu_voltage_unsafe(vol);
+	kbase_pm_resume(sunxi_kbdev);
+
+	return err;
+}
+#endif /* CONFIG_REGULATOR */
+
+static int find_the_current_level(void)
+{
+	int vol, current_vol;
+	unsigned long freq, current_freq;
+	int top_level, mid_level, bot_level;
+
+	POINTER_IS_NULL(sunxi_clks);
+	POINTER_IS_NULL(sunxi_levels);
+#ifdef CONFIG_REGULATOR
+	POINTER_IS_NULL(sunxi_regulator);
+#endif
+	POINTER_IS_NULL(sunxi_vf_table);
+
+	top_level = sunxi_levels->max_level;
+	bot_level = 0;
+
+#ifdef CONFIG_REGULATOR
+	current_vol  = regulator_get_voltage(sunxi_regulator);
+#endif
+	current_freq = clk_get_rate(sunxi_clks->pll);
+
+	vol  = sunxi_vf_table[top_level].vol;
+	freq = sunxi_vf_table[top_level].freq;
+	if (freq == current_freq && vol == current_vol) {
+		sunxi_levels->current_level = top_level;
+		return 0;
+	}
+
+	vol  = sunxi_vf_table[bot_level].vol;
+	freq = sunxi_vf_table[bot_level].freq;
+	if (freq == current_freq && vol == current_vol) {
+		sunxi_levels->current_level = bot_level;
+		return 0;
+	}
+
+	do {
+		mid_level = (top_level + bot_level) / 2;
+		if (mid_level == top_level)
+			break;
+		if (mid_level == bot_level)
+			break;
+
+		vol  = sunxi_vf_table[mid_level].vol;
+		freq = sunxi_vf_table[mid_level].freq;
+		if (freq == current_freq) {
+			if (vol == current_vol) {
+				sunxi_levels->current_level = mid_level;
+				return 0;
+			}
+			break;
+		} else if (current_freq < freq) {
+			top_level = mid_level;
+		} else {
+			bot_level = mid_level;
+		}
+	} while (1);
+
+	sunxi_levels->current_level = -1;
+
+	return 0;
+}
+
+int revise_current_level(void)
+{
+	int vol = 0;
+	unsigned long freq = 0;
+	int level, current_level;
+	int current_vol;
+	unsigned long current_freq;
+
+	POINTER_IS_NULL(sunxi_clks);
+	POINTER_IS_NULL(sunxi_levels);
+#ifdef CONFIG_REGULATOR
+	POINTER_IS_NULL(sunxi_regulator);
+#endif
+	POINTER_IS_NULL(sunxi_vf_table);
+
+	current_level = sunxi_levels->current_level;
+	if (current_level < 0)
+		return 0;
+
+	level = current_level;
+	vol  = sunxi_vf_table[level].vol;
+	freq = sunxi_vf_table[level].freq;
+
+	if (vol <= 0 || freq <= 0)
+		return 0;
+
+#ifdef CONFIG_REGULATOR
+	current_vol  = regulator_get_voltage(sunxi_regulator);
+#endif
+	current_freq = clk_get_rate(sunxi_clks->pll);
+
+	if (vol != current_vol || freq != current_freq)
+		find_the_current_level();
+
+	return 0;
+}
+
+static int dvfs_change(int level)
+{
+	int vol;
+	unsigned long freq;
+
+	POINTER_IS_NULL(sunxi_levels);
+	POINTER_IS_NULL(sunxi_kbdev);
+
+	if (!sunxi_initialized)
+		return 0;
+
+	if (level > sunxi_levels->max_level)
+		return 0;
+
+	if (level == sunxi_levels->current_level)
+		return 0;
+
+	kbase_pm_suspend(sunxi_kbdev);
+
+	vol = sunxi_vf_table[level].vol;
+	freq = sunxi_vf_table[level].freq;
+
+	if (level > sunxi_levels->current_level) {
+		set_gpu_voltage_unsafe(vol);
+		set_gpu_freq_unsafe(freq);
+	} else {
+		set_gpu_freq_unsafe(freq);
+		set_gpu_voltage_unsafe(vol);
+	}
+
+	sunxi_levels->current_level = level;
+
+	kbase_pm_resume(sunxi_kbdev);
+
+	return 0;
+}
+
+#ifdef CONFIG_DEBUG_FS
+static ssize_t write_write(struct file *filp, const char __user *buf,
+	size_t count, loff_t *offp)
+{
+	int i, err;
+	unsigned long val;
+	bool semicolon = false;
+	char buffer[50], data[32];
+	int head_size, data_size;
+
+	if (count >= sizeof(buffer))
+		goto err_out;
+
+	if (copy_from_user(buffer, buf, count))
+		return -EFAULT;
+
+	/* The command format is '<head>:<data>' or '<head>:<data>;' */
+	for (i = 0; i < count; i++) {
+		if (*(buffer+i) == ':')
+			head_size = i;
+		if (*(buffer+i) == ';' && head_size) {
+			data_size = count - head_size - 3;
+			semicolon = true;
+			break;
+		}
+	}
+
+	if (!head_size)
+		goto err_out;
+
+	if (!semicolon)
+		data_size = count - head_size - 2;
+
+	if (data_size > 32)
+		goto err_out;
+
+	memcpy(data, buffer + head_size + 1, data_size);
+	data[data_size] = '\0';
+
+	err = kstrtoul(data, 10, &val);
+	if (err)
+		goto err_out;
+
+	if (!strncmp("enable", buffer, head_size)) {
+		sunxi_debug->enable = val ? true : false;
+	} else if (!strncmp("frequency", buffer, head_size)) {
+		if (val == 0 || val == 1) {
+			sunxi_debug->frequency = val ? true : false;
+		} else {
+			set_gpu_freq_safe(val * 1000 * 1000);
+			revise_current_level();
+		}
+	} else if (!strncmp("voltage", buffer, head_size)) {
+		if (val == 0 || val == 1) {
+			sunxi_debug->voltage = val ? true : false;
+		} else {
+			set_gpu_voltage_safe(val * 1000);
+			revise_current_level();
+		}
+	} else if (!strncmp("power", buffer, head_size)) {
+		sunxi_debug->power = val ? true : false;
+	} else if (!strncmp("idle", buffer, head_size)) {
+		if (val == 0 || val == 1)
+			sunxi_debug->idle = val ? true : false;
+		else
+			sunxi_idle_enabled = (val - 2) ? true : false;
+	} else if (!strncmp("scenectrl", buffer, head_size)) {
+		if (val == 0 || val == 1)
+			sunxi_debug->scenectrl = val ? true : false;
+		else
+			sunxi_scenectrl_enabled = (val - 2) ? true : false;
+#ifdef CONFIG_MALI_DEVFREQ
+	} else if (!strncmp("dvfs", buffer, head_size)) {
+		if (val == 0 || val == 1)
+			sunxi_debug->dvfs = val ? true : false;
+		else
+			sunxi_dvfs_enabled = (val - 2) ? true : false;
+#endif
+	} else if (!strncmp("level", buffer, head_size)) {
+		if (val == 0 || val == 1)
+			sunxi_debug->level = val ? true : false;
+	} else {
+		goto err_out;
+	}
+
+	return count;
+
+err_out:
+	sunxi_err("invalid parameter!\n");
+	return -EINVAL;
+}
+
+static const struct file_operations write_fops = {
+	.owner = THIS_MODULE,
+	.write = write_write,
+};
+
+static int dump_debugfs_show(struct seq_file *s, void *data)
+{
+	bool level_match;
+	int i, vol, current_vol;
+	unsigned long freq, current_freq;
+
+	POINTER_IS_NULL(sunxi_debug);
+	POINTER_IS_NULL(sunxi_clks);
+	POINTER_IS_NULL(sunxi_regulator);
+
+	if (!sunxi_debug->enable)
+		return 0;
+
+	if (sunxi_debug->frequency) {
+		freq = clk_get_rate(sunxi_clks->core) / (1000 * 1000);
+		seq_printf(s, "frequency:%luMHz;", freq);
+	}
+
+#ifdef CONFIG_REGULATOR
+	if (sunxi_debug->voltage) {
+		vol = regulator_get_voltage(sunxi_regulator) / 1000;
+		seq_printf(s, "voltage:%dmV;", vol);
+	}
+
+	if (sunxi_debug->power)
+		seq_printf(s, "power:%s;",
+			regulator_is_enabled(sunxi_regulator) ? "on" : "off");
+#endif
+
+	if (sunxi_debug->idle)
+		seq_printf(s, "idle:%s;", sunxi_idle_enabled ? "on" : "off");
+
+	if (sunxi_debug->scenectrl)
+		seq_printf(s, "scenectrl:%s;",
+			sunxi_scenectrl_enabled ? "on" : "off");
+
+#ifdef CONFIG_MALI_DEVFREQ
+	if (sunxi_debug->dvfs)
+		seq_printf(s, "dvfs:%s;",
+			sunxi_dvfs_enabled ? "on" : "off");
+#endif
+
+#ifdef CONFIG_REGULATOR
+	if (sunxi_debug->level) {
+		seq_printf(s, "\nmax_level:%d", sunxi_levels->max_level);
+		seq_printf(s, "\nmax_normal_level:%d",
+			sunxi_levels->max_normal_level);
+		seq_printf(s, "\ncurrent_level:%d",
+				sunxi_levels->current_level);
+		seq_puts(s, "\n   level  voltage  frequency\n");
+		current_vol  = regulator_get_voltage(sunxi_regulator);
+		current_freq = clk_get_rate(sunxi_clks->pll);
+		for (i = 0; i <= sunxi_levels->max_level; i++) {
+			vol  = sunxi_vf_table[i].vol;
+			freq = sunxi_vf_table[i].freq;
+			if ((current_vol == vol) && (current_freq == freq))
+				level_match = true;
+			else
+				level_match = false;
+
+			seq_printf(s, "%s  %2d    %3ld MHz  %4d mV\n",
+				level_match ? "->" : "  ",
+				i, freq / 1000 / 1000, vol / 1000);
+		}
+		seq_puts(s, "\n==================");
+	}
+#endif
+
+	seq_puts(s, "\n");
+
+	return 0;
+}
+
+static int dump_debugfs_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, dump_debugfs_show, inode->i_private);
+}
+
+static const struct file_operations dump_fops = {
+	.owner = THIS_MODULE,
+	.open = dump_debugfs_open,
+	.read  = seq_read,
+	.llseek = seq_lseek,
+	.release = single_release,
+};
+
+static int gpu_utlisation_seq_show(struct seq_file *s, void *data)
+{
+	int utilisation;
+	unsigned long time_total, time_busy;
+
+	POINTER_IS_NULL(sunxi_kbdev);
+
+	kbase_pm_get_dvfs_utilisation(sunxi_kbdev, &time_total, &time_busy);
+	utilisation = (time_busy * 100) / time_total;
+	seq_printf(s, "%d%%\n", utilisation);
+
+	return 0;
+}
+
+static int gpu_utlisation_debugfs_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, gpu_utlisation_seq_show, NULL);
+}
+
+static const struct file_operations gpu_utlisation_debugfs_fops = {
+	.open = gpu_utlisation_debugfs_open,
+	.read = seq_read,
+	.llseek = seq_lseek,
+	.release = single_release,
+};
+
+void kbasep_gpu_utilisation_debugfs_init(struct kbase_device *kbdev)
+{
+	debugfs_create_file("gpu_utilisation", S_IRUGO,
+		kbdev->mali_debugfs_directory, NULL,
+		&gpu_utlisation_debugfs_fops);
+}
+
+static int sunxi_create_debugfs(void)
+{
+	struct dentry *node;
+
+	sunxi_debugfs = debugfs_create_dir("sunxi_gpu", NULL);
+	if (IS_ERR_OR_NULL(sunxi_debugfs))
+		return -ENOMEM;
+
+	node = debugfs_create_file("write", 0644,
+				sunxi_debugfs, NULL, &write_fops);
+	if (IS_ERR_OR_NULL(node))
+		return -ENOMEM;
+
+	node = debugfs_create_file("dump", 0644,
+				sunxi_debugfs, NULL, &dump_fops);
+	if (IS_ERR_OR_NULL(node))
+		return -ENOMEM;
+
+	sunxi_debug = alloc_os_mem(sizeof(struct sunxi_debug));
+	if (sunxi_debug == NULL)
+		return -ENOMEM;
+
+	return 0;
+}
+#endif /* CONFIG_DEBUG_FS */
+
+static ssize_t scene_ctrl_cmd_show(struct device *dev,
+				struct device_attribute *attr,
+				char *buf)
+{
+	return sprintf(buf, "%d\n", sunxi_scenectrl_cmd);
+}
+
+static ssize_t scene_ctrl_cmd_store(struct device *dev,
+				struct device_attribute *attr,
+				const char *buf, size_t count)
+{
+	int err;
+	int level;
+	unsigned long val;
+	enum scene_ctrl_cmd cmd;
+
+	if (!sunxi_scenectrl_enabled)
+		return count;
+
+	err = kstrtoul(buf, 10, &val);
+	if (err) {
+		sunxi_err("scene_ctrl_cmd_store gets a invalid parameter!\n");
+		return count;
+	}
+
+	cmd = (enum scene_ctrl_cmd)val;
+	switch (cmd) {
+	case SCENE_CTRL_NORMAL_MODE:
+		level = sunxi_levels->max_normal_level;
+		sunxi_scenectrl_cmd = SCENE_CTRL_NORMAL_MODE;
+		break;
+
+	case SCENE_CTRL_PERFORMANCE_MODE:
+		level = sunxi_levels->max_level;
+		sunxi_scenectrl_cmd = SCENE_CTRL_PERFORMANCE_MODE;
+		break;
+
+	default:
+		sunxi_err("invalid scene control command %d!\n", cmd);
+		return count;
+	}
+
+	dvfs_change(level);
+
+	return count;
+}
+
+static ssize_t scene_ctrl_status_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	return sprintf(buf, "%d\n", sunxi_scenectrl_enabled);
+}
+
+static ssize_t scene_ctrl_status_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t count)
+{
+	int err;
+	unsigned long val;
+
+	err = kstrtoul(buf, 10, &val);
+
+	if (err) {
+		sunxi_err("scene_ctrl_status_store gets a invalid parameter!");
+		return count;
+	}
+
+	sunxi_scenectrl_enabled = val ? true : false;
+
+	return count;
+}
+
+static DEVICE_ATTR(command, 0660,
+		scene_ctrl_cmd_show, scene_ctrl_cmd_store);
+static DEVICE_ATTR(status, 0660,
+		scene_ctrl_status_show, scene_ctrl_status_store);
+
+static struct attribute *scene_ctrl_attributes[] = {
+	&dev_attr_command.attr,
+	&dev_attr_status.attr,
+	NULL
+};
+
+static struct attribute_group scene_ctrl_attribute_group = {
+	.name = "scenectrl",
+	.attrs = scene_ctrl_attributes
+};
+
+#ifdef CONFIG_MALI_DEVFREQ
+int sunxi_update_vf(unsigned long *freq, unsigned long *voltage)
+{
+	unsigned long max_normal_freq;
+
+	POINTER_IS_NULL(sunxi_clks);
+	POINTER_IS_NULL(sunxi_regulator);
+
+	max_normal_freq = sunxi_vf_table[sunxi_levels->max_normal_level].freq;
+	if (*freq > max_normal_freq) {
+		*freq = max_normal_freq;
+		*voltage = sunxi_vf_table[sunxi_levels->max_normal_level].vol;
+	}
+	if (sunxi_dvfs_enabled)
+		return 0;
+
+	*freq = clk_get_rate(sunxi_clks->pll);
+	*voltage = regulator_get_voltage(sunxi_regulator);
+
+	return 0;
+}
+#endif
+
+static int get_u32_from_fex(char *second_key, int *val)
+{
+	return of_property_read_u32(sunxi_np, second_key, val);
+}
+
+static int parse_dts_and_fex(void)
+{
+	int count = 1;
+	struct sunxi_vf_table vf_table[40];
+#ifdef CONFIG_OF
+	int fex_val;
+	int err;
+	size_t size;
+	int nr;
+	const __be32 *val;
+	const struct property *prop;
+#endif
+
+	POINTER_IS_NULL(sunxi_levels);
+
+	sunxi_levels->max_normal_level = -1;
+
+	vf_table[0].vol = GPU_DEFAULT_VOL;
+	vf_table[0].freq = GPU_DEFAULT_FREQ;
+
+#ifdef CONFIG_OF
+	err = get_u32_from_fex("gpu_idle", &fex_val);
+	if (!err)
+		sunxi_idle_enabled = fex_val ? true : false;
+
+#ifdef CONFIG_MALI_DEVFREQ
+	err = get_u32_from_fex("dvfs_status", &fex_val);
+	if (!err)
+		sunxi_dvfs_enabled = fex_val ? true : false;
+#endif
+
+	err = get_u32_from_fex("scene_ctrl_status", &fex_val);
+	if (!err)
+		sunxi_scenectrl_enabled = fex_val ? true : false;
+
+	err = get_u32_from_fex("max_normal_level", &fex_val);
+	if (!err)
+		sunxi_levels->max_normal_level = fex_val;
+
+	prop = of_find_property(sunxi_np, "operating-points", NULL);
+	if (!prop)
+		return -ENODEV;
+	if (!prop->value)
+		return -ENODATA;
+
+	nr = prop->length / sizeof(u32);
+	if (nr % 2) {
+		sunxi_err("%s: Invalid OPP table!\n", __func__);
+		return -EINVAL;
+	}
+	count = nr / 2;
+	val = prop->value;
+	while (nr) {
+		vf_table[nr / 2 - 1].freq = be32_to_cpup(val++) * 1000;
+		vf_table[nr / 2 - 1].vol  = be32_to_cpup(val++);
+		nr -= 2;
+	}
+#endif /* CONFIG_OF */
+
+	size = sizeof(struct sunxi_vf_table) * count;
+	sunxi_vf_table = alloc_os_mem(size);
+	if (sunxi_vf_table == NULL) {
+		sunxi_err("failed to allocate memory for sunxi_vf_table!\n");
+		return -ENOMEM;
+	}
+
+	memcpy(sunxi_vf_table, vf_table, size);
+
+	sunxi_levels->max_level = count - 1;
+
+	if (sunxi_levels->max_normal_level == -1 ||
+		sunxi_levels->max_normal_level > sunxi_levels->max_level)
+		sunxi_levels->max_normal_level = sunxi_levels->max_level;
+
+	return 0;
+}
+
+static int sunxi_protected_mode_enable(
+		struct protected_mode_device *protected_dev)
+{
+	set_gpu_drm_mode(1);
+
+	return 0;
+}
+
+static int sunxi_protected_mode_disable(
+		struct protected_mode_device *protected_dev)
+{
+	set_gpu_drm_mode(0);
+
+	return 0;
+}
+
+struct protected_mode_ops sunxi_protected_ops = {
+	.protected_mode_enable = sunxi_protected_mode_enable,
+	.protected_mode_disable = sunxi_protected_mode_disable
+};
+
+int sunxi_platform_init(struct kbase_device *kbdev)
+{
+	int err;
+#if defined(CONFIG_REGULATOR)
+	int vol;
+#endif
+	unsigned long freq;
+
+	sunxi_kbdev = kbdev;
+
+	sunxi_np = of_find_compatible_node(NULL, NULL, "arm,mali-midgard");
+	if (sunxi_np == NULL) {
+		sunxi_err("of_find_compatible_node failed!\n");
+		return -EINVAL;
+	}
+
+	sunxi_levels = alloc_os_mem(sizeof(struct sunxi_levels));
+	if (sunxi_levels == NULL) {
+		sunxi_err("failed to allocate memory for sunxi_levels!\n");
+		return -ENOMEM;
+	}
+
+	err = parse_dts_and_fex();
+	if (err)
+		return err;
+
+#if defined(CONFIG_REGULATOR)
+	get_gpu_power();
+
+	vol = sunxi_vf_table[sunxi_levels->max_normal_level].vol;
+	err = set_gpu_voltage_unsafe(vol);
+	if (err)
+		return err;
+#endif /* CONFIG_REGULATOR */
+
+	ioremap_regs();
+
+	err = get_gpu_clk();
+	if (err)
+		return err;
+
+	freq = sunxi_vf_table[sunxi_levels->max_normal_level].freq;
+	err = set_gpu_freq_unsafe(freq);
+	if (err)
+		return err;
+
+	sunxi_levels->current_level = sunxi_levels->max_normal_level;
+
+#if defined(CONFIG_REGULATOR)
+	err = enable_gpu_power();
+	if (err)
+		return err;
+#endif /* CONFIG_REGULATOR */
+
+	err = enable_gpu_clk();
+	if (err)
+		return err;
+
+#ifdef CONFIG_DEBUG_FS
+	err = sunxi_create_debugfs();
+	if (err)
+		return err;
+#endif /* CONFIG_DEBUG_FS */
+
+	err = sysfs_create_group(&kbdev->dev->kobj,
+						&scene_ctrl_attribute_group);
+	if (err)
+		sunxi_err("sunxi sysfs group creation failed!\n");
+
+
+	kbdev->protected_ops = &sunxi_protected_ops;
+	kbdev->protected_mode_support = true;
+
+	sunxi_initialized = true;
+
+	return 0;
+}
+
+void sunxi_platform_term(struct kbase_device *kbdev)
+{
+	disable_gpu_clk();
+
+	put_gpu_clk();
+
+#if defined(CONFIG_REGULATOR)
+	disable_gpu_power();
+
+	put_gpu_power();
+#endif /* CONFIG_REGULATOR */
+
+	iounmap_regs();
+
+	sunxi_initialized = false;
+}
+
+struct kbase_platform_funcs_conf sunxi_platform_conf = {
+	.platform_init_func = sunxi_platform_init,
+	.platform_term_func = sunxi_platform_term,
+};
+
+int kbase_platform_early_init(void)
+{
+	return 0;
+}
+
+static int sunxi_power_on(struct kbase_device *kbdev)
+{
+	int err;
+
+#if defined(CONFIG_REGULATOR)
+	err = enable_gpu_power();
+	if (err)
+		return err;
+#endif /* CONFIG_REGULATOR */
+
+	err = enable_gpu_clk();
+	if (err)
+		return err;
+
+	return 0;
+}
+
+static void sunxi_power_off(struct kbase_device *kbdev)
+{
+	disable_gpu_clk();
+
+	if (!sunxi_idle_enabled)
+		return;
+
+#if defined(CONFIG_REGULATOR)
+	disable_gpu_power();
+#endif /* CONFIG_REGULATOR */
+}
+
+static void sunxi_power_resume(struct kbase_device *kbdev)
+{
+#if defined(CONFIG_REGULATOR)
+	enable_gpu_power();
+#endif /* CONFIG_REGULATOR */
+
+	enable_gpu_clk();
+}
+
+static void sunxi_power_suspend(struct kbase_device *kbdev)
+{
+	disable_gpu_clk();
+
+#if defined(CONFIG_REGULATOR)
+	disable_gpu_power();
+#endif /* CONFIG_REGULATOR */
+}
+
+struct kbase_pm_callback_conf sunxi_pm_callbacks = {
+	.power_on_callback      = sunxi_power_on,
+	.power_off_callback     = sunxi_power_off,
+	.power_suspend_callback = sunxi_power_suspend,
+	.power_resume_callback  = sunxi_power_resume
+};
