diff -drupN a/modules/gpu/img-rgx/linux/rogue_km/services/system/rgx_sunxi/sunxi_platform.c b/modules/gpu/img-rgx/linux/rogue_km/services/system/rgx_sunxi/sunxi_platform.c
--- a/modules/gpu/img-rgx/linux/rogue_km/services/system/rgx_sunxi/sunxi_platform.c	1970-01-01 03:00:00.000000000 +0300
+++ b/modules/gpu/img-rgx/linux/rogue_km/services/system/rgx_sunxi/sunxi_platform.c	2022-06-12 05:28:14.000000000 +0300
@@ -0,0 +1,273 @@
+/*
+ * Copyright (C) 2019 Allwinner Technology Limited. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * Author: Albert Yu <yuxyun@allwinnertech.com>
+ */
+
+#include <asm/io.h>
+#include <linux/clk.h>
+#include <linux/slab.h>
+#include <linux/platform_device.h>
+
+#include "platform.h"
+
+#if defined(CONFIG_ARCH_SUN50IW10)
+#define PPU_REG_BASE            (0x07001000)
+#define GPU_SYS_REG_BASE        (0x01880020)
+#define PPU_GATING_RESET_REG    (0x0701017c)
+#define GPU_RSTN_REG            (PPU_REG_BASE)
+#define GPU_CLK_GATE_REG        (PPU_REG_BASE + 0x04)
+#define GPU_POWEROFF_GATING_REG (PPU_REG_BASE + 0x08)
+#define GPU_PSWON_REG           (PPU_REG_BASE + 0x0c)
+#define GPU_PSWOFF_REG          (PPU_REG_BASE + 0x10)
+#define GPU_PD_STAT_REG         (PPU_REG_BASE + 0x20)
+#define PPU_POWER_CTRL_REG      (PPU_REG_BASE + 0x24)
+#define GPU_CLK_CTRL_REG        (GPU_SYS_REG_BASE + 0x20)
+#endif /* defined(CONFIG_ARCH_SUN50IW10) */
+
+struct sunxi_data *sunxi_data;
+
+static inline int get_clks_wrap(struct device *dev)
+{
+#if defined(CONFIG_OF)
+	sunxi_data->clks.pll = of_clk_get(dev->of_node, 0);
+	if (IS_ERR_OR_NULL(sunxi_data->clks.pll)) {
+		dev_err(dev, "failed to get GPU pll clock");
+		return -1;
+	}
+
+	sunxi_data->clks.core = of_clk_get(dev->of_node, 1);
+	if (IS_ERR_OR_NULL(sunxi_data->clks.core)) {
+		dev_err(dev, "failed to get GPU core clock");
+		return -1;
+	}
+#endif /* defined(CONFIG_OF) */
+
+	return 0;
+}
+
+static inline void put_clks_wrap(void)
+{
+	sunxi_data->clks.pll = NULL;
+	sunxi_data->clks.core = NULL;
+}
+
+static void enable_clks_wrap(struct sunxi_clks clks)
+{
+	clk_prepare_enable(clks.pll);
+	clk_prepare_enable(clks.core);
+}
+
+static void disable_clks_wrap(struct sunxi_clks clks)
+{
+	clk_disable_unprepare(clks.core);
+	clk_disable_unprepare(clks.pll);
+}
+
+static inline void power_up_gpu_wrap(void)
+{
+	u32 i, val;
+	struct reg *p_ppu_gating_rst;
+	struct reg *p_gpu_rstn;
+	struct reg *p_gpu_clk_gate;
+	struct reg *p_poweroff_gating;
+	struct reg *p_gpu_pswon;
+	struct reg *p_pd_stat;
+	struct reg *p_ppu_pw_ctrl;
+	struct reg *p_gpu_clk_ctrl;
+
+	p_ppu_gating_rst = &sunxi_data->regs.ppu_gating_rst;
+	p_gpu_rstn = &sunxi_data->regs.gpu_rstn;
+	p_gpu_clk_gate = &sunxi_data->regs.gpu_clk_gate;
+	p_poweroff_gating = &sunxi_data->regs.poweroff_gating;
+	p_gpu_pswon = &sunxi_data->regs.gpu_pswon;
+	p_pd_stat = &sunxi_data->regs.pd_stat;
+	p_ppu_pw_ctrl = &sunxi_data->regs.ppu_pw_ctrl;
+	p_gpu_clk_ctrl = &sunxi_data->regs.gpu_clk_ctrl;
+
+	/* Get the physical address */
+	p_ppu_gating_rst->phys = PPU_GATING_RESET_REG;
+	p_gpu_rstn->phys = GPU_RSTN_REG;
+	p_gpu_clk_gate->phys = GPU_CLK_GATE_REG;
+	p_poweroff_gating->phys = GPU_POWEROFF_GATING_REG;
+	p_gpu_pswon->phys = GPU_PSWON_REG;
+	p_pd_stat->phys = GPU_PD_STAT_REG;
+	p_ppu_pw_ctrl->phys = PPU_POWER_CTRL_REG;
+	p_gpu_clk_ctrl->phys = GPU_CLK_CTRL_REG;
+
+	/************** Do ioremap **************/
+	p_ppu_gating_rst->ioaddr = ioremap(p_ppu_gating_rst->phys, 4);
+	p_gpu_rstn->ioaddr = ioremap(p_gpu_rstn->phys, 4);
+	p_gpu_clk_gate->ioaddr = ioremap(p_gpu_clk_gate->phys, 4);
+	p_poweroff_gating->ioaddr = ioremap(p_poweroff_gating->phys, 4);
+	p_gpu_pswon->ioaddr = ioremap(p_gpu_pswon->phys, 4);
+	p_pd_stat->ioaddr = ioremap(p_pd_stat->phys, 4);
+	p_ppu_pw_ctrl->ioaddr = ioremap(p_ppu_pw_ctrl->phys, 4);
+	p_gpu_clk_ctrl->ioaddr = ioremap(p_gpu_clk_ctrl->phys, 4);
+
+	/************** Power up GPU **************/
+	/* Enable PPU bus gating and deassert PPU */
+	writel(0x10001, p_ppu_gating_rst->ioaddr);
+
+	enable_clks_wrap(sunxi_data->clks);
+
+	/* Domain A and domain B are both off */
+	val = (readl(p_pd_stat->ioaddr) & 0xFFFFFFFC) + 0x2;
+	writel(val, p_pd_stat->ioaddr);
+
+	/* Enable software mode */
+	val = (readl(p_ppu_pw_ctrl->ioaddr) & 0xFFFFFFFC) + 0x1;
+	writel(val, p_ppu_pw_ctrl->ioaddr);
+
+	/* Open domain A by 8 steps to guarantee power stability */
+	for (i = 0; i < 8; i++) {
+		val = readl(p_gpu_pswon->ioaddr) | (1 << i);
+		writel(val, p_gpu_pswon->ioaddr);
+	}
+
+	/* Disable GPU clock gating */
+	writel(0x1, p_gpu_clk_gate->ioaddr);
+
+	/* Disable the isolation between GPU and VDD-SYS */
+	val = readl(p_poweroff_gating->ioaddr) & 0xFFFFFFFE;
+	writel(val, p_poweroff_gating->ioaddr);
+
+	/* Deassert GPU */
+	writel(0x1, p_gpu_rstn->ioaddr);
+
+	/* Power domain status: host */
+	val = (readl(p_pd_stat->ioaddr) & 0xFFFFFFFC) + 0x1;
+	writel(val, p_pd_stat->ioaddr);
+
+	/* Open domain B by 8 steps to guarantee power stability */
+	for (i = 0; i < 8; i++) {
+		val = readl(p_gpu_pswon->ioaddr) | (1 << (i + 16));
+		writel(val, p_gpu_pswon->ioaddr);
+	}
+
+	/* Disable the isolation between domain A and domain B */
+	val = readl(p_poweroff_gating->ioaddr) & 0xFFFFFFFD;
+	writel(val, p_poweroff_gating->ioaddr);
+
+	/* Power domain status: 3D */
+	val = readl(p_pd_stat->ioaddr) & 0xFFFFFFFC;
+	writel(val, p_pd_stat->ioaddr);
+
+	/* Enable hardware mode */
+	val = (readl(p_ppu_pw_ctrl->ioaddr) & 0xFFFFFFFC) + 0x2;
+	writel(val, p_ppu_pw_ctrl->ioaddr);
+
+	writel(0x8, p_gpu_clk_ctrl->ioaddr);
+}
+
+static inline void power_down_gpu_wrap(void)
+{
+	u32 val;
+	struct reg *p_ppu_gating_rst;
+	struct reg *p_gpu_rstn;
+	struct reg *p_gpu_clk_gate;
+	struct reg *p_poweroff_gating;
+	struct reg *p_gpu_pswoff;
+	struct reg *p_pd_stat;
+	struct reg *p_ppu_pw_ctrl;
+
+	p_ppu_gating_rst = &sunxi_data->regs.ppu_gating_rst;
+	p_gpu_rstn = &sunxi_data->regs.gpu_rstn;
+	p_gpu_clk_gate = &sunxi_data->regs.gpu_clk_gate;
+	p_poweroff_gating = &sunxi_data->regs.poweroff_gating;
+	p_gpu_pswoff = &sunxi_data->regs.gpu_pswoff;
+	p_pd_stat = &sunxi_data->regs.pd_stat;
+	p_ppu_pw_ctrl = &sunxi_data->regs.ppu_pw_ctrl;
+
+	/* Enable software mode */
+	val = (readl(p_ppu_pw_ctrl->ioaddr) & 0xFFFFFFFC) + 0x1;
+	writel(val, p_ppu_pw_ctrl->ioaddr);
+
+	val = readl(p_pd_stat->ioaddr) & 0x3;
+	if (val == 0) {
+		/************** 3D -> ALLOFF specific handles **************/
+		/* Enable the isolation between domain A and domain B */
+		val = readl(p_poweroff_gating->ioaddr) | 0x2;
+		writel(val, p_poweroff_gating->ioaddr);
+
+		/* Disable domain B */
+		val = readl(p_gpu_pswoff->ioaddr) | 0xFF0000;
+		writel(val, p_gpu_pswoff->ioaddr);
+	}
+
+	/* Assert GPU */
+	writel(0x0, p_gpu_rstn->ioaddr);
+
+	/* Disable GPU clock */
+	writel(0x0, p_gpu_clk_gate->ioaddr);
+
+	/* Enable the isolation between GPU and VDD-SYS */
+	val = readl(p_poweroff_gating->ioaddr) | 0x1;
+	writel(val, p_poweroff_gating->ioaddr);
+
+	/* Disable domain A */
+	val = readl(p_gpu_pswoff->ioaddr) | 0xFF;
+	writel(val, p_gpu_pswoff->ioaddr);
+
+	/* Power domain status: ALLOFF */
+	val = (readl(p_pd_stat->ioaddr) & 0xFFFFFFFC) + 0x2;
+	writel(val, p_pd_stat->ioaddr);
+
+	disable_clks_wrap(sunxi_data->clks);
+}
+
+int sunxi_platform_init(struct device *dev)
+{
+#if defined(CONFIG_OF)
+	struct resource *reg_res;
+	struct platform_device *pdev = to_platform_device(dev);
+#endif /* defined(CONFIG_OF) */
+
+	sunxi_data = (struct sunxi_data *)kzalloc(sizeof(struct sunxi_data), GFP_KERNEL);
+	dev->platform_data = sunxi_data;
+
+#if defined(CONFIG_OF)
+	pdev = to_platform_device(dev);
+
+	reg_res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (reg_res == NULL) {
+		dev_err(dev, "failed to get register data from device tree");
+		return -1;
+	}
+	sunxi_data->reg_base = reg_res->start;
+	sunxi_data->reg_size = reg_res->end - reg_res->start + 1;
+
+	sunxi_data->irq_num = platform_get_irq_byname(pdev, "IRQGPU");
+	if (sunxi_data->irq_num < 0) {
+		dev_err(dev, "failed to get irq number from device tree");
+		return -1;
+	}
+#endif /* defined(CONFIG_OF) */
+
+	if (get_clks_wrap(dev))
+		return -1;
+
+	power_up_gpu_wrap();
+
+	return 0;
+}
+
+void sunxi_platform_term(void)
+{
+	power_down_gpu_wrap();
+
+	put_clks_wrap();
+
+	kfree(sunxi_data);
+
+	sunxi_data = NULL;
+}
\ В конце файла нет новой строки
