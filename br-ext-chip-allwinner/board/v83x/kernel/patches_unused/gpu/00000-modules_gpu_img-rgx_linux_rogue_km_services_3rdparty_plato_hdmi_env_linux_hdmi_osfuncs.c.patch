diff -drupN a/modules/gpu/img-rgx/linux/rogue_km/services/3rdparty/plato_hdmi/env/linux/hdmi_osfuncs.c b/modules/gpu/img-rgx/linux/rogue_km/services/3rdparty/plato_hdmi/env/linux/hdmi_osfuncs.c
--- a/modules/gpu/img-rgx/linux/rogue_km/services/3rdparty/plato_hdmi/env/linux/hdmi_osfuncs.c	1970-01-01 03:00:00.000000000 +0300
+++ b/modules/gpu/img-rgx/linux/rogue_km/services/3rdparty/plato_hdmi/env/linux/hdmi_osfuncs.c	2022-06-12 05:28:14.000000000 +0300
@@ -0,0 +1,251 @@
+
+/*************************************************************************/ /*!
+@Copyright      Copyright (c) Imagination Technologies Ltd. All Rights Reserved
+@License        Dual MIT/GPLv2
+
+The contents of this file are subject to the MIT license as set out below.
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+Alternatively, the contents of this file may be used under the terms of
+the GNU General Public License Version 2 ("GPL") in which case the provisions
+of GPL are applicable instead of those above.
+
+If you wish to allow use of your version of this file only under the terms of
+GPL, and not to allow others to use your version of this file under the terms
+of the MIT license, indicate your decision by deleting the provisions above
+and replace them with the notice and other provisions required by GPL as set
+out in the file called "GPL-COPYING" included in this distribution. If you do
+not delete the provisions above, a recipient may use your version of this file
+under the terms of either the MIT license or GPL.
+
+This License is also included in this distribution in the file called
+"MIT-COPYING".
+
+EXCEPT AS OTHERWISE STATED IN A NEGOTIATED AGREEMENT: (A) THE SOFTWARE IS
+PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
+BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
+PURPOSE AND NONINFRINGEMENT; AND (B) IN NO EVENT SHALL THE AUTHORS OR
+COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+*/ /**************************************************************************/
+
+#if defined(LINUX)
+
+#include <linux/pci.h>
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/kernel.h>
+#include <linux/debugfs.h>
+#include <linux/fs.h>
+#include <linux/uaccess.h>
+#include "dc_osfuncs.h"
+#include "hdmi.h"
+
+/* For MODULE_LICENSE */
+#include "pvrmodule.h"
+
+#define HDMI_DEBUGFS_DISPLAY_ENABLED "display_enabled"
+
+static HDMI_DEVICE	*g_psDeviceData;
+
+/* Callbacks for PDP<->HDMI interface */
+extern PVRSRV_ERROR PDPInitialize(VIDEO_PARAMS * pVideoParams);
+
+/* Helpers for getting DDR/GPU/PLL clock speed */
+extern IMG_UINT32 SysGetPlatoMemClockSpeed(void);
+extern IMG_UINT32 SysGetPlatoCoreClockSpeed(void);
+extern IMG_UINT32 SysGetPlatoPLLClockSpeed(IMG_UINT32 ui32ClockSpeed);
+
+static struct dentry	*g_psDebugFSEntryDir;
+static struct dentry	*g_psHdmiDebugFsEntry;
+
+/* HDMI module parameters */
+HDMI_MODULE_PARAMETERS  sModuleParams =
+{
+	.ui32HDMIEnabled = 1,
+};
+
+module_param_named(mem_en, sModuleParams.ui32HDMIEnabled, uint, S_IRUGO | S_IWUSR);
+
+static int HdmiDebugFsOpen(struct inode *psINode, struct file *psFile)
+{
+	psFile->private_data = psINode->i_private;
+
+	return 0;
+}
+
+static ssize_t HdmiDebugFsRead(struct file *psFile,
+				  char __user *psUserBuffer,
+				  size_t uiCount,
+				  loff_t *puiPosition)
+{
+	IMG_UINT32 ui32HDMIEnabled = *((IMG_UINT32 *)psFile->private_data);
+	loff_t uiPosition = *puiPosition;
+	char pszBuffer[] = "N\n";
+	size_t uiBufferSize = ARRAY_SIZE(pszBuffer);
+	int iErr;
+
+	if (uiPosition < 0)
+	{
+		return -EINVAL;
+	}
+	else if (uiPosition >= uiBufferSize || uiCount == 0)
+	{
+		return 0;
+	}
+
+	if (ui32HDMIEnabled)
+	{
+		pszBuffer[0] = 'Y';
+	}
+
+	if (uiCount > uiBufferSize - uiPosition)
+	{
+		uiCount = uiBufferSize - uiPosition;
+	}
+
+	iErr = copy_to_user(psUserBuffer, &pszBuffer[uiPosition], uiCount);
+	if (iErr)
+	{
+		return -EFAULT;
+	}
+
+	*puiPosition = uiPosition + uiCount;
+
+	return uiCount;
+}
+
+static ssize_t HdmiDebugFsWrite(struct file *psFile,
+				   const char __user *psUserBuffer,
+				   size_t uiCount,
+				   loff_t *puiPosition)
+{
+	IMG_UINT32 *pui32HDMIEnabled = psFile->private_data;
+	char pszBuffer[3];
+	bool bHDMIEnabled;
+	int iErr;
+
+	uiCount = min(uiCount, ARRAY_SIZE(pszBuffer) - 1);
+
+	iErr = copy_from_user(pszBuffer, psUserBuffer, uiCount);
+	if (iErr)
+	{
+		return -EFAULT;
+	}
+
+	pszBuffer[uiCount] = '\0';
+
+	if (strtobool(pszBuffer, &bHDMIEnabled) == 0)
+	{
+		*pui32HDMIEnabled = bHDMIEnabled ? 1 : 0;
+	}
+
+	return uiCount;
+}
+
+static const struct file_operations gsDisplayEnabledFileOps =
+{
+	.owner = THIS_MODULE,
+	.open = HdmiDebugFsOpen,
+	.read = HdmiDebugFsRead,
+	.write = HdmiDebugFsWrite,
+	.llseek = default_llseek,
+};
+
+static int __init hdmi_init(void)
+{
+	struct pci_dev *psPCIDev;
+	PVRSRV_ERROR eError;
+	int error;
+
+	#if !defined(HDMI_CONTROLLER)
+	return 0;
+	#endif
+
+	psPCIDev = pci_get_device(SYS_RGX_DEV_VENDOR_ID, SYS_RGX_DEV_DEVICE_ID, NULL);
+	if (psPCIDev == NULL)
+	{
+		printk(KERN_ERR DRVNAME " - %s : Failed to get PCI device\n", __FUNCTION__);
+		return -ENODEV;
+	}
+
+	error = pci_enable_device(psPCIDev);
+	if (error != 0)
+	{
+		printk(KERN_ERR DRVNAME " - %s: Failed to enable PCI device (%d)\n", __FUNCTION__, error);
+		return -ENODEV;
+	}
+
+	eError = HDMIDrvInit(&psPCIDev->dev, &g_psDeviceData);
+	if (eError != PVRSRV_OK)
+	{
+		printk(KERN_ERR DRVNAME " - %s: Failed to initialise device (%d)\n", __FUNCTION__, eError);
+		return -ENODEV;
+	}
+
+	/* To prevent possible problems with system suspend/resume, we don't
+	   keep the device enabled, but rely on the fact that the Rogue driver
+	   will have done a pci_enable_device. */
+	pci_disable_device(psPCIDev);
+
+	g_psDebugFSEntryDir = debugfs_create_dir(DRVNAME, NULL);
+	if (IS_ERR_OR_NULL(g_psDebugFSEntryDir))
+	{
+		printk(KERN_WARNING DRVNAME " - %s: Failed to create '%s' debugfs root directory "
+		       "(debugfs entries won't be available)\n", __FUNCTION__, DRVNAME);
+		g_psDebugFSEntryDir = NULL;
+	}
+
+	g_psHdmiDebugFsEntry = debugfs_create_file(HDMI_DEBUGFS_DISPLAY_ENABLED,
+						      S_IFREG | S_IRUGO | S_IWUSR,
+						      g_psDebugFSEntryDir,
+						      &sModuleParams.ui32HDMIEnabled,
+						      &gsDisplayEnabledFileOps);
+	if (IS_ERR_OR_NULL(g_psHdmiDebugFsEntry))
+	{
+		printk(KERN_WARNING DRVNAME " - %s: Failed to create '%s' debugfs entry\n",
+		       __FUNCTION__, HDMI_DEBUGFS_DISPLAY_ENABLED);
+		g_psHdmiDebugFsEntry = NULL;
+	}
+
+	g_psDeviceData->pfnPDPInitialize = PDPInitialize;
+
+	g_psDeviceData->ui32CoreClockSpeed = SysGetPlatoCoreClockSpeed();
+	g_psDeviceData->ui32PLLClockSpeed  = SysGetPlatoPLLClockSpeed(g_psDeviceData->ui32CoreClockSpeed);
+
+	return 0;
+}
+
+static void __exit hdmi_deinit(void)
+{
+	if (g_psDeviceData)
+	{
+		if (g_psDebugFSEntryDir)
+		{
+			if (g_psHdmiDebugFsEntry)
+			{
+				debugfs_remove(g_psHdmiDebugFsEntry);
+			}
+
+			debugfs_remove(g_psDebugFSEntryDir);
+		}
+        
+		HDMIDrvDeInit(g_psDeviceData);
+		g_psDeviceData = NULL;
+	}
+}
+
+module_init(hdmi_init);
+module_exit(hdmi_deinit);
+
+#endif /* defined(LINUX) */
