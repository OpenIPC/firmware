diff -drupN a/modules/nand/sun8iw8p1/nfd/boot_head/boot0_op.c b/modules/nand/sun8iw8p1/nfd/boot_head/boot0_op.c
--- a/modules/nand/sun8iw8p1/nfd/boot_head/boot0_op.c	1970-01-01 03:00:00.000000000 +0300
+++ b/modules/nand/sun8iw8p1/nfd/boot_head/boot0_op.c	2022-06-12 05:28:14.000000000 +0300
@@ -0,0 +1,248 @@
+/*
+ * Copyright (c) 2007-2019 Allwinnertech Co., Ltd.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+#include <linux/kernel.h>
+#include <linux/slab.h>
+#include <linux/module.h>
+#include "boot0_v2.h"
+#include "boot1_v2.h"
+
+extern int NAND_Print(const char *fmt, ...);
+#define debug NAND_Print
+
+extern int NAND_GetParam(boot_nand_para_t0 *nand_param);
+extern int NAND_ReadBoot0(unsigned int length, void *buf);
+extern void test_dram_para(void *buffer);
+extern unsigned int NAND_GetValidBlkRatio(void);
+extern int NAND_IS_Secure_sys(void);
+
+/*
+************************************************************************************************************
+*
+*                                             function
+*
+*    name          :
+*
+*    parmeters     :
+*
+*    return        :
+*
+*    note          :
+*
+*
+************************************************************************************************************
+*/
+int gen_check_sum(void *boot_buf)
+{
+	standard_boot_file_head_t *head_p;
+	unsigned int length;
+	unsigned int *buf;
+	unsigned int loop;
+	unsigned int i;
+	unsigned int sum;
+	unsigned int *p;
+	toc0_private_head_t *toc0_head;
+
+	if (!NAND_IS_Secure_sys()) {	/*secure*/
+		toc0_head = (toc0_private_head_t *) boot_buf;
+		length = toc0_head->length;
+		p = &(toc0_head->check_sum);
+	} else {
+		head_p = (standard_boot_file_head_t *) boot_buf;
+		length = head_p->length;
+		p = &(head_p->check_sum);
+	}
+
+	if ((length & 0x3) != 0)	/* must 4-byte-aligned*/
+		return -1;
+	buf = (unsigned int *)boot_buf;
+	*p = STAMP_VALUE;	/* fill stamp*/
+	loop = length >> 2;
+	/* ���㵱ǰ�ļ����ݵġ�У��͡� */
+	for (i = 0, sum = 0; i < loop; i++)
+		sum += buf[i];
+
+	/* write back check sum */
+	*p = sum;
+	return 0;
+}
+
+/*
+************************************************************************************************************
+*
+*                                             function
+*
+*    name          :
+*
+*    parmeters     :
+*
+*    return        :
+*
+*    note          :
+*
+*
+************************************************************************************************************
+*/
+int gen_uboot_check_sum(void *boot_buf)
+{
+	boot_file_head_t *head_p;
+	unsigned int length;
+	unsigned int *buf;
+	unsigned int loop;
+	unsigned int i;
+	unsigned int sum;
+
+	head_p = (boot_file_head_t *) boot_buf;
+	length = head_p->length;
+	if ((length & 0x3) != 0)	/* must 4-byte-aligned*/
+		return -1;
+	buf = (unsigned int *)boot_buf;
+	head_p->check_sum = STAMP_VALUE;	/* fill stamp*/
+	loop = length >> 2;
+	/* ���㵱ǰ�ļ����ݵġ�У��͡� */
+	for (i = 0, sum = 0; i < loop; i++)
+		sum += buf[i];
+
+	/* write back check sum */
+	head_p->check_sum = sum;
+
+	return 0;
+}
+
+/*
+************************************************************************************************************
+*
+*                                             function
+*
+*    name          :
+*
+*    parmeters     :
+*
+*    return        :
+*
+*    note          :
+*
+*
+************************************************************************************************************
+*/
+int get_nand_para(void *boot_buf)
+{
+	boot0_file_head_t *boot0_buf;
+	char *data_buf;
+	boot_nand_para_t0 *nand_para;
+	sbrom_toc0_config_t *secure_toc0_buf;
+
+	if (!NAND_IS_Secure_sys()) {	/*secure*/
+		secure_toc0_buf =
+			(sbrom_toc0_config_t *)(boot_buf + SBROM_TOC0_HEAD_SPACE);
+		data_buf = secure_toc0_buf->storage_data;
+		nand_para = (boot_nand_para_t0 *) data_buf;
+
+	} else {		/*nonsecure*/
+		boot0_buf = (boot0_file_head_t *) boot_buf;
+		data_buf = boot0_buf->prvt_head.storage_data;
+		nand_para = (boot_nand_para_t0 *) data_buf;
+	}
+	NAND_GetParam(nand_para);
+	return 0;
+}
+
+/*
+************************************************************************************************************
+*
+*                                             function
+*
+*    name          :
+*
+*    parmeters     :
+*
+*    return        :
+*
+*    note          :
+*
+*
+************************************************************************************************************
+*/
+int get_dram_para(void *boot_buf)
+{
+	boot0_file_head_t *src_boot0;
+	boot0_file_head_t *dst_boot0;
+	sbrom_toc0_config_t *secure_src_toc0;
+	sbrom_toc0_config_t *secure_dst_toc0;
+	char *buffer = NULL;
+
+	buffer = (char *)kmalloc(32 * 1024, GFP_KERNEL);
+	if (buffer == NULL) {
+		debug("get_dram_para, kmalloc failed!\n");
+		return -1;
+	}
+	memset(buffer, 0, 32 * 1024);
+	if (NAND_ReadBoot0(32 * 1024, buffer)) {
+		debug("get_dram_para, NAND_ReadBoot0() error!\n");
+		goto error;
+	}
+
+	test_dram_para(buffer);
+	if (!NAND_IS_Secure_sys()) {	/*secure*/
+
+		secure_src_toc0 =
+			(sbrom_toc0_config_t *)(buffer + SBROM_TOC0_HEAD_SPACE);
+		secure_dst_toc0 =
+			(sbrom_toc0_config_t *)(boot_buf + SBROM_TOC0_HEAD_SPACE);
+		memcpy(&secure_dst_toc0->dram_para[0],
+		       &secure_src_toc0->dram_para[0], 32 * 4);
+	} else {		/*nonsecure*/
+		src_boot0 = (boot0_file_head_t *) buffer;
+		dst_boot0 = (boot0_file_head_t *) boot_buf;
+		memcpy(&dst_boot0->prvt_head, &src_boot0->prvt_head, 40 * 4);
+	}
+	/*memcpy(dst_boot0->prvt_head.dram_para, src_boot0->prvt_head.dram_para, 32 * 4);*/
+	test_dram_para(boot_buf);
+	kfree(buffer);
+	buffer = NULL;
+	return 0;
+
+error:
+	kfree(buffer);
+	buffer = NULL;
+	return -1;
+}
+
+/*
+************************************************************************************************************
+*
+*                                             function
+*
+*    name          :
+*
+*    parmeters     :
+*
+*    return        :
+*
+*    note          :
+*
+*
+************************************************************************************************************
+*/
+int get_nand_para_for_boot1(void *boot_buf)
+{
+	boot1_file_head_t *boot1_buf;
+	boot_nand_para_t0 *nand_para;
+
+	boot1_buf = (boot1_file_head_t *) boot_buf;
+	nand_para = (boot_nand_para_t0 *) boot1_buf->prvt_head.nand_spare_data;
+
+/*      nand_para->good_block_ratio = NAND_GetValidBlkRatio();*/
+
+	return 0;
+}
