diff -drupN a/drivers/staging/android/ion/ion_carveout_heap.c b/drivers/staging/android/ion/ion_carveout_heap.c
--- a/drivers/staging/android/ion/ion_carveout_heap.c	2018-08-06 17:23:04.000000000 +0300
+++ b/drivers/staging/android/ion/ion_carveout_heap.c	2022-06-12 05:28:14.000000000 +0300
@@ -73,6 +73,7 @@ static int ion_carveout_heap_allocate(st
 	table = kmalloc(sizeof(*table), GFP_KERNEL);
 	if (!table)
 		return -ENOMEM;
+
 	ret = sg_alloc_table(table, 1, GFP_KERNEL);
 	if (ret)
 		goto err_free;
@@ -105,7 +106,7 @@ static void ion_carveout_heap_free(struc
 	ion_heap_buffer_zero(buffer);
 
 	if (ion_buffer_cached(buffer))
-		dma_sync_sg_for_device(NULL, table->sgl, table->nents,
+		dma_sync_sg_for_device(get_ion_dev(), table->sgl, table->nents,
 				       DMA_BIDIRECTIONAL);
 
 	ion_carveout_free(heap, paddr, buffer->size);
@@ -113,14 +114,80 @@ static void ion_carveout_heap_free(struc
 	kfree(table);
 }
 
+
+static int ion_carveout_heap_phys(struct ion_heap *heap,
+				      struct ion_buffer *buffer,
+				      ion_phys_addr_t *addr, size_t *len)
+{
+	struct sg_table *table = buffer->sg_table;
+	struct page *page = sg_page(table->sgl);
+	ion_phys_addr_t paddr = PFN_PHYS(page_to_pfn(page));
+
+	*addr = paddr;
+	*len = buffer->size;
+
+	return 0;
+}
+
 static struct ion_heap_ops carveout_heap_ops = {
 	.allocate = ion_carveout_heap_allocate,
 	.free = ion_carveout_heap_free,
 	.map_user = ion_heap_map_user,
 	.map_kernel = ion_heap_map_kernel,
 	.unmap_kernel = ion_heap_unmap_kernel,
+	.phys = ion_carveout_heap_phys,
 };
 
+static int ion_carveout_debug_show(struct ion_heap *heap,
+			struct seq_file *s, void *para)
+{
+	struct gen_pool *pool = NULL;
+	struct gen_pool_chunk *chunk;
+	int size, total_bits, bits_per_unit;
+	int i, index, offset, tmp, busy;
+	int busy_cnt = 0, free_cnt = 0, total_cnt;
+	unsigned int dump_unit = SZ_64K;
+
+	struct ion_carveout_heap *carveout_heap =
+		container_of(heap, struct ion_carveout_heap, heap);
+
+	pool = carveout_heap->pool;
+
+	rcu_read_lock();
+	list_for_each_entry_rcu(chunk, &pool->chunks, next_chunk) {
+		size = chunk->end_addr - chunk->start_addr;
+		total_bits = size >> pool->min_alloc_order;
+		bits_per_unit = dump_unit >> pool->min_alloc_order;
+		seq_printf(s, " Carveout memory layout(+: free, -: busy, unit: %dKB):\n",
+			dump_unit / 1024);
+		total_cnt = (chunk->end_addr + 1 - chunk->start_addr) / dump_unit;
+		busy_cnt = 0;
+		free_cnt = 0;
+		for (i = 0, tmp = 0, busy = 0; i < total_bits; i++) {
+			index = i >> 5;
+			offset = i & 31;
+			if (!busy && (chunk->bits[index] & (1<<offset)))
+				busy = 1;
+			if (++tmp == bits_per_unit) {
+				busy ? (seq_printf(s, "-"), busy_cnt++) : (seq_printf(s, "+"), free_cnt);
+				busy = 0;
+				tmp = 0;
+			}
+		}
+
+		free_cnt = total_cnt - busy_cnt;
+		seq_printf(s, "\n Carveout area start:0x%lx end:0x%lx\n",
+			chunk->start_addr, chunk->end_addr + 1);
+		seq_printf(s, " Carveout area Total:%uMB Free:%uKB ~= %uMB\n",
+			total_cnt * dump_unit / (1024 * 1024),
+			free_cnt * dump_unit / 1024,
+			free_cnt * dump_unit / (1024 * 1024));
+	}
+	rcu_read_unlock();
+
+	return 0;
+
+}
 struct ion_heap *ion_carveout_heap_create(struct ion_platform_heap *heap_data)
 {
 	struct ion_carveout_heap *carveout_heap;
@@ -153,6 +220,7 @@ struct ion_heap *ion_carveout_heap_creat
 	carveout_heap->heap.ops = &carveout_heap_ops;
 	carveout_heap->heap.type = ION_HEAP_TYPE_CARVEOUT;
 	carveout_heap->heap.flags = ION_HEAP_FLAG_DEFER_FREE;
+	carveout_heap->heap.debug_show = ion_carveout_debug_show;
 
 	return &carveout_heap->heap;
 }
