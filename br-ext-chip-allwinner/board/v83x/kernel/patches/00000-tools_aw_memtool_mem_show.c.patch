diff -drupN a/tools/aw/memtool/mem_show.c b/tools/aw/memtool/mem_show.c
--- a/tools/aw/memtool/mem_show.c	1970-01-01 03:00:00.000000000 +0300
+++ b/tools/aw/memtool/mem_show.c	2022-06-12 05:28:14.000000000 +0300
@@ -0,0 +1,1169 @@
+/*
+ * memtool: show system memory use
+ *
+ * Copyright (c) 2019 Allwinnertech.
+ *
+ * Author: huangshuosheng <huangshuosheng@allwinnertech.com>
+ *
+ * Compile with:
+ * gcc -o memtool mem_show.c
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+#include <errno.h>
+#include <dirent.h>
+
+//#define DEBUG_ON_PC
+#define SAVE_MEM_DETAIL
+#ifdef SAVE_MEM_DETAIL
+FILE *fpp = NULL;
+#endif
+
+#define MEMTOOL_NAME "memtool"
+#define VERSION_INFO "V1.2.3 2019-10-16 hss AW"
+
+unsigned int debug_level = 0;
+#define DEBUG
+#ifdef DEBUG
+#define DBG(fmt...)            	   if (debug_level >= 1) printf(fmt)
+#define WARN(fmt...)      		   if (debug_level >= 0) printf(fmt)
+#define ERROR(fmt...)              if (debug_level >= 0) printf(fmt)
+#endif
+#define debug()            	   printf("%s: %d\n", __func__, __LINE__);
+
+#define ARRAY_SIZE(arr) (sizeof(arr) / sizeof((arr)[0]))
+#define MAX_LINE_LEN     1024
+
+#define DRAM_LIST_MAX 8
+int dram_size_list[DRAM_LIST_MAX] = {64, 128, 256, 512, 1024, 1024*2, 1024*3, 1024*4};
+
+int skip_smaps_error = 0;
+#define MAX_VMALLOC_USER	256
+int vmalloc_user[MAX_VMALLOC_USER]; //use to collect sys_user which alloced in K space
+int sys_user_k_space_total = 0; //the sum of sys_user which alloced in K space
+
+struct mem_info {
+	/* unit: Kb */
+	int mem_size;
+	int kernel_used_size;
+	int mem_free;
+	int mem_available;
+	int kernel_slab_unreclaim;
+	int kernel_stack;;
+	int kernel_pagetables;
+	int kernel_shmem;
+	int kernel_modules;
+	int sys_reserved_size;
+	int ion_reserved_size;
+	int ion_used_size;
+	int app_rss_total;
+	int app_pss_total;
+	int water_min;
+	int water_low;
+	int water_high;
+};
+struct mem_info mem;
+
+struct ion_info {
+	/* unit: Kb */
+	int cma_used;
+	int carveout_used;
+	int sys_user_used;
+	int contig_used;
+	int cma_reserved;
+	int carveout_reserved;
+};
+struct ion_info ion;
+
+struct vma_info {
+	int pid;
+	char name[256];
+	char comm[128];
+	char rwx[32];
+	int rss_size;
+	int pss_size;
+	int shared_num;
+	struct vma_info *next;
+};
+
+struct proc_info {
+	char path[32];
+	int rss;
+	int pss;
+	int pid;
+	char comm[128];
+	char cmdline[256];
+	struct proc_info *next;
+};
+
+int get_dram_size(void)
+{
+	int mem_size, i;
+	int mem_deviation[DRAM_LIST_MAX];
+
+	if (mem.mem_size == 0 && mem.sys_reserved_size == 0
+			&& ion.carveout_reserved == 0) {
+			ERROR("%s: Must run after read_proc_meminfo &\
+				  \nread_sys_ion_vmstat & read_resreved_mem!\n", __func__);
+			return -1;
+	}
+
+	mem_size = (mem.mem_size + mem.sys_reserved_size +
+			   ion.carveout_reserved * 1024) / 1024;
+	DBG("mem_size = %d\n", mem_size);
+
+	for (i = 0; i < DRAM_LIST_MAX; i++) {
+		if (mem_size == dram_size_list[i]) {
+			DBG("dram size is %dMb\n", dram_size_list[i]);
+			return dram_size_list[i];
+		}
+		mem_deviation[i] = abs(mem_size - dram_size_list[i]);
+		DBG("mem_deviation[%d] = %d\n", i, mem_deviation[i]);
+	}
+
+	int min_deviation = mem_deviation[0], min_index = 0;
+	for (i = 0; i < DRAM_LIST_MAX; i++) {
+		if (mem_deviation[i] < min_deviation) {
+			min_deviation = mem_deviation[i];
+			min_index = i;
+		}
+	}
+	DBG("min_deviation = %d, min_index = %d\n", min_deviation, min_index);
+	DBG("dram_size is %dMb\n", dram_size_list[min_index]);
+
+	return dram_size_list[min_index];
+}
+
+int read_proc_meminfo(void)
+{
+	char *meminfo_sys = NULL;
+	char buf[100];
+	char temp[38];
+	int tmp_value;
+	int i = 0;
+
+	const char *mem_info[7] = {
+		"MemTotal",
+		"MemFree",
+		"MemAvailable",
+		"Shmem",
+		"SUnreclaim",
+		"KernelStack",
+		"PageTables",
+	};
+
+#ifdef DEBUG_ON_PC
+	meminfo_sys = "./mem_source/meminfo";
+#else
+	meminfo_sys = "/proc/meminfo";
+#endif
+	FILE *file = fopen(meminfo_sys, "r");
+	if (!file) {
+		ERROR("Could not open %s .\n", meminfo_sys);
+		goto fail;
+	}
+	fseek(file, 0, SEEK_SET);
+	while (fgets(buf, 100, file) != NULL) {
+		for (i = 0; i < ARRAY_SIZE(mem_info); i++) {
+			if (!strncmp(buf, mem_info[i], strlen(mem_info[i]))) {
+				if (sscanf(buf+strlen(mem_info[i])+1, "%d %s", &tmp_value, temp) < 0) {
+					ERROR("buf %s get value fail! \n", buf);
+					fclose(file);
+					goto fail;
+				}
+				DBG("%s %d %s\n", mem_info[i], tmp_value, temp);
+				mem.kernel_used_size += tmp_value;
+				if (!strcmp(mem_info[i], "MemTotal"))
+					mem.mem_size = tmp_value;
+				else if (!strcmp(mem_info[i], "MemFree"))
+					mem.mem_free = tmp_value;
+				else if (!strcmp(mem_info[i], "MemAvailable"))
+					mem.mem_available = tmp_value;
+				else if (!strcmp(mem_info[i], "Shmem"))
+					mem.kernel_shmem = tmp_value;
+				else if (!strcmp(mem_info[i], "SUnreclaim"))
+					mem.kernel_slab_unreclaim = tmp_value;
+				else if (!strcmp(mem_info[i], "KernelStack"))
+					mem.kernel_stack = tmp_value;
+				else if (!strcmp(mem_info[i], "PageTables"))
+					mem.kernel_pagetables = tmp_value;
+#ifdef SAVE_MEM_DETAIL
+				fprintf(fpp, "%s", buf);
+#endif
+				break;
+			}
+		}
+	}
+
+#ifdef SAVE_MEM_DETAIL
+	fprintf(fpp, "\n");
+#endif
+	fseek(file, 0, SEEK_SET);
+	mem.kernel_used_size -= mem.mem_size;
+	mem.kernel_used_size -= mem.mem_free;
+	mem.kernel_used_size -= mem.mem_available;
+
+	fclose(file);
+
+	return 0;
+fail:
+	return -1;
+}
+
+int read_system_info(char *des_buf)
+{
+	FILE *file;
+	char buf[68];
+	char head[32];
+	char item[32];
+	char *platform_src = "sunxi_platform";
+
+	if (!des_buf)
+		return -1;
+
+#ifdef DEBUG_ON_PC
+	char *sys_patch = "./mem_source/sys_info";
+#else
+	char *sys_patch = "/sys/class/sunxi_info/sys_info";
+#endif
+	file = fopen(sys_patch, "r");
+	if (!file) {
+		//DBG("Could not open %s .\n", sys_patch);
+		return -1;
+	}
+
+	fseek(file, 0, SEEK_SET);
+	while (fgets(buf, 68, file) != NULL) {
+		if (!strncmp(buf, platform_src, strlen(platform_src))) {
+			if (sscanf(buf, "%s : %s", head, item) < 0) {
+				fclose(file);
+				return -1;
+			}
+			strncpy(des_buf, item, strlen(item));
+			des_buf[strlen(item)] = '\0';
+		}
+	}
+	fclose(file);
+	return 0;
+}
+
+int read_proc_version(void)
+{
+	FILE *fd;
+	int version_major;
+	int version_minor;
+	int version_extern;
+	char line[1024];
+
+#ifdef DEBUG_ON_PC
+	fd = fopen("/proc/version", "r");
+#else
+	fd = fopen("/proc/version", "r");
+#endif
+	if (!fd)
+		return -1;
+
+	while (fgets(line, 1024, fd)) {
+		if (!strncmp(line, "Linux version", strlen("Linux version"))) {
+			sscanf(line, "%*s %*s %d.%d.%d", &version_major,
+						&version_minor, &version_extern);
+			//DBG("%s version %d.%d.%d\n", __func__, version_major,
+			//			version_minor, version_extern);
+		}
+	}
+	fclose(fd);
+	if (version_major > 3)
+		version_minor = 10;
+
+	return version_minor;
+}
+
+int read_ion_info(void)
+{
+	FILE *file;
+	char tmp_buf[128];
+	char buf[MAX_LINE_LEN];
+	char head[MAX_LINE_LEN];
+	int item = 0;
+	int i = 0;
+	char *strr = NULL;
+	char *stat_path = NULL;
+	char *stat_note[5] = { NULL };
+	int stat_record[5] = {0, 0, 0, 0, 0};
+	int reserved_size = 0;
+	int size = 0, index = 0;
+
+#ifdef DEBUG_ON_PC
+	stat_path = "./mem_source/";
+#else
+	stat_path = "/sys/kernel/debug/ion/heaps";
+#endif
+	stat_note[0] = "cma";
+	stat_note[1] = "carveout";
+	stat_note[2] = "sys_user";
+	stat_note[3] = "sys_contig";
+	stat_note[4] = NULL;
+
+	for (i = 0; stat_note[i] != NULL; i++) {
+		memset(tmp_buf, 0, sizeof(tmp_buf));
+		snprintf(tmp_buf, sizeof(tmp_buf), "%s/%s", stat_path, stat_note[i]);
+		file = fopen(tmp_buf, "r");
+		if (!file) {
+			//ERROR("Could not open %s .\n", tmp_buf);
+			continue;
+		}
+
+#ifdef SAVE_MEM_DETAIL
+		fprintf(fpp, "\n");
+#endif
+		fseek(file, 0, SEEK_SET);
+		while (fgets(buf, MAX_LINE_LEN, file) != NULL) {
+#ifdef SAVE_MEM_DETAIL
+				fprintf(fpp, "%s", buf);
+#endif
+			strr = strstr(buf, "total ");
+			if (strr) {
+				if (strstr(buf, "orphaned"))
+					continue;
+
+				if (sscanf(buf, "%s %d", head, &item) < 0)
+					stat_record[i] = 0;
+				else
+					stat_record[i] = item;
+
+				mem.ion_used_size += stat_record[i];
+				break;
+			}
+
+			//#1: sys_user which alloced in kernel space will be added in vmalocinfo as section "user"
+			//#2: sys_user which alloced in user space will not accur in vmalocinfo
+			//so, we should not count it(#1) tiwce
+			if (i == 2) {  // sys_user heap
+				if (sscanf(buf, "%*s %*d %d", &size) < 0)
+					size = 0;
+				if (size == 0)
+					continue;
+				for (index = 0; index < MAX_VMALLOC_USER; index++) {
+					if (vmalloc_user[index] != 0) {
+						if (size == (vmalloc_user[index] - 4096))
+							sys_user_k_space_total += size;
+					} else
+						break;
+				}
+				size = 0;
+			}
+		}
+
+		while (fgets(buf, MAX_LINE_LEN, file) != NULL) {
+#ifdef SAVE_MEM_DETAIL
+		fprintf(fpp, "%s", buf);
+#endif
+		}
+		//Cma area Total:4MB Free:2080KB ~= 2MB
+		if ((sscanf(buf, "%*s%*s%*6s%d", &reserved_size) == 1)) {
+			DBG("reserved size = %d\n", reserved_size);
+			if (!strcmp(stat_note[i], "cma")) {
+				ion.cma_reserved = reserved_size;
+			} else if (!strcmp(stat_note[i], "carveout")) {
+				ion.carveout_reserved = reserved_size;
+			}
+			mem.ion_reserved_size += reserved_size;
+		}
+		fclose(file);
+	}
+
+	ion.cma_used = stat_record[0]/1024;
+	ion.carveout_used = stat_record[1]/1024;
+	ion.sys_user_used = (stat_record[2] - sys_user_k_space_total)/1024;
+	ion.contig_used = stat_record[3]/1024;
+
+	DBG("cma reserved %d Mb, carveout reserved %d Mb\n",
+		  ion.cma_reserved, ion.carveout_reserved);
+
+	DBG("read_ion_info cma %d carveout %d  system %d  contig%d (Kb)\n",
+		ion.cma_used, ion.carveout_used, ion.sys_user_used, ion.contig_used);
+	return 0;
+}
+
+int read_proc_vmallocinfo(void)
+{
+    char buf[1024];
+	char *vmallocinfo_sys = NULL;
+    int size, vmalloc_allocated_size = 0;
+    // Ignored tags that don't actually consume memory (ie remappings)
+    static const char * const ignored_tags[] = {
+		"ioremap",
+		"map_lowmem",
+		"vm_map_ram",
+		"vmap",
+		NULL
+    };
+	int index = 0;
+
+#ifdef DEBUG_ON_PC
+	vmallocinfo_sys = "./mem_source/vmallocinfo";
+#else
+	vmallocinfo_sys = "/proc/vmallocinfo";
+#endif
+	FILE *file = fopen(vmallocinfo_sys, "r");
+
+	if (!file) {
+		ERROR("Could not open %s .\n", vmallocinfo_sys);
+		goto fail;
+	}
+
+	fseek(file, 0, SEEK_SET);
+	while (fgets(buf, 1024, file) != NULL) {
+		int valid_line = 1;
+		int i = 0;
+		while (ignored_tags[i]) {
+			if (strstr(buf, ignored_tags[i]) != NULL) {
+				valid_line = 0;
+				break;
+			}
+			i++;
+		}
+		if (valid_line && (sscanf(buf, "%*x-%*x %d", &size) == 1)) {
+			vmalloc_allocated_size += size;
+#ifdef SAVE_MEM_DETAIL
+			fprintf(fpp, "%s", buf);
+#endif
+		}
+		//collect "user" section
+		if (strstr(buf, "user") != NULL) {
+			vmalloc_user[index] = size;
+			index++;
+		}
+
+	}
+#ifdef SAVE_MEM_DETAIL
+	fprintf(fpp, "\n");
+#endif
+	mem.kernel_modules = vmalloc_allocated_size/1024;
+	mem.kernel_used_size += mem.kernel_modules;
+	DBG("vmalloc size = %d\n", mem.kernel_modules);
+
+	fclose(file);
+    return vmalloc_allocated_size;
+fail:
+	return -1;
+}
+
+int read_reserved_mem(void)
+{
+	char buf[1024];
+	char *reserved_sys = NULL;
+	int size = 0;
+	long start_addr = 0;
+
+#ifdef DEBUG_ON_PC
+	reserved_sys = "./mem_source/reserved";
+#else
+	reserved_sys = "/sys/kernel/debug/memblock/reserved";
+#endif
+	FILE *file = fopen(reserved_sys, "r");
+	if (!file) {
+		ERROR("Could not open %s .\n", reserved_sys);
+		goto fail;
+	}
+
+#ifdef SAVE_MEM_DETAIL
+	fprintf(fpp, "\n");
+#endif
+	fseek(file, 0, SEEK_SET);
+	while (fgets(buf, 1024, file) != NULL) {
+		//0: 0x40004000..0x40007fff, size:16K
+		if ((sscanf(buf, "%*d:%x", &start_addr) == 1)) {
+			if (start_addr < 0x40000000)
+				continue;
+		}
+		if ((sscanf(buf, "%*d:%*x..%*x,%*5s%d", &size) == 1)) {
+			mem.sys_reserved_size += size;
+		}
+#ifdef SAVE_MEM_DETAIL
+		fprintf(fpp, "%s", buf);
+#endif
+	}
+	mem.sys_reserved_size -= (ion.cma_reserved + ion.carveout_reserved) * 1024;
+	DBG("reserved size = %d Kb\n", mem.sys_reserved_size);
+
+	fclose(file);
+    return mem.sys_reserved_size;
+fail:
+	return -1;
+}
+
+int read_watermark(void)
+{
+	char buf[1024];
+	char *zoneinfo_sys = NULL;
+	int value = 0;
+	char mark[16];
+	int i = 0;
+	const char *water_level[3] = {
+		"min",
+		"low",
+		"high",
+	};
+
+	zoneinfo_sys = "/proc/zoneinfo";
+
+	FILE *file = fopen(zoneinfo_sys, "r");
+	if (!file) {
+		ERROR("Could not open %s .\n", zoneinfo_sys);
+		goto fail;
+	}
+
+	fseek(file, 0, SEEK_SET);
+	while (fgets(buf, 1024, file) != NULL) {
+		/*
+		 *  min   512
+		 *  low   640
+		 *  high  768
+		 * */
+		sscanf(buf, "%s", &mark);
+		for (i = 0; i < ARRAY_SIZE(water_level); i++) {
+			if (!strncmp(water_level[i], mark, strlen(mark))) {
+				sscanf(buf, "%*s %d", &value);
+				if (i == 0)
+					mem.water_min = value;
+				else if (i == 1)
+					mem.water_low = value;
+				else if (i == 2)
+					mem.water_high = value;
+			}
+		}
+	}
+	DBG("min %d, low %d, high %d\n", mem.water_min, mem.water_low, mem.water_high);
+
+
+	fclose(file);
+    return 0;
+fail:
+	return -1;
+}
+char *output_list[] = {"/tmp", "/mnt", "/mnt/extsd", "/data"};
+char output_meminfo[256];
+char output_procinfo[256];
+
+int setup_output_file(void)
+{
+	int ret = 0;
+	int i;
+	char command[512];
+	char output_kmem[256];
+
+	for (i = 0; i < ARRAY_SIZE(output_list); i++) {
+		sprintf(output_meminfo, "%s/%s", output_list[i], "mem_info");
+		sprintf(output_procinfo, "%s/%s", output_meminfo, "proc_info");
+		/*clean output file*/
+		sprintf(command, "rm %s -rf", output_meminfo);
+		system(command);
+		memset(command, 0, 512);
+		/*create output dir*/
+		sprintf(command, "mkdir %s -p", output_procinfo);
+		ret = system(command);
+		if (ret != 0)
+			continue;
+		/*create kmemdetail file for kernel space meminfo*/
+		sprintf(output_kmem, "%s/kmemdetail", output_meminfo);
+		fpp = fopen(output_kmem, "arw+");
+		break;
+	}
+
+	return 0;
+}
+
+void mem_debug_init(void)
+{
+#ifdef SAVE_MEM_DETAIL
+#ifdef DEBUG_ON_PC
+	system("rm ./memdetail > /dev/null 2>&1");
+	fpp = fopen("./memdetail", "arw+");
+	system("rm ./proc_info -rf > /dev/null 2>&1");
+	system("mkdir ./proc_info");
+#else
+	system("mount -t debugfs none /sys/kernel/debug > /dev/null 2>&1");
+	setup_output_file();
+#endif
+	fprintf(fpp, "-----***** Kernel BSP mem detail *****-----\n\n");
+#endif
+}
+
+int get_rss_size(char *path)
+{
+	char proc_status[128];
+	FILE *file = NULL;
+	char *str = NULL;
+	char buf[1024];
+	int rss = 0;
+
+	sprintf(proc_status, "%s/%s", path, "status");
+	file = fopen(proc_status, "r");
+	if (!file) {
+		ERROR("Could not open %s .\n", proc_status);
+		goto fail;
+	}
+
+	fseek(file, 0, SEEK_SET);
+	while (fgets(buf, 1024, file) != NULL) {
+		/*VmRSS:	   12812 kB*/
+		str = strstr(buf, "VmRSS");
+		if (str) {
+			//DBG("buf = %s\n", buf);
+			if (sscanf(buf, "%*s%d", &rss) == 1) {
+				//DBG("rss = %d\n", rss);
+				return rss;
+			}
+		}
+	}
+
+	fclose(file);
+	return rss;
+fail:
+	return 0;
+}
+
+int get_pss_size(char *path)
+{
+	char proc_smaps[128];
+	FILE *file = NULL;
+	char *str = NULL;
+	char buf[1024];
+	int tmp = 0, pss = 0;
+
+	sprintf(proc_smaps, "%s/%s", path, "smaps");
+	file = fopen(proc_smaps, "r");
+	if (!file) {
+		if (skip_smaps_error != 1) {
+			ERROR("\nCould not open %s, it doesn't exist!\n", proc_smaps);
+			ERROR("Please enable CONFIG_PROC_PAGE_MONITOR, if you want more infomation about user app!\n");
+		}
+		skip_smaps_error = 1;
+		goto fail;
+	}
+
+	fseek(file, 0, SEEK_SET);
+	while (fgets(buf, 1024, file) != NULL) {
+		/*Pss:	       16 kB*/
+		str = strstr(buf, "Pss");
+		if (str) {
+			if (sscanf(buf, "%*s%d", &tmp) == 1) {
+				pss += tmp;
+				//DBG("tmp = %d, rss = %d\n", tmp, pss);
+			}
+		}
+	}
+
+	fclose(file);
+	return pss;
+fail:
+	return 0;
+}
+
+
+int get_proc_comm(char *path, char *comm_name)
+{
+	char proc_comm[128];
+	FILE *file = NULL;
+	char buf[1024];
+
+	sprintf(proc_comm, "%s/%s", path, "comm");
+	file = fopen(proc_comm, "r");
+	if (!file) {
+		ERROR("Could not open %s .\n", proc_comm);
+		goto fail;
+	}
+
+	fseek(file, 0, SEEK_SET);
+	while (fgets(buf, 1024, file) != NULL) {
+		sscanf(buf, "%s", comm_name);
+		//DBG("%s: comm = %s\n", __func__, comm_name);
+	}
+
+	fclose(file);
+	return 1;
+fail:
+	return -1;
+}
+
+int get_proc_cmdline(char *path, char *cmdline)
+{
+	char proc_cmdline[128];
+	FILE *file = NULL;
+	char buf[1024];
+
+	sprintf(proc_cmdline, "%s/%s", path, "cmdline");
+	file = fopen(proc_cmdline, "r");
+	if (!file) {
+		ERROR("Could not open %s .\n", proc_cmdline);
+		goto fail;
+	}
+
+	fseek(file, 0, SEEK_SET);
+	while (fgets(buf, 1024, file) != NULL) {
+		sscanf(buf, "%s", cmdline);
+		//DBG("%s: cmdline = %s\n", __func__, comm_name);
+	}
+
+	fclose(file);
+	return 1;
+fail:
+	return -1;
+}
+
+/*
+ *	mode:	1-->save msg to output file;
+ *		0-->print msg to console;
+ * */
+int get_app_mem_info(char *path, int pid, char *comm, int *rss, int *pss, int mode)
+{
+	FILE *fp = NULL;
+	FILE *fp_info = NULL;
+	char line1[1024];
+	char line2[1024];
+	char line3[1024];
+	int rss_total = 0, pss_total = 0;
+	char proc_smaps[256];
+	char info_file[256];
+	int pid2, num;
+	char rwx[256];
+	char file[256];
+	char comm2[256];
+	void *free_p;
+	int pss_size = 0;
+
+	struct vma_info *info_head = (struct vma_info *)malloc(sizeof(struct vma_info));
+	memset(info_head, 0, sizeof(struct vma_info));
+	info_head->next = NULL;
+	struct vma_info *info_p = info_head;
+
+	sprintf(proc_smaps, "%s/%s", path, "smaps");
+	fp = fopen(proc_smaps, "rb");
+	if (NULL == fp) {
+		if (skip_smaps_error != 1) {
+			printf("open ./smaps file fail, or smaps doesn't exist!\n");
+		}
+		return -1;
+	}
+
+#ifdef DEBUG_ON_PC
+	sprintf(info_file, "%s/%d_%s", "./proc_info", pid, comm);
+#else
+	sprintf(info_file, "%s/%d_%s", output_procinfo, pid, comm);
+#endif
+	if (mode == 1) {
+		fp_info = fopen(info_file, "w+");
+		if (NULL == fp_info) {
+			printf("open %s file fail!\n", info_file);
+			fclose(fp);
+			free(info_head);
+			return -1;
+		}
+	}
+
+	while (!feof(fp)) {
+		fgets(line1, 1024, fp);
+		if (strlen(line1) == 0) {
+			break;
+		}
+
+		fgets(line2, 1024, fp);
+		if (strlen(line2) == 0) {
+			break;
+		}
+
+		if (!strncmp(line2, "Name:", 5) | !strncmp(line2, "Size:", 5)) {
+			fgets(line2, 1024, fp);
+		} else {
+			goto nextline;
+		}
+
+		if (strncmp(line2, "Rss:", 4)) {
+			goto nextline;
+		}
+
+		fgets(line3, 1024, fp);
+		if (strlen(line3) == 0) {
+			break;
+		}
+
+		DBG("%d: line1 = %s", __LINE__, line1);
+		DBG("%d: line2 = %s", __LINE__, line2);
+		DBG("%d: line3 = %s", __LINE__, line3);
+
+		pss_size = 0;
+		if (!strncmp(line3, "Pss", 3)) {
+			sscanf(line3, "%*s %d", &pss_size);
+		}
+		if (pss_size == 0)
+			goto nextline;
+
+		/*skip anon_inode:dmabuf for sun8iw19p1*/
+		sscanf(line1, "%*s %*s %*d %*s %*d %*2s%*d:%*s %*s %s", file);
+		if (!strcmp(file, "anon_inode:dmabuf")) {
+			goto nextline;
+		}
+
+		if (NULL == info_head->next) {
+			info_p = info_head;
+			info_head->next = (struct vma_info *)malloc(sizeof(struct vma_info));
+			memset(info_head->next, 0, sizeof(struct vma_info));
+		} else {
+			info_p->next = (struct vma_info *)malloc(sizeof(struct vma_info));
+			memset(info_p->next, 0, sizeof(struct vma_info));
+			info_p = info_p->next;
+		}
+
+
+		/*
+		 * 00010000-00277000 r-xp 00000000 1f:02 617 a:762:sdvcam 27:762-936-921 /usr/bin/sdvcam
+		 * */
+		sscanf(line1, "%*s %s", rwx);
+		sscanf(line1, "%*s %*s %*s %*s %*s %*2s%d", &pid2);
+		sscanf(line1, "%*s %*s %*d %*s %*d %*2s%*d:%s]", comm2);
+		sscanf(line1, "%*s %*s %*d %*s %*d %*2s%*d:%*s %d", &num);
+		sscanf(line1, "%*s %*s %*d %*s %*d %*2s%*d:%*s %*s %s", file);
+		info_p->pid = pid2;
+		strcpy(info_p->rwx, rwx);
+		strcpy(info_p->comm, comm2);
+		strcpy(info_p->name, file);
+		info_p->shared_num = num;
+
+
+		/* rss & pss*/
+		sscanf(line2, "%*s %d", &(info_p->rss_size));
+		info_p->pss_size = pss_size;
+		rss_total += info_p->rss_size;
+		pss_total += info_p->pss_size;
+		DBG("pid %d, comm %s, rss %d, pss %d, rwx %s, num %d, file %s\n",
+			info_p->pid, info_p->comm, info_p->rss_size, info_p->pss_size, info_p->rwx, info_p->shared_num, info_p->name);
+
+nextline:
+		memset(line1, 0, 1024);
+		memset(line2, 0, 1024);
+		memset(line3, 0, 1024);
+		memset(file, 0, 256);
+	}
+	*rss = rss_total;
+	*pss = pss_total;
+
+	if (mode == 1) {
+		fprintf(fp_info, "%s", "\n//******************************smaps info summary(Physical Memory Uesd)*********************************//\n");
+		fprintf(fp_info, "                               Total Rss: %dKb    Total Pss: %d Kb\n\n", rss_total, pss_total);
+		fprintf(fp_info, "%s", "Detail message of every single VMA:\n\n");
+		info_p = info_head;
+		for (; info_p != NULL; info_p = info_p->next) {
+			fprintf(fp_info, "allocator(%-26s %6d)  %s  Rss[%6d Kb]  Pss[%6d Kb]  shared_num(%3d)  file(%s)\n",
+					info_p->comm, info_p->pid, info_p->rwx, info_p->rss_size, info_p->pss_size, info_p->shared_num, info_p->name);
+		}
+	} else{
+		printf("%s", "\n//******************************smaps info summary(Physical Memory Uesd)*********************************//\n");
+		printf("                               Total Rss: %dKb    Total Pss: %d Kb\n\n", rss_total, pss_total);
+		printf("%s", "Detail message of every single VMA:\n\n");
+		info_p = info_head;
+		for (; info_p != NULL; info_p = info_p->next) {
+			printf("allocator(%-26s %6d)  %s  Rss[%6d Kb]  Pss[%6d Kb]  shared_num(%3d)  file(%s)\n",
+					info_p->comm, info_p->pid, info_p->rwx, info_p->rss_size, info_p->pss_size, info_p->shared_num, info_p->name);
+		}
+	}
+
+	/*free source*/
+	info_p = info_head;
+	for (; info_p != NULL; ) {
+		free_p = info_p;
+		info_p = info_p->next;
+		free(free_p);
+		free_p = NULL;
+	}
+
+	fclose(fp);
+	if (mode == 1)
+		fclose(fp_info);
+
+	return 0;
+}
+
+int read_one_app_mem(int pid)
+{
+	char *proc_sys = NULL;
+	char tmp[128];
+	int getone = 0;
+
+#ifdef DEBUG_ON_PC
+	proc_sys = "./mem_source/proc_32bit";
+#else
+	proc_sys = "/proc";
+#endif
+
+	struct proc_info *proc_p = (struct proc_info *)malloc(sizeof(struct proc_info));
+	memset(proc_p, 0, sizeof(struct proc_info));
+
+	DIR *proc_dir = NULL;
+	struct dirent *proc_d = NULL;
+
+	proc_dir = opendir(proc_sys);;
+	if (!proc_dir) {
+		ERROR("Could not open %s .\n", proc_sys);
+		goto fail;
+	}
+
+	while ((proc_d = readdir(proc_dir)) != NULL) {
+		/*get /proc/pid*/
+		if (atoi(proc_d->d_name) == pid) {
+			getone = 1;
+			sprintf(tmp, "%s/%s", proc_sys, proc_d->d_name);
+			strcpy(proc_p->path, tmp);
+			proc_p->rss = get_rss_size(proc_p->path);
+			proc_p->pid = pid;
+			get_proc_comm(proc_p->path, proc_p->comm);
+			if (proc_p->rss != 0)
+				get_app_mem_info(proc_p->path, proc_p->pid, proc_p->comm, &(proc_p->rss), &(proc_p->pss), 0);
+			DBG("path %s, rss %d, pss %d, pid %d, comm %s\n",
+				proc_p->path, proc_p->rss, proc_p->pss, proc_p->pid, proc_p->comm);
+		}
+	}
+
+	if (getone == 0) {
+		ERROR("process(pid:%d) dose not exist!\n", pid);
+		return -1;
+	}
+
+	/*free source*/
+	free(proc_p);
+	proc_p = NULL;
+
+	return 0;
+fail:
+	return -1;
+}
+
+int read_all_app_mem(void)
+{
+	char *proc_sys = NULL;
+	int rss = 0, rss_sum = 0, pss_sum = 0;
+	char tmp[128];
+	char comm[256];
+	void *free_p;
+
+#ifdef DEBUG_ON_PC
+	proc_sys = "./mem_source/proc_32bit";
+#else
+	proc_sys = "/proc";
+#endif
+
+	struct proc_info *proc_head = (struct proc_info *)malloc(sizeof(struct proc_info));
+	memset(proc_head, 0, sizeof(struct proc_info));
+	proc_head->next = NULL;
+	struct proc_info *proc_p = proc_head;
+
+	DIR *proc_dir = NULL;
+	struct dirent *proc_d = NULL;
+
+	proc_dir = opendir(proc_sys);;
+	if (!proc_dir) {
+		ERROR("Could not open %s .\n", proc_sys);
+		goto fail;
+	}
+
+	while ((proc_d = readdir(proc_dir)) != NULL) {
+		/*get /proc/pid*/
+		if (atoi(proc_d->d_name) != 0) {
+			sprintf(tmp, "%s/%s", proc_sys, proc_d->d_name);
+			rss = get_rss_size(tmp);
+			if (rss != 0) {
+				get_proc_comm(tmp, comm);
+				/*do not include current porcess*/
+				if (!strcmp(comm, MEMTOOL_NAME))
+					continue;
+				if (NULL == proc_head->next) {
+					proc_p = proc_head;
+					proc_head->next = (struct proc_info *)malloc(sizeof(struct proc_info));
+					memset(proc_head->next, 0, sizeof(struct proc_info));
+				} else {
+					proc_p->next = (struct proc_info *)malloc(sizeof(struct proc_info));
+					memset(proc_p->next, 0, sizeof(struct proc_info));
+					proc_p = proc_p->next;
+				}
+
+				strcpy(proc_p->path, tmp);
+				proc_p->pid = atoi(proc_d->d_name);
+				get_proc_comm(proc_p->path, proc_p->comm);
+				get_proc_cmdline(proc_p->path, proc_p->cmdline);
+				get_app_mem_info(proc_p->path, proc_p->pid, proc_p->comm, &(proc_p->rss), &(proc_p->pss), 1);
+				DBG("path %s, rss %d, pss %d, pid %d, comm %s\n",
+					proc_p->path, proc_p->rss, proc_p->pss, proc_p->pid, proc_p->comm);
+			}
+		}
+	}
+
+	proc_p = proc_head;
+	printf("\n-----*****Mem Used Info For User Space*****-----\n\n");
+	printf("Pid        Rss(Kb)    Pss(Kb)    Process\n");
+	for (; proc_p != NULL; proc_p = proc_p->next) {
+		printf("%-6d     %-6d     %-6d     %s\n", proc_p->pid, proc_p->rss, proc_p->pss, proc_p->cmdline);
+		rss_sum += proc_p->rss;
+		pss_sum += proc_p->pss;
+	}
+	printf("Rss total: %.2f Mb , Pss total: %.2f Mb\n\n", (float)rss_sum/1024, (float)pss_sum/1024);
+	mem.app_rss_total = rss_sum;
+	mem.app_pss_total = pss_sum;
+
+	/*free source*/
+	proc_p = proc_head;
+	for (; proc_p != NULL; ) {
+		free_p = proc_p;
+		proc_p = proc_p->next;
+		free(free_p);
+		free_p = NULL;
+	}
+
+    return 1;
+fail:
+	return -1;
+}
+
+int read_bsp_kernel_mem(void)
+{
+	int dram_size = 0;
+
+	read_proc_meminfo();
+	read_proc_vmallocinfo();
+	read_ion_info();
+	read_reserved_mem();
+	read_watermark();
+	dram_size = get_dram_size();
+	printf("\n-----*****Mem Used Info For Kernel Space*****-----\n\n");
+	printf("Kernel used       : %6.2f Mb\n", (float)mem.kernel_used_size/1024);
+	printf("Kernel reserved   : %6.2f Mb\n", (float)mem.sys_reserved_size/1024);
+	printf("Kernel used total : %6.2f Mb\n",
+			(float)mem.kernel_used_size/1024 + (float)mem.sys_reserved_size/1024);
+
+	printf("\n");
+	printf("Kernel used    = kernel_slab_unrecalim(%.2fMb) + kernel_stack(%.2fMb) + \n",
+			(float)mem.kernel_slab_unreclaim/1024, (float)mem.kernel_stack/1024);
+	printf("                 kernel_pagetables(%.2fMb) + kernel_shmem(%.2fMb) + kernel_modules(%.2fMb)\n",
+			(float)mem.kernel_pagetables/1024, (float)mem.kernel_shmem/1024, (float)mem.kernel_modules/1024);
+	printf("Kernel_modules = load_module + cma_alloc(U space) + dma_alloc(K space) + sys_user(K space %.2fMb)\n",
+		   (float)sys_user_k_space_total/1024/1024);
+
+	/*
+	 * use cma: kernel modules include cma alloc
+	 *			Kernel_modules = ion_mem + load_module + dma_alloc
+	 *			mem used total = kernel used + pss total
+	 *
+	 * use carveout: kernel modules not include carveout alloc
+	 *			Kernel_modules = load_module + dma_alloc
+	 *			Or
+	 *			Kernel_modules = cma alloc(if cma exist and used) + load_module + dma_alloc
+	 *			mem used total = kernel used + pss total + carveout used
+	 *
+	 * use iommu: kernel modules not include carveout alloc
+	 *			Kernel_modules = cma alloc(if cma exist and used) + load_module + dma_alloc
+	 *			mem used total = kernel used + pss total + iommu used
+	 * */
+
+	printf("ion(U space)   : cma(%.2fMb), sys_user(%.2f Mb), carveout(%.2f Mb)\n",
+		(float)ion.cma_used/1024, (float)ion.sys_user_used/1024, (float)ion.carveout_used/1024);
+
+	return 0;
+}
+
+int mem_used_summary(void)
+{
+	int mem_used_total = 0;
+
+	mem_used_total = mem.kernel_used_size + mem.sys_reserved_size + mem.app_pss_total
+		+ ion.sys_user_used + ion.carveout_used;
+	printf("Mem      Total = %d Mb   (Free %.2f Mb, Available %.2f Mb)\n", get_dram_size(),
+		   (float)mem.mem_free/1024, (float)mem.mem_available/1024);
+	printf("Mem Used Total = %.2f Mb\n", (float)mem_used_total/1024);
+	printf("Mem Used Total = Kernel used total(%.2fMb) + pss total(%.2fMb) + \n",
+			(float)(mem.kernel_used_size + mem.sys_reserved_size)/1024, (float)mem.app_pss_total/1024);
+	printf("                 ion sys_user used(%.2fMb) + ion carveout used(%.2fMb)\n",
+			(float)ion.sys_user_used/1024, (float)ion.carveout_used/1024);
+	printf("Watermark: min %d, low %d, high %d\n", mem.water_min, mem.water_low, mem.water_high);
+	printf("\n");
+
+	printf("Ps: for more detail, please see %s/\n", output_meminfo);
+	printf("\n");
+
+	return 0;
+}
+
+void usage(void)
+{
+	fprintf(stderr,
+			"Usage : memtool [option]\n"
+			"option: -k     : show kernel space mem used;\n"
+			"        -u     : show user space mem used;\n"
+			"        -a     : show mem used of kernel sapce and user space;\n"
+			"        -p pid : show process detail mem msg and print it on the screen;\n"
+			"        -p all : show all process mem and get detail mem msg, equal to '-u';\n"
+			"        -v     : print vesion info;\n");
+	return ;
+}
+
+void version_info(void)
+{
+	printf("%s\n", VERSION_INFO);
+	return ;
+}
+
+int main(int argc, char **argv)
+{
+	int opt;
+	int pid;
+
+	if ((argc != 2) && (argc != 3)) {
+		usage();
+		return -1;
+	} else if ((argc == 3) && strncmp(argv[1], "-p", 2)) {
+		usage();
+		return -1;
+	}
+	mem_debug_init();
+	while ((opt = getopt(argc, argv, "kup:av")) != -1) {
+		switch (opt) {
+		case 'k':
+			read_bsp_kernel_mem();
+			printf("\nMem Used Summary(For kernel space only):\n");
+			mem_used_summary();
+			break;
+		case 'u':
+			read_all_app_mem();
+			printf("Detail msg see: %s/\n\n", output_procinfo);
+			break;
+		case 'p':
+			if (!strncmp(optarg, "all", 3)) {
+				read_all_app_mem();
+				printf("Detail msg see: %s/\n\n", output_procinfo);
+			} else {
+				pid = atoi(optarg);
+				read_one_app_mem(pid);
+			}
+			break;
+		case 'a':
+			read_bsp_kernel_mem();
+			read_all_app_mem();
+			printf("Mem Used Summary:\n");
+			mem_used_summary();
+			break;
+		case 'v':
+			version_info();
+			break;
+		case '?':
+			usage();
+		}
+	}
+
+	fclose(fpp);
+	return 0;
+}
