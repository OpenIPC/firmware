diff -drupN a/sound/soc/soc-core.c b/sound/soc/soc-core.c
--- a/sound/soc/soc-core.c	2018-08-06 17:23:04.000000000 +0300
+++ b/sound/soc/soc-core.c	2022-06-12 05:28:14.000000000 +0300
@@ -217,6 +217,7 @@ static const struct attribute_group *soc
 };
 
 #ifdef CONFIG_DEBUG_FS
+#if !defined(CONFIG_ARCH_SUN8IW19)
 static ssize_t codec_reg_read_file(struct file *file, char __user *user_buf,
 				   size_t count, loff_t *ppos)
 {
@@ -281,7 +282,9 @@ static const struct file_operations code
 	.write = codec_reg_write_file,
 	.llseek = default_llseek,
 };
+#endif
 
+#ifndef CONFIG_ARCH_SUN8IW19
 static void soc_init_component_debugfs(struct snd_soc_component *component)
 {
 	if (!component->card->debugfs_card_root)
@@ -447,6 +450,18 @@ static const struct file_operations plat
 	.read = platform_list_read_file,
 	.llseek = default_llseek,/* read accesses f_pos */
 };
+#else
+static inline void soc_init_component_debugfs(
+	struct snd_soc_component *component)
+{
+}
+
+static inline void soc_cleanup_component_debugfs(
+	struct snd_soc_component *component)
+{
+}
+
+#endif
 
 static void soc_init_card_debugfs(struct snd_soc_card *card)
 {
@@ -461,12 +476,14 @@ static void soc_init_card_debugfs(struct
 		return;
 	}
 
+#ifndef CONFIG_ARCH_SUN8IW19
 	card->debugfs_pop_time = debugfs_create_u32("dapm_pop_time", 0644,
 						    card->debugfs_card_root,
 						    &card->pop_time);
 	if (!card->debugfs_pop_time)
 		dev_warn(card->dev,
 		       "ASoC: Failed to create pop time debugfs file\n");
+#endif
 }
 
 static void soc_cleanup_card_debugfs(struct snd_soc_card *card)
@@ -474,7 +491,6 @@ static void soc_cleanup_card_debugfs(str
 	debugfs_remove_recursive(card->debugfs_card_root);
 }
 
-
 static void snd_soc_debugfs_init(void)
 {
 	snd_soc_debugfs_root = debugfs_create_dir("asoc", NULL);
@@ -484,6 +500,7 @@ static void snd_soc_debugfs_init(void)
 		return;
 	}
 
+#ifndef CONFIG_ARCH_SUN8IW19
 	if (!debugfs_create_file("codecs", 0444, snd_soc_debugfs_root, NULL,
 				 &codec_list_fops))
 		pr_warn("ASoC: Failed to create CODEC list debugfs file\n");
@@ -495,6 +512,7 @@ static void snd_soc_debugfs_init(void)
 	if (!debugfs_create_file("platforms", 0444, snd_soc_debugfs_root, NULL,
 				 &platform_list_fops))
 		pr_warn("ASoC: Failed to create platform list debugfs file\n");
+#endif
 }
 
 static void snd_soc_debugfs_exit(void)
@@ -534,6 +552,20 @@ static inline void snd_soc_debugfs_exit(
 
 #endif
 
+struct snd_pcm_substream *snd_soc_get_substream(struct snd_soc_card *card,
+		const char *dai_link, int stream)
+{
+	struct snd_soc_pcm_runtime *rtd;
+
+	list_for_each_entry(rtd, &card->rtd_list, list) {
+		if (!strcmp(rtd->dai_link->name, dai_link))
+			return rtd->pcm->streams[stream].substream;
+	}
+	dev_dbg(card->dev, "ASoC: failed to find dai link %s\n", dai_link);
+	return NULL;
+}
+EXPORT_SYMBOL_GPL(snd_soc_get_substream);
+
 struct snd_pcm_substream *snd_soc_get_dai_substream(struct snd_soc_card *card,
 		const char *dai_link, int stream)
 {
@@ -680,6 +712,18 @@ int snd_soc_suspend(struct device *dev)
 			cpu_dai->driver->suspend(cpu_dai);
 	}
 
+#if defined(CONFIG_SND_SUNXI_MAD) || defined(CONFIG_SND_SUN50IW11_MAD)
+	list_for_each_entry(rtd, &card->rtd_list, list) {
+		struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
+
+		/*if mad_bind=1, then ignore_suspend is true*/
+		if (rtd->dai_link->ignore_suspend) {
+			if (cpu_dai->driver->suspend && !cpu_dai->driver->bus_control)
+				cpu_dai->driver->suspend(cpu_dai);
+		}
+	}
+#endif
+
 	/* close any waiting streams */
 	list_for_each_entry(rtd, &card->rtd_list, list)
 		flush_delayed_work(&rtd->delayed_work);
@@ -700,8 +744,18 @@ int snd_soc_suspend(struct device *dev)
 
 	/* Recheck all endpoints too, their state is affected by suspend */
 	dapm_mark_endpoints_dirty(card);
+#if defined(CONFIG_SND_SUNXI_MAD) || defined(CONFIG_SND_SUN50IW11_MAD)
+	list_for_each_entry(rtd, &card->rtd_list, list) {
+		if (rtd->dai_link->ignore_suspend)
+			goto suspend_all_codecs;
+	}
+#endif
 	snd_soc_dapm_sync(&card->dapm);
 
+#if defined(CONFIG_SND_SUNXI_MAD) || defined(CONFIG_SND_SUN50IW11_MAD)
+suspend_all_codecs:
+#endif
+
 	/* suspend all CODECs */
 	list_for_each_entry(codec, &card->codec_dev_list, card_list) {
 		struct snd_soc_dapm_context *dapm = snd_soc_codec_get_dapm(codec);
@@ -841,6 +895,18 @@ static void soc_resume_deferred(struct w
 			cpu_dai->driver->resume(cpu_dai);
 	}
 
+#if defined(CONFIG_SND_SUNXI_MAD) || defined(CONFIG_SND_SUN50IW11_MAD)
+	list_for_each_entry(rtd, &card->rtd_list, list) {
+		struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
+
+		/*if mad_bind=1, then ignore_suspend is true*/
+		if (rtd->dai_link->ignore_suspend) {
+			if (cpu_dai->driver->resume && !cpu_dai->driver->bus_control)
+				cpu_dai->driver->resume(cpu_dai);
+		}
+	}
+#endif
+
 	if (card->resume_post)
 		card->resume_post(card);
 
@@ -1639,7 +1705,7 @@ static int soc_probe_link_dais(struct sn
 	if (ret)
 		return ret;
 
-#ifdef CONFIG_DEBUG_FS
+#if defined(CONFIG_DEBUG_FS) && !defined(CONFIG_ARCH_SUN8IW19)
 	/* add DPCM sysfs entries */
 	if (dai_link->dynamic)
 		soc_dpcm_debugfs_add(rtd);
@@ -1894,7 +1960,7 @@ static int snd_soc_instantiate_card(stru
 	card->dapm.card = card;
 	list_add(&card->dapm.list, &card->dapm_list);
 
-#ifdef CONFIG_DEBUG_FS
+#if defined(CONFIG_DEBUG_FS) && !defined(CONFIG_ARCH_SUN8IW19)
 	snd_soc_dapm_debugfs_init(&card->dapm, card->debugfs_card_root);
 #endif
 
@@ -3133,7 +3199,7 @@ int snd_soc_add_platform(struct device *
 	if (platform_drv->remove)
 		platform->component.remove = snd_soc_platform_drv_remove;
 
-#ifdef CONFIG_DEBUG_FS
+#if defined(CONFIG_DEBUG_FS) && !defined(CONFIG_ARCH_SUN8IW19)
 	platform->component.debugfs_prefix = "platform";
 #endif
 
@@ -3354,7 +3420,7 @@ int snd_soc_register_codec(struct device
 	codec->driver = codec_drv;
 	codec->component.val_bytes = codec_drv->reg_word_size;
 
-#ifdef CONFIG_DEBUG_FS
+#if defined(CONFIG_DEBUG_FS) && !defined(CONFIG_ARCH_SUN8IW19)
 	codec->component.init_debugfs = soc_init_codec_debugfs;
 	codec->component.debugfs_prefix = "codec";
 #endif
@@ -3383,6 +3449,7 @@ int snd_soc_register_codec(struct device
 
 	dev_dbg(codec->dev, "ASoC: Registered codec '%s'\n",
 		codec->component.name);
+
 	return 0;
 
 err_cleanup:
