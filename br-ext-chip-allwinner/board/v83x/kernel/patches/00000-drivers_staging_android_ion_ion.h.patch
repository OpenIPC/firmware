diff -drupN a/drivers/staging/android/ion/ion.h b/drivers/staging/android/ion/ion.h
--- a/drivers/staging/android/ion/ion.h	2018-08-06 17:23:04.000000000 +0300
+++ b/drivers/staging/android/ion/ion.h	2022-06-12 05:28:14.000000000 +0300
@@ -150,6 +150,15 @@ struct dma_buf *ion_share_dma_buf(struct
  */
 int ion_share_dma_buf_fd(struct ion_client *client, struct ion_handle *handle);
 
+ /**
+ * @name       :ion_share_dma_buf_fd2
+ * @brief      :same with ion_share_dma_buf_fd except always get fd that
+ *		greater then 2
+ * @client:	the client
+ * @handle:	the handle
+ */
+int ion_share_dma_buf_fd2(struct ion_client *client, struct ion_handle *handle);
+
 /**
  * ion_import_dma_buf() - get ion_handle from dma-buf
  * @client:	the client
@@ -173,4 +182,32 @@ struct ion_handle *ion_import_dma_buf(st
  */
 struct ion_handle *ion_import_dma_buf_fd(struct ion_client *client, int fd);
 
+/**
+ * ion_phys - returns the physical address and len of a handle
+ * @client:	the client
+ * @handle:	the handle
+ * @addr:	a pointer to put the address in
+ * @len:	a pointer to put the length in
+ *
+ * This function queries the heap for a particular handle to get the
+ * handle's physical address.  It't output is only correct if
+ * a heap returns physically contiguous memory -- in other cases
+ * this api should not be implemented -- ion_sg_table should be used
+ * instead.  Returns -EINVAL if the handle is invalid.  This has
+ * no implications on the reference counting of the handle --
+ * the returned value may not be valid if the caller is not
+ * holding a reference.
+ */
+int ion_phys(struct ion_client *client, struct ion_handle *handle,
+	     ion_phys_addr_t *addr, size_t *len);
+
+/**
+ * @name       :ion_set_dmabuf_flag
+ * @brief      :change dma_buf flag
+ * @param[IN]  :flags:flags to be set
+ * @param[IN]  :dma_buf
+ * @return     :0 if success
+ */
+int ion_set_dmabuf_flag(struct dma_buf *buf, unsigned long flags);
+
 #endif /* _LINUX_ION_H */
