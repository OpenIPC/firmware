diff -drupN a/drivers/staging/android/ion/ion_system_heap.c b/drivers/staging/android/ion/ion_system_heap.c
--- a/drivers/staging/android/ion/ion_system_heap.c	2018-08-06 17:23:04.000000000 +0300
+++ b/drivers/staging/android/ion/ion_system_heap.c	2022-06-12 05:28:14.000000000 +0300
@@ -25,14 +25,25 @@
 #include <linux/vmalloc.h>
 #include "ion.h"
 #include "ion_priv.h"
+#ifdef CONFIG_SUNXI_ION_DEBUG
+#include <linux/memblock.h>
+#endif
 
 #define NUM_ORDERS ARRAY_SIZE(orders)
 
 static gfp_t high_order_gfp_flags = (GFP_HIGHUSER | __GFP_ZERO | __GFP_NOWARN |
 				     __GFP_NORETRY) & ~__GFP_RECLAIM;
-static gfp_t low_order_gfp_flags  = (GFP_HIGHUSER | __GFP_ZERO);
+static gfp_t low_order_gfp_flags  = (GFP_HIGHUSER | __GFP_ZERO | __GFP_NOWARN);
 static const unsigned int orders[] = {8, 4, 0};
 
+#ifdef CONFIG_SUNXI_ION_DEBUG
+unsigned long *sys_user_bitmap;
+EXPORT_SYMBOL(sys_user_bitmap);
+unsigned long bitmap_size;
+EXPORT_SYMBOL(bitmap_size);
+#define DRAM_PHYS_BASE 0x40000000
+#endif
+
 static int order_to_index(unsigned int order)
 {
 	int i;
@@ -75,6 +86,9 @@ static struct page *alloc_buffer_page(st
 
 	page = ion_page_pool_alloc(pool);
 
+	if (!page)
+		return NULL;
+
 	if (cached)
 		ion_pages_sync_for_device(NULL, page, PAGE_SIZE << order,
 					  DMA_BIDIRECTIONAL);
@@ -87,6 +101,9 @@ static void free_buffer_page(struct ion_
 	struct ion_page_pool *pool;
 	unsigned int order = compound_order(page);
 	bool cached = ion_buffer_cached(buffer);
+#ifdef CONFIG_SUNXI_ION_DEBUG
+	unsigned long phys, bitmap_no, bitmap_count;
+#endif
 
 	/* go to system */
 	if (buffer->private_flags & ION_PRIV_FLAG_SHRINKER_FREE) {
@@ -99,6 +116,13 @@ static void free_buffer_page(struct ion_
 	else
 		pool = heap->cached_pools[order_to_index(order)];
 
+#ifdef CONFIG_SUNXI_ION_DEBUG
+	phys = page_to_phys(page);
+	bitmap_no = (phys - DRAM_PHYS_BASE) / SZ_4K;
+	bitmap_count = order_to_size(order) / SZ_4K;
+	bitmap_clear(sys_user_bitmap, bitmap_no, bitmap_count);
+#endif
+
 	ion_page_pool_free(pool, page);
 }
 
@@ -110,6 +134,9 @@ static struct page *alloc_largest_availa
 {
 	struct page *page;
 	int i;
+#ifdef CONFIG_SUNXI_ION_DEBUG
+	unsigned long phys, order, bitmap_no, bitmap_count;
+#endif
 
 	for (i = 0; i < NUM_ORDERS; i++) {
 		if (size < order_to_size(orders[i]))
@@ -121,6 +148,13 @@ static struct page *alloc_largest_availa
 		if (!page)
 			continue;
 
+#ifdef CONFIG_SUNXI_ION_DEBUG
+		phys = page_to_phys(page);
+		order = orders[i];
+		bitmap_no = (phys - DRAM_PHYS_BASE) / SZ_4K;
+		bitmap_count = order_to_size(orders[i]) / SZ_4K;
+		bitmap_set(sys_user_bitmap, bitmap_no, bitmap_count);
+#endif
 		return page;
 	}
 
@@ -314,6 +348,8 @@ static int ion_system_heap_create_pools(
 
 		if (orders[i] > 4)
 			gfp_flags = high_order_gfp_flags;
+		else
+			gfp_flags = low_order_gfp_flags;
 
 		pool = ion_page_pool_create(gfp_flags, orders[i], cached);
 		if (!pool)
@@ -330,6 +366,10 @@ err_create_pool:
 struct ion_heap *ion_system_heap_create(struct ion_platform_heap *unused)
 {
 	struct ion_system_heap *heap;
+#ifdef CONFIG_SUNXI_ION_DEBUG
+	struct memblock_region *reg;
+	unsigned long total_pages = 0;
+#endif
 
 	heap = kzalloc(sizeof(*heap), GFP_KERNEL);
 	if (!heap)
@@ -345,6 +385,18 @@ struct ion_heap *ion_system_heap_create(
 		goto destroy_uncached_pools;
 
 	heap->heap.debug_show = ion_system_heap_debug_show;
+
+#ifdef CONFIG_SUNXI_ION_DEBUG
+	for_each_memblock(memory, reg) {
+		total_pages += memblock_region_memory_end_pfn(reg) -
+			memblock_region_memory_base_pfn(reg);
+	}
+	bitmap_size = total_pages;
+	sys_user_bitmap = kzalloc(BITS_TO_LONGS(bitmap_size) * sizeof(long), GFP_KERNEL);
+	if (!sys_user_bitmap)
+		pr_err("%s: sys user bitmap create fail!\n", __func__);
+#endif
+
 	return &heap->heap;
 
 destroy_uncached_pools:
@@ -367,6 +419,9 @@ void ion_system_heap_destroy(struct ion_
 		ion_page_pool_destroy(sys_heap->cached_pools[i]);
 	}
 	kfree(sys_heap);
+#ifdef CONFIG_SUNXI_ION_DEBUG
+	kfree(sys_user_bitmap);
+#endif
 }
 
 static int ion_system_contig_heap_allocate(struct ion_heap *heap,
