diff -drupN a/drivers/staging/android/ion/ion.c b/drivers/staging/android/ion/ion.c
--- a/drivers/staging/android/ion/ion.c	2018-08-06 17:23:04.000000000 +0300
+++ b/drivers/staging/android/ion/ion.c	2022-06-12 05:28:14.000000000 +0300
@@ -36,6 +36,9 @@
 #include <linux/debugfs.h>
 #include <linux/dma-buf.h>
 #include <linux/idr.h>
+#ifdef CONFIG_ARCH_SUN8IW19
+#include <linux/pfn_t.h>
+#endif
 
 #include "ion.h"
 #include "ion_priv.h"
@@ -623,7 +626,7 @@ static int ion_debug_client_show(struct
 
 	mutex_lock(&debugfs_mutex);
 	if (!is_client_alive(client)) {
-		seq_printf(s, "ion_client 0x%p dead, can't dump its buffers\n",
+		seq_printf(s, "ion_client 0x%pK dead, can't dump its buffers\n",
 			   client);
 		mutex_unlock(&debugfs_mutex);
 		return 0;
@@ -776,7 +779,6 @@ void ion_client_destroy(struct ion_clien
 	struct ion_device *dev = client->dev;
 	struct rb_node *n;
 
-	pr_debug("%s: %d\n", __func__, __LINE__);
 	mutex_lock(&debugfs_mutex);
 	while ((n = rb_first(&client->handles))) {
 		struct ion_handle *handle = rb_entry(n, struct ion_handle,
@@ -849,9 +851,6 @@ static void ion_buffer_sync_for_device(s
 	int pages = PAGE_ALIGN(buffer->size) / PAGE_SIZE;
 	int i;
 
-	pr_debug("%s: syncing for device %s\n", __func__,
-		 dev ? dev_name(dev) : "null");
-
 	if (!ion_buffer_fault_user_mappings(buffer))
 		return;
 
@@ -885,7 +884,12 @@ static int ion_vm_fault(struct vm_area_s
 	BUG_ON(!buffer->pages || !buffer->pages[vmf->pgoff]);
 
 	pfn = page_to_pfn(ion_buffer_page(buffer->pages[vmf->pgoff]));
+#ifdef CONFIG_ARCH_SUN8IW19
+	ret = vm_insert_mixed(vma, (unsigned long)vmf->virtual_address,
+					__pfn_to_pfn_t(pfn, PFN_DEV));
+#else
 	ret = vm_insert_pfn(vma, (unsigned long)vmf->virtual_address, pfn);
+#endif
 	mutex_unlock(&buffer->lock);
 	if (ret)
 		return VM_FAULT_ERROR;
@@ -905,7 +909,6 @@ static void ion_vm_open(struct vm_area_s
 	mutex_lock(&buffer->lock);
 	list_add(&vma_list->list, &buffer->vmas);
 	mutex_unlock(&buffer->lock);
-	pr_debug("%s: adding %p\n", __func__, vma);
 }
 
 static void ion_vm_close(struct vm_area_struct *vma)
@@ -913,14 +916,12 @@ static void ion_vm_close(struct vm_area_
 	struct ion_buffer *buffer = vma->vm_private_data;
 	struct ion_vma_list *vma_list, *tmp;
 
-	pr_debug("%s\n", __func__);
 	mutex_lock(&buffer->lock);
 	list_for_each_entry_safe(vma_list, tmp, &buffer->vmas, list) {
 		if (vma_list->vma != vma)
 			continue;
 		list_del(&vma_list->list);
 		kfree(vma_list);
-		pr_debug("%s: deleting %p\n", __func__, vma);
 		break;
 	}
 	mutex_unlock(&buffer->lock);
@@ -943,17 +944,29 @@ static int ion_mmap(struct dma_buf *dmab
 		return -EINVAL;
 	}
 
+#ifdef CONFIG_ARCH_SUN8IW19
+	if (!(buffer->flags & ION_FLAG_CACHED))
+		vma->vm_page_prot = pgprot_writecombine(vma->vm_page_prot);
+#endif
+
 	if (ion_buffer_fault_user_mappings(buffer)) {
+#ifdef CONFIG_ARCH_SUN8IW19
+		vma->vm_flags |= VM_MIXEDMAP | VM_DONTEXPAND |
+							VM_DONTDUMP;
+#else
 		vma->vm_flags |= VM_IO | VM_PFNMAP | VM_DONTEXPAND |
 							VM_DONTDUMP;
+#endif
 		vma->vm_private_data = buffer;
 		vma->vm_ops = &ion_vma_ops;
 		ion_vm_open(vma);
 		return 0;
 	}
 
+#ifndef CONFIG_ARCH_SUN8IW19
 	if (!(buffer->flags & ION_FLAG_CACHED))
 		vma->vm_page_prot = pgprot_writecombine(vma->vm_page_prot);
+#endif
 
 	mutex_lock(&buffer->lock);
 	/* now map it to userspace */
@@ -1080,6 +1093,33 @@ int ion_share_dma_buf_fd(struct ion_clie
 }
 EXPORT_SYMBOL(ion_share_dma_buf_fd);
 
+/**
+ * @name       :ion_share_dma_buf_fd2
+ * @brief      :same with ion_share_dma_buf_fd except always get fd that
+ *		greater then 2
+ * @client:	the client
+ * @handle:	the handle
+ */
+int ion_share_dma_buf_fd2(struct ion_client *client, struct ion_handle *handle)
+{
+	struct dma_buf *dmabuf;
+	int fd;
+
+	dmabuf = ion_share_dma_buf(client, handle);
+	if (IS_ERR(dmabuf))
+		return PTR_ERR(dmabuf);
+
+	fd = get_unused_fd_flags2(O_CLOEXEC);
+	if (fd < 0)
+		dma_buf_put(dmabuf);
+	else
+		fd_install(fd, dmabuf->file);
+
+	return fd;
+}
+EXPORT_SYMBOL(ion_share_dma_buf_fd2);
+
+
 struct ion_handle *ion_import_dma_buf(struct ion_client *client,
 				      struct dma_buf *dmabuf)
 {
@@ -1156,7 +1196,7 @@ int ion_sync_for_device(struct ion_clien
 	}
 	buffer = dmabuf->priv;
 
-	dma_sync_sg_for_device(NULL, buffer->sg_table->sgl,
+	dma_sync_sg_for_device(get_ion_dev(), buffer->sg_table->sgl,
 			       buffer->sg_table->nents, DMA_BIDIRECTIONAL);
 	dma_buf_put(dmabuf);
 	return 0;
@@ -1210,7 +1250,6 @@ static int ion_release(struct inode *ino
 {
 	struct ion_client *client = file->private_data;
 
-	pr_debug("%s: %d\n", __func__, __LINE__);
 	ion_client_destroy(client);
 	return 0;
 }
@@ -1222,7 +1261,6 @@ static int ion_open(struct inode *inode,
 	struct ion_client *client;
 	char debug_name[64];
 
-	pr_debug("%s: %d\n", __func__, __LINE__);
 	snprintf(debug_name, 64, "%u", task_pid_nr(current->group_leader));
 	client = ion_client_create(dev, debug_name);
 	if (IS_ERR(client))
@@ -1393,7 +1431,7 @@ void ion_device_add_heap(struct ion_devi
 	 * use negative heap->id to reverse the priority -- when traversing
 	 * the list later attempt higher id numbers first
 	 */
-	plist_node_init(&heap->node, -heap->id);
+	plist_node_init(&heap->node, +heap->id);
 	plist_add(&heap->node, &dev->heaps);
 	debug_file = debugfs_create_file(heap->name, 0664,
 					 dev->heaps_debug_root, heap,
@@ -1488,3 +1526,43 @@ void ion_device_destroy(struct ion_devic
 	kfree(dev);
 }
 EXPORT_SYMBOL(ion_device_destroy);
+
+int ion_phys(struct ion_client *client, struct ion_handle *handle,
+	     ion_phys_addr_t *addr, size_t *len)
+{
+	struct ion_buffer *buffer;
+	int ret;
+
+	mutex_lock(&client->lock);
+	if (!ion_handle_validate(client, handle)) {
+		mutex_unlock(&client->lock);
+		return -EINVAL;
+	}
+
+	buffer = handle->buffer;
+
+	if (!buffer->heap->ops->phys) {
+		pr_err("%s: ion_phys is not implemented by this heap.\n",
+		       __func__);
+		mutex_unlock(&client->lock);
+		return -ENODEV;
+	}
+	mutex_unlock(&client->lock);
+	ret = buffer->heap->ops->phys(buffer->heap, buffer, addr, len);
+	return ret;
+}
+EXPORT_SYMBOL(ion_phys);
+
+int ion_set_dmabuf_flag(struct dma_buf *buf, unsigned long flags)
+{
+	struct ion_buffer *buffer;
+
+	if (!buf)
+		return -1;
+
+	buffer = buf->priv;
+
+	buffer->flags = flags;
+	return 0;
+}
+EXPORT_SYMBOL(ion_set_dmabuf_flag);
