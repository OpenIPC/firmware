diff -drupN a/drivers/iio/imu/inv_mpu6050/inv_mpu_core.c b/drivers/iio/imu/inv_mpu6050/inv_mpu_core.c
--- a/drivers/iio/imu/inv_mpu6050/inv_mpu_core.c	2018-08-06 17:23:04.000000000 +0300
+++ b/drivers/iio/imu/inv_mpu6050/inv_mpu_core.c	2022-06-12 05:28:14.000000000 +0300
@@ -26,6 +26,7 @@
 #include <linux/acpi.h>
 #include "inv_mpu_iio.h"
 
+static int inv_mpu6050_set_fifo_rate(struct inv_mpu6050_state  *st, int fifo_rate);
 /*
  * this is the gyro scale translated from dynamic range plus/minus
  * {250, 500, 1000, 2000} to rad/s
@@ -91,6 +92,12 @@ static const struct inv_mpu6050_chip_con
 /* Indexed by enum inv_devices */
 static const struct inv_mpu6050_hw hw_info[] = {
 	{
+		.whoami = INV_MPU6050A_WHOAMI_VALUE,
+		.name = "MPU6050A",
+		.reg = &reg_set_6050,
+		.config = &chip_config_6050,
+	},
+	{
 		.whoami = INV_MPU6050_WHOAMI_VALUE,
 		.name = "MPU6050",
 		.reg = &reg_set_6050,
@@ -250,31 +257,26 @@ static int inv_mpu6050_init_config(struc
 	int result;
 	u8 d;
 	struct inv_mpu6050_state *st = iio_priv(indio_dev);
+	struct inv_mpu6050_chip_config *cfg = &st->chip_config;
 
 	result = inv_mpu6050_set_power_itg(st, true);
 	if (result)
 		return result;
-	d = (INV_MPU6050_FSR_2000DPS << INV_MPU6050_GYRO_CONFIG_FSR_SHIFT);
-	result = regmap_write(st->map, st->reg->gyro_config, d);
-	if (result)
-		return result;
 
-	result = inv_mpu6050_set_lpf_regs(st, INV_MPU6050_FILTER_20HZ);
+	d = (cfg->fsr << INV_MPU6050_GYRO_CONFIG_FSR_SHIFT);
+	result = regmap_write(st->map, st->reg->gyro_config, d);
 	if (result)
 		return result;
 
-	d = INV_MPU6050_ONE_K_HZ / INV_MPU6050_INIT_FIFO_RATE - 1;
-	result = regmap_write(st->map, st->reg->sample_rate_div, d);
+	d = (cfg->accl_fs << INV_MPU6050_ACCL_CONFIG_FSR_SHIFT);
+	result = regmap_write(st->map, st->reg->accl_config, d);
 	if (result)
 		return result;
 
-	d = (INV_MPU6050_FS_02G << INV_MPU6050_ACCL_CONFIG_FSR_SHIFT);
-	result = regmap_write(st->map, st->reg->accl_config, d);
+	result = inv_mpu6050_set_fifo_rate(st, cfg->fifo_rate);
 	if (result)
 		return result;
 
-	memcpy(&st->chip_config, hw_info[st->chip_type].config,
-	       sizeof(struct inv_mpu6050_chip_config));
 	result = inv_mpu6050_set_power_itg(st, false);
 
 	return result;
@@ -578,7 +580,10 @@ static int inv_mpu6050_set_lpf(struct in
 	i = 0;
 	while ((h < hz[i]) && (i < ARRAY_SIZE(d) - 1))
 		i++;
-	data = d[i];
+	if (rate > INV_MPU6050_ONE_K_HZ)
+		data = INV_MPU6050_FILTER_256HZ_NOLPF2;
+	else
+		data = d[i];
 	result = inv_mpu6050_set_lpf_regs(st, data);
 	if (result)
 		return result;
@@ -587,6 +592,28 @@ static int inv_mpu6050_set_lpf(struct in
 	return 0;
 }
 
+static int inv_mpu6050_set_fifo_rate(struct inv_mpu6050_state  *st, int fifo_rate)
+{
+	int ret = 0;
+	u8 d;
+
+	if (fifo_rate > INV_MPU6050_ONE_K_HZ)
+		d = INV_MPU6050_8K_HZ / fifo_rate - 1;
+	else
+		d = INV_MPU6050_ONE_K_HZ / fifo_rate - 1;
+
+	ret = regmap_write(st->map,  st->reg->sample_rate_div, d);
+	if (ret)
+		goto out;
+
+	st->chip_config.fifo_rate = fifo_rate;
+
+	ret = inv_mpu6050_set_lpf(st, fifo_rate);
+
+out:
+	return ret;
+}
+
 /**
  * inv_mpu6050_fifo_rate_store() - Set fifo rate.
  */
@@ -595,7 +622,6 @@ inv_mpu6050_fifo_rate_store(struct devic
 			    const char *buf, size_t count)
 {
 	s32 fifo_rate;
-	u8 d;
 	int result;
 	struct iio_dev *indio_dev = dev_to_iio_dev(dev);
 	struct inv_mpu6050_state *st = iio_priv(indio_dev);
@@ -617,15 +643,7 @@ inv_mpu6050_fifo_rate_store(struct devic
 	if (result)
 		goto fifo_rate_fail;
 
-	d = INV_MPU6050_ONE_K_HZ / fifo_rate - 1;
-	result = regmap_write(st->map, st->reg->sample_rate_div, d);
-	if (result)
-		goto fifo_rate_fail;
-	st->chip_config.fifo_rate = fifo_rate;
-
-	result = inv_mpu6050_set_lpf(st, fifo_rate);
-	if (result)
-		goto fifo_rate_fail;
+	result = inv_mpu6050_set_fifo_rate(st, fifo_rate);
 
 fifo_rate_fail:
 	result |= inv_mpu6050_set_power_itg(st, false);
@@ -753,7 +771,7 @@ static const struct iio_chan_spec inv_mp
 };
 
 /* constant IIO attribute */
-static IIO_CONST_ATTR_SAMP_FREQ_AVAIL("10 20 50 100 200 500");
+static IIO_CONST_ATTR_SAMP_FREQ_AVAIL("10 20 50 100 200 500 1000 2000 4000 8000");
 static IIO_CONST_ATTR(in_anglvel_scale_available,
 					  "0.000133090 0.000266181 0.000532362 0.001064724");
 static IIO_CONST_ATTR(in_accel_scale_available,
@@ -843,6 +861,25 @@ static int inv_check_and_setup_chip(stru
 	return 0;
 }
 
+static void inv_mpu_resume_handle(struct work_struct *work)
+{
+	int result = 0;
+	struct inv_mpu6050_state *st =
+			container_of(work, struct inv_mpu6050_state, resume_work);
+	struct iio_dev *indio_dev = iio_priv_to_dev(st);
+
+	/* power is turned on inside check chip type*/
+	result = inv_check_and_setup_chip(st);
+	if (result) {
+		printk("Could not setup inv chip.\n");
+		return;
+	}
+
+	result = inv_mpu6050_init_config(indio_dev);
+	if (result)
+		return;
+}
+
 int inv_mpu_core_probe(struct regmap *regmap, int irq, const char *name,
 		int (*inv_mpu_bus_setup)(struct iio_dev *), int chip_type)
 {
@@ -889,6 +926,8 @@ int inv_mpu_core_probe(struct regmap *re
 	if (inv_mpu_bus_setup)
 		inv_mpu_bus_setup(indio_dev);
 
+	memcpy(&st->chip_config, hw_info[st->chip_type].config,
+	       sizeof(struct inv_mpu6050_chip_config));
 	result = inv_mpu6050_init_config(indio_dev);
 	if (result) {
 		dev_err(dev, "Could not initialize device.\n");
@@ -922,6 +961,7 @@ int inv_mpu_core_probe(struct regmap *re
 		goto out_unreg_ring;
 	}
 
+	INIT_WORK(&st->resume_work, inv_mpu_resume_handle);
 	INIT_KFIFO(st->timestamps);
 	spin_lock_init(&st->time_stamp_lock);
 	result = iio_device_register(indio_dev);
@@ -956,7 +996,12 @@ EXPORT_SYMBOL_GPL(inv_mpu_core_remove);
 
 static int inv_mpu_resume(struct device *dev)
 {
-	return inv_mpu6050_set_power_itg(iio_priv(dev_get_drvdata(dev)), true);
+	struct iio_dev *indio_dev = dev_get_drvdata(dev);
+	struct inv_mpu6050_state *st = iio_priv(indio_dev);
+
+	schedule_work(&st->resume_work);
+
+	return 0;
 }
 
 static int inv_mpu_suspend(struct device *dev)
