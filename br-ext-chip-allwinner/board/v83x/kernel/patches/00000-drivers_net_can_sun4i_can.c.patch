diff -drupN a/drivers/net/can/sun4i_can.c b/drivers/net/can/sun4i_can.c
--- a/drivers/net/can/sun4i_can.c	2018-08-06 17:23:04.000000000 +0300
+++ b/drivers/net/can/sun4i_can.c	2022-06-12 05:28:14.000000000 +0300
@@ -205,6 +205,9 @@ struct sun4ican_priv {
 	void __iomem *base;
 	struct clk *clk;
 	spinlock_t cmdreg_lock;	/* lock for concurrent cmd register writes */
+	bool is_suspend;
+	struct pinctrl *can_pinctrl;
+	spinlock_t lock;
 };
 
 static const struct can_bittiming_const sun4ican_bittiming_const = {
@@ -753,15 +756,55 @@ static const struct net_device_ops sun4i
 
 static const struct of_device_id sun4ican_of_match[] = {
 	{.compatible = "allwinner,sun4i-a10-can"},
+	{.compatible = "allwinner,sunxi-can"},
 	{},
 };
 
 MODULE_DEVICE_TABLE(of, sun4ican_of_match);
 
+static int can_request_gpio(struct platform_device *pdev)
+{
+	struct net_device *dev = platform_get_drvdata(pdev);
+	struct sun4ican_priv *priv = netdev_priv(dev);
+	struct pinctrl_state *pctrl_state = NULL;
+	int ret = 0;
+
+	priv->can_pinctrl = devm_pinctrl_get(&pdev->dev);
+	if (IS_ERR_OR_NULL(priv->can_pinctrl)) {
+		netdev_err(dev, "request pinctrl handle fail!\n");
+		return -EINVAL;
+	}
+
+	pctrl_state = pinctrl_lookup_state(priv->can_pinctrl,
+			PINCTRL_STATE_DEFAULT);
+	if (IS_ERR(pctrl_state)) {
+		netdev_err(dev, "pinctrl_lookup_state fail! return %p\n",
+				pctrl_state);
+		return -EINVAL;
+	}
+
+	ret = pinctrl_select_state(priv->can_pinctrl, pctrl_state);
+	if (ret < 0)
+		netdev_err(dev, "pinctrl_select_state fail! return %d\n", ret);
+
+	return ret;
+}
+
+static void can_release_gpio(struct platform_device *pdev)
+{
+	struct net_device *dev = platform_get_drvdata(pdev);
+	struct sun4ican_priv *priv = netdev_priv(dev);
+
+	if (!IS_ERR_OR_NULL(priv->can_pinctrl))
+		devm_pinctrl_put(priv->can_pinctrl);
+	priv->can_pinctrl = NULL;
+}
+
 static int sun4ican_remove(struct platform_device *pdev)
 {
 	struct net_device *dev = platform_get_drvdata(pdev);
 
+	can_release_gpio(pdev);
 	unregister_netdev(dev);
 	free_candev(dev);
 
@@ -823,10 +866,13 @@ static int sun4ican_probe(struct platfor
 	priv->base = addr;
 	priv->clk = clk;
 	spin_lock_init(&priv->cmdreg_lock);
+	spin_lock_init(&priv->lock);
 
 	platform_set_drvdata(pdev, dev);
 	SET_NETDEV_DEV(dev, &pdev->dev);
 
+	can_request_gpio(pdev);
+
 	err = register_candev(dev);
 	if (err) {
 		dev_err(&pdev->dev, "registering %s failed (err=%d)\n",
@@ -846,9 +892,73 @@ exit:
 	return err;
 }
 
+#ifdef CONFIG_PM
+static int can_select_gpio_state(struct pinctrl *pctrl, char *state)
+{
+	int ret = 0;
+	struct pinctrl_state *pctrl_state = NULL;
+
+	pctrl_state = pinctrl_lookup_state(pctrl, state);
+	if (IS_ERR(pctrl_state)) {
+		pr_err("can pinctrl_lookup_state(%s) failed!\n", state);
+		return -1;
+	}
+
+	ret = pinctrl_select_state(pctrl, pctrl_state);
+	if (ret < 0)
+		pr_err("can pinctrl_select_state(%s) failed!\n", state);
+
+	return ret;
+}
+
+static int can_suspend(struct device *dev)
+{
+	struct net_device *ndev = dev_get_drvdata(dev);
+	struct sun4ican_priv *priv = netdev_priv(ndev);
+
+	if (!ndev || !netif_running(ndev))
+		return 0;
+
+	spin_lock(&priv->lock);
+	priv->is_suspend = true;
+	spin_unlock(&priv->lock);
+
+	can_select_gpio_state(priv->can_pinctrl, PINCTRL_STATE_SLEEP);
+	sun4ican_close(ndev);
+
+	return 0;
+}
+
+static int can_resume(struct device *dev)
+{
+	struct net_device *ndev = dev_get_drvdata(dev);
+	struct sun4ican_priv *priv = netdev_priv(ndev);
+
+	if (!ndev || !netif_running(ndev))
+		return 0;
+
+	spin_lock(&priv->lock);
+	priv->is_suspend = false;
+	spin_unlock(&priv->lock);
+
+	can_select_gpio_state(priv->can_pinctrl, PINCTRL_STATE_DEFAULT);
+	sun4ican_open(ndev);
+
+	return 0;
+}
+
+static const struct dev_pm_ops can_pm_ops = {
+	.suspend = can_suspend,
+	.resume = can_resume,
+};
+#else
+static const struct dev_pm_ops can_pm_ops;
+#endif /* CONFIG_PM */
+
 static struct platform_driver sun4i_can_driver = {
 	.driver = {
 		.name = DRV_NAME,
+		.pm = &can_pm_ops,
 		.of_match_table = sun4ican_of_match,
 	},
 	.probe = sun4ican_probe,
