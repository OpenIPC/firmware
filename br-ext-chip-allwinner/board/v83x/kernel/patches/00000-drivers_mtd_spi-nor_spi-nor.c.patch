diff -drupN a/drivers/mtd/spi-nor/spi-nor.c b/drivers/mtd/spi-nor/spi-nor.c
--- a/drivers/mtd/spi-nor/spi-nor.c	2018-08-06 17:23:04.000000000 +0300
+++ b/drivers/mtd/spi-nor/spi-nor.c	2022-06-12 05:28:14.000000000 +0300
@@ -56,6 +56,7 @@ struct flash_info {
 	 */
 	unsigned	sector_size;
 	u16		n_sectors;
+	u16		n_banks;
 
 	u16		page_size;
 	u16		addr_width;
@@ -194,6 +195,7 @@ static inline int set_4byte(struct spi_n
 {
 	int status;
 	bool need_wren = false;
+	int ids = 0;
 	u8 cmd;
 
 	switch (JEDEC_MFR(info)) {
@@ -202,13 +204,19 @@ static inline int set_4byte(struct spi_n
 		need_wren = true;
 	case SNOR_MFR_MACRONIX:
 	case SNOR_MFR_WINBOND:
-		if (need_wren)
-			write_enable(nor);
+		ids = nor->n_banks;
+		do {
+			if (nor->flash_select_bank)
+				nor->flash_select_bank(nor, 0, ids);
 
-		cmd = enable ? SPINOR_OP_EN4B : SPINOR_OP_EX4B;
-		status = nor->write_reg(nor, cmd, NULL, 0);
-		if (need_wren)
-			write_disable(nor);
+			if (need_wren)
+				write_enable(nor);
+
+			cmd = enable ? SPINOR_OP_EN4B : SPINOR_OP_EX4B;
+			status = nor->write_reg(nor, cmd, NULL, 0);
+			if (need_wren)
+				write_disable(nor);
+		} while (ids--);
 
 		return status;
 	default:
@@ -351,6 +359,7 @@ static int spi_nor_erase(struct mtd_info
 	struct spi_nor *nor = mtd_to_spi_nor(mtd);
 	u32 addr, len;
 	uint32_t rem;
+	int ids = 0;
 	int ret;
 
 	dev_dbg(nor->dev, "at 0x%llx, len %lld\n", (long long)instr->addr,
@@ -370,26 +379,35 @@ static int spi_nor_erase(struct mtd_info
 	/* whole-chip erase? */
 	if (len == mtd->size) {
 		unsigned long timeout;
+		if (nor->n_banks && nor->flash_select_bank)
+			ids = nor->n_banks;
+		else
+			ids = 0;
 
-		write_enable(nor);
+		do {
+			if (nor->flash_select_bank)
+				nor->flash_select_bank(nor, 0, ids);
 
-		if (erase_chip(nor)) {
-			ret = -EIO;
-			goto erase_err;
-		}
+			write_enable(nor);
 
-		/*
-		 * Scale the timeout linearly with the size of the flash, with
-		 * a minimum calibrated to an old 2MB flash. We could try to
-		 * pull these from CFI/SFDP, but these values should be good
-		 * enough for now.
-		 */
-		timeout = max(CHIP_ERASE_2MB_READY_WAIT_JIFFIES,
-			      CHIP_ERASE_2MB_READY_WAIT_JIFFIES *
-			      (unsigned long)(mtd->size / SZ_2M));
-		ret = spi_nor_wait_till_ready_with_timeout(nor, timeout);
-		if (ret)
-			goto erase_err;
+			if (erase_chip(nor)) {
+				ret = -EIO;
+				goto erase_err;
+			}
+
+			/*
+			 * Scale the timeout linearly with the size of the flash, with
+			 * a minimum calibrated to an old 2MB flash. We could try to
+			 * pull these from CFI/SFDP, but these values should be good
+			 * enough for now.
+			 */
+			timeout = max(CHIP_ERASE_2MB_READY_WAIT_JIFFIES,
+					CHIP_ERASE_2MB_READY_WAIT_JIFFIES *
+					(unsigned long)(mtd->size / SZ_2M));
+			ret = spi_nor_wait_till_ready_with_timeout(nor, timeout);
+			if (ret)
+				goto erase_err;
+		} while (ids--);
 
 	/* REVISIT in some cases we could speed up erasing large regions
 	 * by using SPINOR_OP_SE instead of SPINOR_OP_BE_4K.  We may have set up
@@ -398,7 +416,16 @@ static int spi_nor_erase(struct mtd_info
 
 	/* "sector"-at-a-time erase */
 	} else {
+		u32 bank_size = 0;
+
+		if (nor->n_banks && nor->flash_select_bank)
+			bank_size = (u32)div_u64(mtd->size, nor->n_banks);
+
 		while (len) {
+
+			if (nor->n_banks && nor->flash_select_bank)
+				nor->flash_select_bank(nor, addr, addr / bank_size);
+
 			write_enable(nor);
 
 			ret = spi_nor_erase_sector(nor, addr);
@@ -746,7 +773,7 @@ static int spi_nor_is_locked(struct mtd_
 }
 
 /* Used when the "_ext_id" is two bytes at most */
-#define INFO(_jedec_id, _ext_id, _sector_size, _n_sectors, _flags)	\
+#define _INFO(_jedec_id, _ext_id, _sector_size, _n_sectors, _n_banks, _flags)	\
 		.id = {							\
 			((_jedec_id) >> 16) & 0xff,			\
 			((_jedec_id) >> 8) & 0xff,			\
@@ -758,8 +785,13 @@ static int spi_nor_is_locked(struct mtd_
 		.sector_size = (_sector_size),				\
 		.n_sectors = (_n_sectors),				\
 		.page_size = 256,					\
+		.n_banks = _n_banks,					\
 		.flags = (_flags),
 
+#define INFO(_jedec_id, _ext_id, _sector_size, _n_sectors, _flags)	\
+	_INFO(_jedec_id, _ext_id, _sector_size, _n_sectors, 0, _flags)
+
+
 #define INFO6(_jedec_id, _ext_id, _sector_size, _n_sectors, _flags)	\
 		.id = {							\
 			((_jedec_id) >> 16) & 0xff,			\
@@ -772,6 +804,7 @@ static int spi_nor_is_locked(struct mtd_
 		.id_len = 6,						\
 		.sector_size = (_sector_size),				\
 		.n_sectors = (_n_sectors),				\
+		.n_banks = 0,						\
 		.page_size = 256,					\
 		.flags = (_flags),
 
@@ -850,6 +883,11 @@ static const struct flash_info spi_nor_i
 			SECT_4K | SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ |
 			SPI_NOR_HAS_LOCK | SPI_NOR_HAS_TB)
 	},
+	{
+		"gd25q256d", INFO(0xc84019, 0, 64 * 1024, 512,
+			SECT_4K | SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ |
+			SPI_NOR_HAS_LOCK | SPI_NOR_HAS_TB)
+	},
 
 	/* Intel/Numonyx -- xxxs33b */
 	{ "160s33b",  INFO(0x898911, 0, 64 * 1024,  32, 0) },
@@ -869,6 +907,7 @@ static const struct flash_info spi_nor_i
 	{ "mx25l3255e",  INFO(0xc29e16, 0, 64 * 1024,  64, SECT_4K) },
 	{ "mx25l6405d",  INFO(0xc22017, 0, 64 * 1024, 128, SECT_4K) },
 	{ "mx25u6435f",  INFO(0xc22537, 0, 64 * 1024, 128, SECT_4K) },
+	{ "mx25l12835f", INFO(0xc22018, 0, 64 * 1024, 256, SECT_4K | SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ) },
 	{ "mx25l12805d", INFO(0xc22018, 0, 64 * 1024, 256, 0) },
 	{ "mx25l12855e", INFO(0xc22618, 0, 64 * 1024, 256, 0) },
 	{ "mx25l25635e", INFO(0xc22019, 0, 64 * 1024, 512, 0) },
@@ -1000,8 +1039,22 @@ static const struct flash_info spi_nor_i
 	},
 	{ "w25q80", INFO(0xef5014, 0, 64 * 1024,  16, SECT_4K) },
 	{ "w25q80bl", INFO(0xef4014, 0, 64 * 1024,  16, SECT_4K) },
-	{ "w25q128", INFO(0xef4018, 0, 64 * 1024, 256, SECT_4K) },
+	{ "w25q128", INFO(0xef4018, 0, 64 * 1024, 256, SECT_4K | SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ) },
 	{ "w25q256", INFO(0xef4019, 0, 64 * 1024, 512, SECT_4K) },
+	{ "w25m512jv", _INFO(0xef7119, 0, 64 * 1024, 1024, 2,
+			SECT_4K | SPI_NOR_QUAD_READ | SPI_NOR_DUAL_READ) },
+
+	/* puya */
+	{ "p25q128", INFO(0x856018, 0, 64 * 1024, 256, SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ) },
+	{ "p25q64", INFO(0x856017, 0, 64 * 1024, 128, SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ) },
+	{ "p25q32", INFO(0x856016, 0, 64 * 1024, 64, SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ) },
+
+	/* ZB */
+	{ "z25vq128as", INFO(0x5e4018, 0, 64 * 1024, 256, SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ) },
+
+	/* FM */
+	{ "fm25q128a", INFO(0xa14018, 0, 64 * 1024, 256, SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ) },
+	{ "fm25q64",   INFO(0xa14017, 0, 64 * 1024, 128, SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ) },
 
 	/* Catalyst / On Semiconductor -- non-JEDEC */
 	{ "cat25c11", CAT25_INFO(  16, 8, 16, 1, SPI_NOR_NO_ERASE | SPI_NOR_NO_FR) },
@@ -1040,6 +1093,8 @@ static int spi_nor_read(struct mtd_info
 			size_t *retlen, u_char *buf)
 {
 	struct spi_nor *nor = mtd_to_spi_nor(mtd);
+	u32 bank_size = 0, bank_offset;
+	u32 bid = 0;
 	int ret;
 
 	dev_dbg(nor->dev, "from 0x%08x, len %zd\n", (u32)from, len);
@@ -1048,8 +1103,26 @@ static int spi_nor_read(struct mtd_info
 	if (ret)
 		return ret;
 
+	if (nor->n_banks && nor->flash_select_bank)
+		bank_size = (u32)div_u64(mtd->size, nor->n_banks);
+	else
+		bank_size = mtd->size;
+
 	while (len) {
-		ret = nor->read(nor, from, len, buf);
+		size_t rlen;
+
+		bank_offset = from & (bank_size - 1);
+		bid = (u32)div_u64(from, bank_size);
+
+		if (nor->flash_select_bank)
+			nor->flash_select_bank(nor, from, bid);
+
+		if ((len + bank_offset) > bank_size)
+			rlen =  bank_size - bank_offset;
+		else
+			rlen = len;
+
+		ret = nor->read(nor, bank_offset, rlen, buf);
 		if (ret == 0) {
 			/* We shouldn't see 0-length reads */
 			ret = -EIO;
@@ -1059,10 +1132,12 @@ static int spi_nor_read(struct mtd_info
 			goto read_err;
 
 		WARN_ON(ret > len);
+
 		*retlen += ret;
-		buf += ret;
 		from += ret;
+		buf += ret;
 		len -= ret;
+
 	}
 	ret = 0;
 
@@ -1159,8 +1234,10 @@ static int spi_nor_write(struct mtd_info
 	size_t *retlen, const u_char *buf)
 {
 	struct spi_nor *nor = mtd_to_spi_nor(mtd);
-	size_t page_offset, page_remain, i;
-	ssize_t ret;
+	size_t page_offset, page_remain;
+	int ret;
+	u32 bid;
+	u32 bank_size, bank_offset;
 
 	dev_dbg(nor->dev, "to 0x%08x, len %zd\n", (u32)to, len);
 
@@ -1168,28 +1245,45 @@ static int spi_nor_write(struct mtd_info
 	if (ret)
 		return ret;
 
-	for (i = 0; i < len; ) {
+	if (nor->n_banks && nor->flash_select_bank)
+		bank_size = (u32)div_u64(mtd->size, nor->n_banks);
+	else
+		bank_size = mtd->size;
+
+	while (len) {
 		ssize_t written;
+		size_t wlen = 0;
 
-		page_offset = (to + i) & (nor->page_size - 1);
-		WARN_ONCE(page_offset,
-			  "Writing at offset %zu into a NOR page. Writing partial pages may decrease reliability and increase wear of NOR flash.",
-			  page_offset);
+		bank_offset = to & (bank_size - 1);
+		bid = (u32)div_u64(to, bank_size);
+
+		if (nor->flash_select_bank)
+			nor->flash_select_bank(nor, to, bid);
+
+		if ((len + bank_offset) > bank_size)
+			wlen = bank_size - bank_offset;
+		else
+			wlen = len;
+
+		page_offset = to & (nor->page_size - 1);
 		/* the size of data remaining on the first page */
 		page_remain = min_t(size_t,
-				    nor->page_size - page_offset, len - i);
+				    nor->page_size - page_offset, wlen);
 
 		write_enable(nor);
-		ret = nor->write(nor, to + i, page_remain, buf + i);
-		if (ret < 0)
+		written = nor->write(nor, to, page_remain, buf);
+		if (written < 0)
 			goto write_err;
-		written = ret;
 
 		ret = spi_nor_wait_till_ready(nor);
 		if (ret)
 			goto write_err;
+
 		*retlen += written;
-		i += written;
+		to += written;
+		buf += written;
+		len -= written;
+
 		if (written != page_remain) {
 			dev_err(nor->dev,
 				"While writing %zu bytes written %zd bytes\n",
@@ -1296,6 +1390,16 @@ static int set_quad_mode(struct spi_nor
 	}
 }
 
+static int winb_select_bank(struct spi_nor *nor, loff_t ofs, u32 id)
+{
+	int ret;
+
+	nor->cmd_buf[0] = id;
+	ret = nor->write_reg(nor, SPINOR_OP_DIESEL, nor->cmd_buf, 1);
+
+	return ret;
+}
+
 static int spi_nor_check(struct spi_nor *nor)
 {
 	if (!nor->dev || !nor->read || !nor->write ||
@@ -1307,6 +1411,86 @@ static int spi_nor_check(struct spi_nor
 	return 0;
 }
 
+static int spi_nor_init(struct spi_nor *nor)
+{
+	const struct  flash_info *info = nor->info;
+	int err;
+
+	/*
+	 * Atmel, SST, Intel/Numonyx, and others serial NOR tend to power up
+	 * with the software protection bits set
+	 */
+
+	if (JEDEC_MFR(info) == SNOR_MFR_ATMEL ||
+	    JEDEC_MFR(info) == SNOR_MFR_INTEL ||
+	    JEDEC_MFR(info) == SNOR_MFR_SST) {
+		write_enable(nor);
+		write_sr(nor, 0);
+		spi_nor_wait_till_ready(nor);
+	}
+
+	if (nor->flash_read == SPI_NOR_QUAD && info->flags & SPI_NOR_QUAD_READ) {
+		err = set_quad_mode(nor, info);
+		if (err) {
+			dev_err(nor->dev, "quad mode not supported\n");
+			return err;
+		}
+	}
+
+	if ((nor->addr_width == 4) &&
+	    (JEDEC_MFR(nor->info) != SNOR_MFR_SPANSION)) {
+		/*
+		 * If the RESET# pin isn't hooked up properly, or the system
+		 * otherwise doesn't perform a reset command in the boot
+		 * sequence, it's impossible to 100% protect against unexpected
+		 * reboots (e.g., crashes). Warn the user (or hopefully, system
+		 * designer) that this is bad.
+		 */
+		set_4byte(nor, nor->info, 1);
+	}
+
+	return 0;
+}
+
+/* mtd resume handler */
+static void spi_nor_resume(struct mtd_info *mtd)
+{
+	struct spi_nor *nor = mtd_to_spi_nor(mtd);
+	int ret;
+
+	/* re-initialize the nor chip */
+	ret = spi_nor_init(nor);
+	if (ret)
+		dev_err(nor->dev, "resume() failed\n");
+}
+
+void spi_nor_restore(struct spi_nor *nor)
+{
+	/* restore the addressing mode */
+	if ((nor->addr_width == 4) &&
+	    (JEDEC_MFR(nor->info) != SNOR_MFR_SPANSION))
+		set_4byte(nor, nor->info, 0);
+
+	/*
+	 * Send Reset Enable (66h) and Reset Device (99h)
+	 */
+	nor->write_reg(nor, SPINOR_OP_RESTEN, NULL, 0);
+	nor->write_reg(nor, SPINOR_OP_RESET, NULL, 0);
+
+}
+EXPORT_SYMBOL_GPL(spi_nor_restore);
+
+static int spi_nor_suspend(struct mtd_info *mtd)
+{
+	struct spi_nor *nor = mtd_to_spi_nor(mtd);
+
+	/* re-initialize the nor chip */
+	spi_nor_restore(nor);
+
+	return 0;
+}
+
+
 int spi_nor_scan(struct spi_nor *nor, const char *name, enum read_mode mode)
 {
 	const struct flash_info *info = NULL;
@@ -1355,18 +1539,22 @@ int spi_nor_scan(struct spi_nor *nor, co
 	mutex_init(&nor->lock);
 
 	/*
-	 * Atmel, SST, Intel/Numonyx, and others serial NOR tend to power up
-	 * with the software protection bits set
+	 * We need to check the device if have multi-chip-die capabilities.
+	 * There is some devices can switch the chip die by command,
+	 * such as WINBOND's devices.
+	 * But, other devices also can switch the bank by gpio, such as Micross's
+	 * MYXN25Q512A, it can control the S# pin to select die.
+	 *
+	 * TODO: implement the gpio contorl and die mapping table.
 	 */
-
-	if (JEDEC_MFR(info) == SNOR_MFR_ATMEL ||
-	    JEDEC_MFR(info) == SNOR_MFR_INTEL ||
-	    JEDEC_MFR(info) == SNOR_MFR_SST ||
-	    info->flags & SPI_NOR_HAS_LOCK) {
-		write_enable(nor);
-		write_sr(nor, 0);
-		spi_nor_wait_till_ready(nor);
-	}
+	if (info->n_banks) {
+		nor->n_banks = info->n_banks;
+		if (JEDEC_MFR(info) == SNOR_MFR_WINBOND) {
+			dev_dbg(dev, "manufacturer is winbond\n");
+			nor->flash_select_bank = winb_select_bank;
+		}
+	} else
+		nor->n_banks = 0;
 
 	if (!mtd->name)
 		mtd->name = dev_name(dev);
@@ -1377,6 +1565,8 @@ int spi_nor_scan(struct spi_nor *nor, co
 	mtd->size = info->sector_size * info->n_sectors;
 	mtd->_erase = spi_nor_erase;
 	mtd->_read = spi_nor_read;
+	mtd->_resume = spi_nor_resume;
+	mtd->_suspend = spi_nor_suspend;
 
 	/* NOR protection support for STmicro/Micron chips and similar */
 	if (JEDEC_MFR(info) == SNOR_MFR_MICRON ||
@@ -1442,11 +1632,6 @@ int spi_nor_scan(struct spi_nor *nor, co
 
 	/* Quad/Dual-read mode takes precedence over fast/normal */
 	if (mode == SPI_NOR_QUAD && info->flags & SPI_NOR_QUAD_READ) {
-		ret = set_quad_mode(nor, info);
-		if (ret) {
-			dev_err(dev, "quad mode not supported\n");
-			return ret;
-		}
 		nor->flash_read = SPI_NOR_QUAD;
 	} else if (mode == SPI_NOR_DUAL && info->flags & SPI_NOR_DUAL_READ) {
 		nor->flash_read = SPI_NOR_DUAL;
@@ -1478,7 +1663,8 @@ int spi_nor_scan(struct spi_nor *nor, co
 	else if (mtd->size > 0x1000000) {
 		/* enable 4-byte addressing if the device exceeds 16MiB */
 		nor->addr_width = 4;
-		if (JEDEC_MFR(info) == SNOR_MFR_SPANSION) {
+		if ((JEDEC_MFR(info) == SNOR_MFR_SPANSION) ||
+			(JEDEC_MFR(info) == SNOR_MFR_GIGADEVICE)) {
 			/* Dedicated 4-byte command set */
 			switch (nor->flash_read) {
 			case SPI_NOR_QUAD:
@@ -1498,8 +1684,7 @@ int spi_nor_scan(struct spi_nor *nor, co
 			/* No small sector erase for 4-byte command set */
 			nor->erase_opcode = SPINOR_OP_SE_4B;
 			mtd->erasesize = info->sector_size;
-		} else
-			set_4byte(nor, info, 1);
+		}
 	} else {
 		nor->addr_width = 3;
 	}
@@ -1512,6 +1697,12 @@ int spi_nor_scan(struct spi_nor *nor, co
 
 	nor->read_dummy = spi_nor_read_dummy_cycles(nor);
 
+	/* Send all the required SPI flash commands to initialize device */
+	nor->info = info;
+	ret = spi_nor_init(nor);
+	if (ret)
+		return ret;
+
 	dev_info(dev, "%s (%lld Kbytes)\n", info->name,
 			(long long)mtd->size >> 10);
 
