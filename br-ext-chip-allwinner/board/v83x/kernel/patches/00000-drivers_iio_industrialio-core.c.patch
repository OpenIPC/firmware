diff -drupN a/drivers/iio/industrialio-core.c b/drivers/iio/industrialio-core.c
--- a/drivers/iio/industrialio-core.c	2018-08-06 17:23:04.000000000 +0300
+++ b/drivers/iio/industrialio-core.c	2022-06-12 05:28:14.000000000 +0300
@@ -554,14 +554,6 @@ int of_iio_read_mount_matrix(const struc
 
 		if (err == ARRAY_SIZE(iio_mount_idmatrix.rotation))
 			return 0;
-
-		if (err >= 0)
-			/* Invalid number of matrix entries. */
-			return -EINVAL;
-
-		if (err != -EINVAL)
-			/* Invalid matrix declaration format. */
-			return err;
 	}
 
 	/* Matrix was not declared at all: fallback to identity. */
@@ -603,25 +595,25 @@ ssize_t iio_format_value(char *buf, unsi
 	case IIO_VAL_INT_PLUS_MICRO:
 		if (vals[1] < 0)
 			return sprintf(buf, "-%d.%06u%s\n", abs(vals[0]),
-				       -vals[1], scale_db ? " dB" : "");
+				       (unsigned int)-vals[1], scale_db ? " dB" : "");
 		else
-			return sprintf(buf, "%d.%06u%s\n", vals[0], vals[1],
+			return sprintf(buf, "%d.%06u%s\n", vals[0], (unsigned int)vals[1],
 				scale_db ? " dB" : "");
 	case IIO_VAL_INT_PLUS_NANO:
 		if (vals[1] < 0)
 			return sprintf(buf, "-%d.%09u\n", abs(vals[0]),
-				       -vals[1]);
+				       (unsigned int)-vals[1]);
 		else
-			return sprintf(buf, "%d.%09u\n", vals[0], vals[1]);
+			return sprintf(buf, "%d.%09u\n", vals[0], (unsigned int)vals[1]);
 	case IIO_VAL_FRACTIONAL:
 		tmp = div_s64((s64)vals[0] * 1000000000LL, vals[1]);
 		vals[0] = (int)div_s64_rem(tmp, 1000000000, &vals[1]);
-		return sprintf(buf, "%d.%09u\n", vals[0], abs(vals[1]));
+		return sprintf(buf, "%d.%09u\n", vals[0], (unsigned int)abs(vals[1]));
 	case IIO_VAL_FRACTIONAL_LOG2:
 		tmp = (s64)vals[0] * 1000000000LL >> vals[1];
 		vals[1] = do_div(tmp, 1000000000LL);
 		vals[0] = tmp;
-		return sprintf(buf, "%d.%09u\n", vals[0], vals[1]);
+		return sprintf(buf, "%d.%09u\n", vals[0], (unsigned int)vals[1]);
 	case IIO_VAL_INT_MULTIPLE:
 	{
 		int i;
