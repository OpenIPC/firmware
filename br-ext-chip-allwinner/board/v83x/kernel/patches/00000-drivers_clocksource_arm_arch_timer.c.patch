diff -drupN a/drivers/clocksource/arm_arch_timer.c b/drivers/clocksource/arm_arch_timer.c
--- a/drivers/clocksource/arm_arch_timer.c	2018-08-06 17:23:04.000000000 +0300
+++ b/drivers/clocksource/arm_arch_timer.c	2022-06-12 05:28:14.000000000 +0300
@@ -269,7 +269,51 @@ static int arch_timer_shutdown_phys_mem(
 {
 	return timer_shutdown(ARCH_TIMER_MEM_PHYS_ACCESS, clk);
 }
+#if defined(CONFIG_ARCH_SUN50IW1P1) \
+	|| defined(CONFIG_ARCH_SUN50IW2P1)
+#define ARCH_TVAL_TRY_MAX_TIME (12)
+#define ARCH_CVAL_MAX_DELTA    (40)
+static __always_inline void set_next_event(const int access, unsigned long evt,
+				  struct clock_event_device *clk)
+{
+	unsigned int  retry = 0;
+	unsigned long ctrl;
+	unsigned long tval;
+	u64           cnt;
+	u64           cval;
+
+	ctrl = arch_timer_reg_read(access, ARCH_TIMER_REG_CTRL, clk);
+	ctrl |= ARCH_TIMER_CTRL_ENABLE;
+	ctrl &= ~ARCH_TIMER_CTRL_IT_MASK;
+
+	/* sun50i timer maybe imprecise,
+	 * we should try to fix this.
+	 */
+	while (retry < ARCH_VCNT_TRY_MAX_TIME) {
+		if (access == ARCH_TIMER_PHYS_ACCESS) {
+			cnt = arch_counter_get_cntpct();
+			arch_timer_reg_write(access, ARCH_TIMER_REG_TVAL, evt, clk);
+			cval = arch_timer_reg_read_cval(access);
+		} else {
+			cnt = arch_counter_get_cntvct();
+			arch_timer_reg_write(access, ARCH_TIMER_REG_TVAL, evt, clk);
+			cval = arch_timer_reg_read_cval(access);
+		}
 
+		tval = cval - cnt;
+		if ((tval - evt) <= ARCH_CVAL_MAX_DELTA) {
+			/* set tval succeeded, let timer running */
+			arch_timer_reg_write(access, ARCH_TIMER_REG_CTRL, ctrl, clk);
+			return;
+		}
+		/* tval set value error, try again */
+		retry++;
+	}
+	/* set tval fail, just let timer running */
+	pr_warn("notice: set tval failed.\n");
+	arch_timer_reg_write(access, ARCH_TIMER_REG_CTRL, ctrl, clk);
+}
+#else
 static __always_inline void set_next_event(const int access, unsigned long evt,
 					   struct clock_event_device *clk)
 {
@@ -280,6 +324,7 @@ static __always_inline void set_next_eve
 	arch_timer_reg_write(access, ARCH_TIMER_REG_TVAL, evt, clk);
 	arch_timer_reg_write(access, ARCH_TIMER_REG_CTRL, ctrl, clk);
 }
+#endif /* CONFIG_ARCH_SUN50I */
 
 #ifdef CONFIG_FSL_ERRATUM_A008585
 static __always_inline void fsl_a008585_set_next_event(const int access,
@@ -449,7 +494,10 @@ static void arch_counter_set_user_access
 			| ARCH_TIMER_USR_PCT_ACCESS_EN);
 
 	/* Enable user access to the virtual counter */
-	cntkctl |= ARCH_TIMER_USR_VCT_ACCESS_EN;
+	if (IS_ENABLED(CONFIG_ARM_ARCH_TIMER_VCT_ACCESS))
+		cntkctl |= ARCH_TIMER_USR_VCT_ACCESS_EN;
+	else
+		cntkctl &= ~ARCH_TIMER_USR_VCT_ACCESS_EN;
 
 	arch_timer_set_cntkctl(cntkctl);
 }
