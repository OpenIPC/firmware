diff -drupN a/drivers/video/fbdev/sunxi/disp2/disp/de/lowlevel_v3x/disp_al.h b/drivers/video/fbdev/sunxi/disp2/disp/de/lowlevel_v3x/disp_al.h
--- a/drivers/video/fbdev/sunxi/disp2/disp/de/lowlevel_v3x/disp_al.h	1970-01-01 03:00:00.000000000 +0300
+++ b/drivers/video/fbdev/sunxi/disp2/disp/de/lowlevel_v3x/disp_al.h	2022-06-12 05:28:14.000000000 +0300
@@ -0,0 +1,132 @@
+/*
+ * Allwinner SoCs display driver.
+ *
+ * Copyright (C) 2016 Allwinner.
+ *
+ * This file is licensed under the terms of the GNU General Public
+ * License version 2.  This program is licensed "as is" without any
+ * warranty of any kind, whether express or implied.
+ */
+
+#ifndef _DISP_AL_H_
+#define _DISP_AL_H_
+
+#include "../include.h"
+#include "de_feat.h"
+#include "de_hal.h"
+#include "de_enhance.h"
+#include "de_wb.h"
+#include "de_smbl.h"
+#include "de_csc.h"
+#include "de_lcd.h"
+#if defined(SUPPORT_DSI)
+#include "de_dsi.h"
+#endif
+#include "de_clock.h"
+#include "de_rtmx.h"
+
+struct lcd_clk_info {
+	enum disp_lcd_if lcd_if;
+	int tcon_div;
+	int lcd_div;
+	int dsi_div;
+	int dsi_rate;
+};
+
+int disp_al_manager_init(unsigned int disp);
+int disp_al_manager_exit(unsigned int disp);
+extern int disp_al_manager_apply(unsigned int disp,
+				 struct disp_manager_data *data);
+extern int disp_al_layer_apply(unsigned int disp,
+			       struct disp_layer_config_data *data,
+			       unsigned int layer_num);
+extern int disp_init_al(struct disp_bsp_init_para *para);
+extern int disp_al_manager_sync(unsigned int disp);
+extern int disp_al_manager_update_regs(unsigned int disp);
+int disp_al_manager_query_irq(unsigned int disp);
+int disp_al_manager_enable_irq(unsigned int disp);
+int disp_al_manager_disable_irq(unsigned int disp);
+
+int disp_al_enhance_apply(unsigned int disp,
+			  struct disp_enhance_config *config);
+int disp_al_enhance_update_regs(unsigned int disp);
+int disp_al_enhance_sync(unsigned int disp);
+int disp_al_enhance_tasklet(unsigned int disp);
+
+int disp_al_smbl_apply(unsigned int disp, struct disp_smbl_info *info);
+int disp_al_smbl_update_regs(unsigned int disp);
+int disp_al_smbl_sync(unsigned int disp);
+int disp_al_smbl_get_status(unsigned int disp);
+int disp_al_smbl_tasklet(unsigned int disp);
+
+int disp_al_capture_init(unsigned int disp);
+int disp_al_capture_exit(unsigned int disp);
+int disp_al_capture_sync(u32 disp);
+int disp_al_capture_apply(unsigned int disp, struct disp_capture_config *cfg);
+int disp_al_capture_get_status(unsigned int disp);
+
+int disp_al_lcd_cfg(u32 screen_id, struct disp_panel_para *panel,
+		    struct panel_extend_para *extend_panel);
+int disp_al_lcd_cfg_ext(u32 screen_id, struct panel_extend_para *extend_panel);
+int disp_al_lcd_enable(u32 screen_id, struct disp_panel_para *panel);
+int disp_al_lcd_disable(u32 screen_id, struct disp_panel_para *panel);
+int disp_al_lcd_query_irq(u32 screen_id, enum __lcd_irq_id_t irq_id,
+			  struct disp_panel_para *panel);
+int disp_al_lcd_tri_busy(u32 screen_id, struct disp_panel_para *panel);
+int disp_al_lcd_tri_start(u32 screen_id, struct disp_panel_para *panel);
+int disp_al_lcd_io_cfg(u32 screen_id, u32 enable, struct disp_panel_para *panel);
+int disp_al_lcd_get_cur_line(u32 screen_id, struct disp_panel_para *panel);
+int disp_al_lcd_get_start_delay(u32 screen_id, struct disp_panel_para *panel);
+int disp_al_lcd_get_clk_info(u32 screen_id, struct lcd_clk_info *info,
+			     struct disp_panel_para *panel);
+int disp_al_lcd_enable_irq(u32 screen_id, enum __lcd_irq_id_t irq_id,
+			   struct disp_panel_para *panel);
+int disp_al_lcd_disable_irq(u32 screen_id, enum __lcd_irq_id_t irq_id,
+			    struct disp_panel_para *panel);
+
+int disp_al_hdmi_enable(u32 screen_id);
+int disp_al_hdmi_disable(u32 screen_id);
+int disp_al_hdmi_cfg(u32 screen_id, struct disp_video_timings *video_info);
+int disp_al_hdmi_irq_enable(u32 screen_id);
+int disp_al_hdmi_irq_disable(u32 screen_id);
+
+int disp_al_tv_enable(u32 screen_id);
+int disp_al_tv_disable(u32 screen_id);
+int disp_al_tv_cfg(u32 screen_id, struct disp_video_timings *video_info);
+int disp_al_tv_irq_enable(u32 screen_id);
+int disp_al_tv_irq_disable(u32 screen_id);
+#if defined(SUPPORT_VGA)
+int disp_al_vga_enable(u32 screen_id);
+int disp_al_vga_disable(u32 screen_id);
+int disp_al_vga_cfg(u32 screen_id, struct disp_video_timings *video_info);
+int disp_al_vga_irq_enable(u32 screen_id);
+int disp_al_vga_irq_disable(u32 screen_id);
+#endif
+int disp_al_vdevice_cfg(u32 screen_id, struct disp_video_timings *video_info,
+			struct disp_vdevice_interface_para *para,
+			u8 config_tcon_only);
+int disp_al_vdevice_enable(u32 screen_id);
+int disp_al_vdevice_disable(u32 screen_id);
+
+int disp_al_device_get_cur_line(u32 screen_id);
+int disp_al_device_get_start_delay(u32 screen_id);
+int disp_al_device_query_irq(u32 screen_id);
+int disp_al_device_enable_irq(u32 screen_id);
+int disp_al_device_disable_irq(u32 screen_id);
+int disp_al_device_get_status(u32 screen_id);
+int disp_al_device_src_select(u32 screen_id, u32 src);
+
+int disp_al_get_fb_info(unsigned int sel, struct disp_layer_info *info);
+int disp_al_get_display_size(unsigned int sel, unsigned int *width,
+			     unsigned int *height);
+#if defined(SUPPORT_EDP)
+int disp_al_edp_cfg(u32 screen_id, u32 fps, u32 edp_index);
+int disp_al_edp_disable(u32 screen_id);
+#endif /*endif support_EDP */
+
+int disp_exit_al(void);
+bool disp_al_get_direct_show_state(unsigned int disp);
+void disp_al_show_builtin_patten(u32 hwdev_index, u32 patten);
+
+
+#endif
