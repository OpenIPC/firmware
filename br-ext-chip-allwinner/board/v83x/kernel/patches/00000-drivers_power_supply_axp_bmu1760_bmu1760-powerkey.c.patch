diff -drupN a/drivers/power/supply/axp/bmu1760/bmu1760-powerkey.c b/drivers/power/supply/axp/bmu1760/bmu1760-powerkey.c
--- a/drivers/power/supply/axp/bmu1760/bmu1760-powerkey.c	1970-01-01 03:00:00.000000000 +0300
+++ b/drivers/power/supply/axp/bmu1760/bmu1760-powerkey.c	2022-06-12 05:28:14.000000000 +0300
@@ -0,0 +1,225 @@
+/*
+ * drivers/power/axp/bmu1760/bmu1760-powerkey.c
+ * (C) Copyright 2010-2017
+ * Allwinner Technology Co., Ltd. <www.allwinnertech.com>
+ *
+ * powerkey driver of bmu1760
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ */
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/types.h>
+#include <linux/device.h>
+#include <linux/workqueue.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/power_supply.h>
+#include <linux/delay.h>
+#include <linux/kthread.h>
+#include <linux/slab.h>
+#include <linux/debugfs.h>
+#include <linux/seq_file.h>
+#include <linux/input.h>
+#include "../axp-core.h"
+#include "../axp-powerkey.h"
+#include "bmu1760.h"
+
+static int axp_powerkey_probe(struct platform_device *pdev)
+{
+	struct axp_dev *axp_dev = dev_get_drvdata(pdev->dev.parent);
+	struct axp_powerkey_info *info;
+	struct input_dev *powerkey_dev;
+	int err = 0, i, irq, ret;
+	struct axp_regmap *map = axp_dev->regmap;
+	u8 val;
+
+	if (axp_dev->is_slave)
+		return -EPERM;
+
+	if (pdev->dev.of_node) {
+		/* get dt and sysconfig */
+		ret = axp_powerkey_dt_parse(pdev->dev.of_node, &bmu1760_config);
+		if (ret) {
+			pr_err("%s parse device tree err\n", __func__);
+			return -EINVAL;
+		}
+	} else {
+		pr_err("bmu1760 powerkey device tree err!\n");
+		return -EBUSY;
+	}
+
+	info = kzalloc(sizeof(struct axp_powerkey_info), GFP_KERNEL);
+	if (!info)
+		return -ENOMEM;
+
+	info->chip = axp_dev;
+
+	/* register input device */
+	powerkey_dev = input_allocate_device();
+	if (!powerkey_dev) {
+		pr_err("alloc powerkey input device error\n");
+		goto out;
+	}
+
+	powerkey_dev->name = pdev->name;
+	powerkey_dev->phys = "m1kbd/input2";
+	powerkey_dev->id.bustype = BUS_HOST;
+	powerkey_dev->id.vendor = 0x0001;
+	powerkey_dev->id.product = 0x0001;
+	powerkey_dev->id.version = 0x0100;
+	powerkey_dev->open = NULL;
+	powerkey_dev->close = NULL;
+	powerkey_dev->dev.parent = &pdev->dev;
+	set_bit(EV_KEY, powerkey_dev->evbit);
+	set_bit(EV_REL, powerkey_dev->evbit);
+	set_bit(KEY_POWER, powerkey_dev->keybit);
+
+	err = input_register_device(powerkey_dev);
+	if (err) {
+		pr_err("Unable to Register the axp_powerkey\n");
+		goto out_reg;
+	}
+
+	info->idev = powerkey_dev;
+
+	for (i = 0; i < ARRAY_SIZE(axp_powerkey_irq); i++) {
+		irq = platform_get_irq_byname(pdev, axp_powerkey_irq[i].name);
+		if (irq < 0)
+			continue;
+
+		err = axp_request_irq(axp_dev, irq,
+				axp_powerkey_irq[i].isr, info);
+		if (err != 0) {
+			dev_err(&pdev->dev, "failed to request %s IRQ %d: %d\n"
+					, axp_powerkey_irq[i].name, irq, err);
+			goto out_irq;
+		}
+
+		dev_dbg(&pdev->dev, "Requested %s IRQ %d: %d\n",
+				axp_powerkey_irq[i].name, irq, err);
+	}
+
+	platform_set_drvdata(pdev, info);
+
+	axp_regmap_read(map, BMU1760_POK_SET, &val);
+	if (bmu1760_config.pmu_powkey_on_time < 628)
+		val &= 0xf3;
+	else if (bmu1760_config.pmu_powkey_on_time < 1500) {
+		val &= 0xf3;
+		val |= 0x04;
+	} else if (bmu1760_config.pmu_powkey_on_time < 2500) {
+		val &= 0xf3;
+		val |= 0x08;
+	} else {
+		val &= 0xf3;
+		val |= 0x0c;
+	}
+	axp_regmap_write(map, BMU1760_POK_SET, val);
+
+	/* pok long time set*/
+	if (bmu1760_config.pmu_powkey_long_time < 1000)
+		bmu1760_config.pmu_powkey_long_time = 1000;
+
+	if (bmu1760_config.pmu_powkey_long_time > 2500)
+		bmu1760_config.pmu_powkey_long_time = 2500;
+
+	axp_regmap_read(map, BMU1760_POK_SET, &val);
+	val &= 0x7f;
+	val |= (((bmu1760_config.pmu_powkey_long_time - 1000) / 500) << 6);
+	axp_regmap_write(map, BMU1760_POK_SET, val);
+
+	/* pek offlevel poweroff time set*/
+	axp_regmap_read(map, BMU1760_POK_SET, &val);
+	if (bmu1760_config.pmu_powkey_off_time < 4500)
+		val &= 0xfc;
+	else if (bmu1760_config.pmu_powkey_off_time < 6500) {
+		val &= 0xfc;
+		val |= 0x01;
+	} else if (bmu1760_config.pmu_powkey_off_time < 8500) {
+		val &= 0xfc;
+		val |= 0x02;
+	} else {
+		val &= 0xfc;
+		val |= 0x03;
+	}
+	axp_regmap_write(map, BMU1760_POK_SET, val);
+#if 0
+	/*Init offlevel restart or not */
+	if (bmu1760_config.pmu_powkey_off_func)
+		axp_regmap_set_bits(map, BMU1760_POK_SET, 0x04); /* restart */
+	else
+		axp_regmap_clr_bits(map, BMU1760_POK_SET, 0x04); /* not restart*/
+
+	/* pek offlevel time set */
+	if (bmu1760_config.pmu_powkey_off_time < 4000)
+		bmu1760_config.pmu_powkey_off_time = 4000;
+
+	if (bmu1760_config.pmu_powkey_off_time > 10000)
+		bmu1760_config.pmu_powkey_off_time = 10000;
+
+	axp_regmap_read(map, BMU1760_POK_SET, &val);
+	val &= 0xfc;
+	val |= (bmu1760_config.pmu_powkey_off_time - 4000) / 2000;
+	axp_regmap_write(map, BMU1760_POK_SET, val);
+#endif
+	return 0;
+
+out_irq:
+	for (i = i - 1; i >= 0; i--) {
+		irq = platform_get_irq_byname(pdev, axp_powerkey_irq[i].name);
+		if (irq < 0)
+			continue;
+		axp_free_irq(axp_dev, irq);
+	}
+out_reg:
+	input_free_device(powerkey_dev);
+out:
+	kfree(info);
+	return err;
+}
+
+static int axp_powerkey_remove(struct platform_device *pdev)
+{
+	int i, irq;
+	struct axp_powerkey_info *info = platform_get_drvdata(pdev);
+	struct axp_dev *axp_dev = dev_get_drvdata(pdev->dev.parent);
+
+	for (i = 0; i < ARRAY_SIZE(axp_powerkey_irq); i++) {
+		irq = platform_get_irq_byname(pdev, axp_powerkey_irq[i].name);
+		if (irq < 0)
+			continue;
+		axp_free_irq(axp_dev, irq);
+	}
+
+	input_unregister_device(info->idev);
+	kfree(info);
+
+	return 0;
+}
+
+static const struct of_device_id axp_powerkey_dt_ids[] = {
+	{ .compatible = "bmu1760-powerkey", },
+	{},
+};
+MODULE_DEVICE_TABLE(of, axp_powerkey_dt_ids);
+
+static struct platform_driver axp_powerkey_driver = {
+	.driver = {
+		.name = "bmu1760-powerkey",
+		.of_match_table = axp_powerkey_dt_ids,
+	},
+	.probe  = axp_powerkey_probe,
+	.remove = axp_powerkey_remove,
+};
+
+module_platform_driver(axp_powerkey_driver);
+
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("onkey Driver for bmu1760 PMIC");
+MODULE_AUTHOR("Qin <qinyongshen@allwinnertech.com>");
