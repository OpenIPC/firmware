diff -drupN a/arch/x86/include/asm/nospec-branch.h b/arch/x86/include/asm/nospec-branch.h
--- a/arch/x86/include/asm/nospec-branch.h	2018-08-06 17:23:04.000000000 +0300
+++ b/arch/x86/include/asm/nospec-branch.h	2022-06-12 05:28:14.000000000 +0300
@@ -217,14 +217,6 @@ enum spectre_v2_mitigation {
 	SPECTRE_V2_IBRS,
 };
 
-/* The Speculative Store Bypass disable variants */
-enum ssb_mitigation {
-	SPEC_STORE_BYPASS_NONE,
-	SPEC_STORE_BYPASS_DISABLE,
-	SPEC_STORE_BYPASS_PRCTL,
-	SPEC_STORE_BYPASS_SECCOMP,
-};
-
 extern char __indirect_thunk_start[];
 extern char __indirect_thunk_end[];
 
@@ -249,51 +241,19 @@ static inline void vmexit_fill_RSB(void)
 #endif
 }
 
-static __always_inline
-void alternative_msr_write(unsigned int msr, u64 val, unsigned int feature)
-{
-	asm volatile(ALTERNATIVE("", "wrmsr", %c[feature])
-		: : "c" (msr),
-		    "a" ((u32)val),
-		    "d" ((u32)(val >> 32)),
-		    [feature] "i" (feature)
-		: "memory");
-}
-
 static inline void indirect_branch_prediction_barrier(void)
 {
-	u64 val = PRED_CMD_IBPB;
-
-	alternative_msr_write(MSR_IA32_PRED_CMD, val, X86_FEATURE_USE_IBPB);
+	asm volatile(ALTERNATIVE("",
+				 "movl %[msr], %%ecx\n\t"
+				 "movl %[val], %%eax\n\t"
+				 "movl $0, %%edx\n\t"
+				 "wrmsr",
+				 X86_FEATURE_IBPB)
+		     : : [msr] "i" (MSR_IA32_PRED_CMD),
+			 [val] "i" (PRED_CMD_IBPB)
+		     : "eax", "ecx", "edx", "memory");
 }
 
-/* The Intel SPEC CTRL MSR base value cache */
-extern u64 x86_spec_ctrl_base;
-
-/*
- * With retpoline, we must use IBRS to restrict branch prediction
- * before calling into firmware.
- *
- * (Implemented as CPP macros due to header hell.)
- */
-#define firmware_restrict_branch_speculation_start()			\
-do {									\
-	u64 val = x86_spec_ctrl_base | SPEC_CTRL_IBRS;			\
-									\
-	preempt_disable();						\
-	alternative_msr_write(MSR_IA32_SPEC_CTRL, val,			\
-			      X86_FEATURE_USE_IBRS_FW);			\
-} while (0)
-
-#define firmware_restrict_branch_speculation_end()			\
-do {									\
-	u64 val = x86_spec_ctrl_base;					\
-									\
-	alternative_msr_write(MSR_IA32_SPEC_CTRL, val,			\
-			      X86_FEATURE_USE_IBRS_FW);			\
-	preempt_enable();						\
-} while (0)
-
 #endif /* __ASSEMBLY__ */
 
 /*
