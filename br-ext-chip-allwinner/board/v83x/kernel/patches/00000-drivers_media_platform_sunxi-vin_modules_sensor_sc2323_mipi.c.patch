diff -drupN a/drivers/media/platform/sunxi-vin/modules/sensor/sc2323_mipi.c b/drivers/media/platform/sunxi-vin/modules/sensor/sc2323_mipi.c
--- a/drivers/media/platform/sunxi-vin/modules/sensor/sc2323_mipi.c	1970-01-01 03:00:00.000000000 +0300
+++ b/drivers/media/platform/sunxi-vin/modules/sensor/sc2323_mipi.c	2022-06-12 05:28:14.000000000 +0300
@@ -0,0 +1,1648 @@
+/*
+ * A V4L2 driver for sc2323 Raw cameras.
+ *
+ * Copyright (c) 2017 by Allwinnertech Co., Ltd.  http://www.allwinnertech.com
+ *
+ * Authors:  Zhao Wei <zhaowei@allwinnertech.com>
+ *    Liang WeiJie <liangweijie@allwinnertech.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/i2c.h>
+#include <linux/delay.h>
+#include <linux/videodev2.h>
+#include <linux/clk.h>
+#include <media/v4l2-device.h>
+#include <media/v4l2-mediabus.h>
+#include <linux/io.h>
+
+#include "camera.h"
+#include "sensor_helper.h"
+
+MODULE_AUTHOR("cwh");
+MODULE_DESCRIPTION("A low-level driver for SC2323_MIPI sensors");
+MODULE_LICENSE("GPL");
+
+#define MCLK              (27*1000*1000)
+#define V4L2_IDENT_SENSOR 0xcb08
+
+/*
+ * Our nominal (default) frame rate.
+ */
+
+#define SENSOR_FRAME_RATE 30
+
+#define HDR_RATIO 16
+
+/*
+ * The SC2323_MIPI i2c address
+ */
+#define I2C_ADDR 0x60
+
+#define SENSOR_NUM 0x2
+#define SENSOR_NAME "sc2323_mipi"
+#define SENSOR_NAME_2 "sc2323_mipi_2"
+
+/*
+ * The default register settings
+ */
+
+static struct regval_list sensor_default_regs[] = {
+
+};
+static struct regval_list sensor_1080p12b60_regs[] = {
+	{0x0103, 0x01},
+	{0x0100, 0x00},
+
+	{0x36e9, 0x80},
+	{0x36f9, 0x80},
+
+	/*digital init*/
+	{0x300a, 0x24},
+	{0x4500, 0x18},/*Test mode changed from random number to grayscale gradient*/
+	{0x3310, 0x08},/*pchg_tx gap*/
+	{0x3362, 0x72},/*Default short exposure tx width 3360[7:0]*/
+	{0x3038, 0x22},
+	{0x3220, 0x10},/*In flip mode, BLC does not make flips.*/
+	{0x3c14, 0x00},/*digital HDR unpdate*/
+	{0x3c10, 0x00},
+	{0x3c11, 0x00},
+	{0x3c12, 0x80},
+
+	{0x33e0, 0x60},/*a0*/
+	{0x33e1, 0x08},
+
+	{0x33e2, 0x38},
+	{0x33e3, 0x18},/*10*/
+	{0x33e4, 0x18},/*18*/
+
+	{0x33e5, 0x10},/*10*/
+	{0x33e6, 0x06},/*10*/
+	{0x33e7, 0x02},/*10*/
+
+	{0x33e8, 0x38},
+	{0x33e9, 0x10},
+	{0x33ea, 0x0c},
+
+	{0x33eb, 0x10},
+	{0x33ec, 0x04}, /*10*/
+	{0x33ed, 0x02}, /*10*/
+
+	{0x33ee, 0xa0},
+	{0x33ef, 0x08},
+	{0x33f4, 0x18},
+	{0x33f5, 0x10},
+	{0x33f6, 0x0c},
+	{0x33f7, 0x10},
+	{0x33f8, 0x06},
+	{0x33f9, 0x02},
+	{0x33fa, 0x18},
+	{0x33fb, 0x10},
+	{0x33fc, 0x0c},
+	{0x33fd, 0x10},
+	{0x33fe, 0x04},
+	{0x33ff, 0x02},
+	{0x391b, 0x83},  /*blc out of range setting 0311 need digital update!*/
+
+	{0x336d, 0x03},/*bit[1] count rst/keep/up st sel 1: 3302 0:3301*/
+	{0x335e, 0x02},/*count rst go hi*/
+	{0x335f, 0x04},/*count rst go lo*/
+	{0x337c, 0x06},/*count keep go hi*/
+	{0x337d, 0x0a},/*count keep go lo*/
+	{0x33a2, 0x08},/*count up go lo*/
+	//close  dvp}
+	{0x3000, 0x00},/*6'h00!*/
+	{0x3001, 0x00},
+	{0x3002, 0x00},
+
+	//open  mipi}
+	{0x301c, 0x78},
+	{0x3018, 0x32},
+	{0x301a, 0xf0},
+	//0x303 3,0x}20,/*HDR*/
+	{0x3c00, 0x41},
+	{0x300a, 0x20},
+	{0x3030, 0x01},/*sysclk=74.25M*/
+	{0x303f, 0x01},
+	{0x3037, 0x00},
+	{0x3031, 0x0c},
+
+	{0x330a, 0x01},
+	{0x330b, 0x58},/*[f8,174] 0311 140高增益不饱和，14c是blksun*/
+
+	{0x3306, 0x78},/*[68,] 0312*/
+
+	{0x3e01, 0x46},
+	{0x3e02, 0x20},/*1/60s expo*/
+
+	{0x3635, 0x20},/*2.8V TXVDD*/
+	{0x363b, 0xe4},/*bypass HVDD*/
+
+	{0x3637, 0x15},/*4K fullwell*/
+
+	/*60fps*/
+	{0x3641, 0x0c},
+	{0x36eb, 0x07},/*mipiclk=891M 2lane*/
+	{0x4837, 0x11},
+	/*0x36f 9,0x}51,*/
+	{0x36fb, 0x08},/*sysclk=74.25M*/
+	{0x36fc, 0x00},
+	{0x36fd, 0x34},/*countclk=668.25M*/
+	{0x3641, 0x00},
+	{0x3304, 0x50},
+	{0x331e, 0x49},
+	{0x3638, 0x08},
+	{0x3309, 0x68},
+	{0x331f, 0x61},
+	{0x3356, 0x20},
+	{0x33af, 0x28},
+	{0x3301, 0x20},
+	{0x3308, 0x10},
+	{0x3213, 0x04},
+	{0x3211, 0x0c},
+	{0x3203, 0x02},/*for lighting*/
+	{0x3207, 0x4d},
+	{0x360f, 0x05},
+	{0x367a, 0x08},
+	{0x367b, 0x38},
+	{0x3671, 0xe6},
+	{0x3672, 0x06},
+	{0x3673, 0x16},
+	{0x3670, 0x08},
+	{0x369c, 0x08},
+	{0x369d, 0x38},
+	{0x3690, 0x44},
+	{0x3691, 0x43},
+	{0x3692, 0x44},
+	{0x3670, 0x0a},
+	{0x367c, 0x08},
+	{0x367d, 0x38},
+	{0x3674, 0xc0},
+	{0x3675, 0x50},
+	{0x3676, 0x50},
+	{0x3364, 0x17},
+	{0x3301, 0x0a},
+	{0x3393, 0x18},
+	{0x3394, 0x80},
+	{0x3395, 0x80},
+	{0x3390, 0x08},
+	{0x3391, 0x18},
+	{0x3392, 0x38},
+	{0x3670, 0x4a},
+	{0x36a2, 0x08},
+	{0x36a3, 0x18},
+	{0x3699, 0x00},
+	{0x369a, 0x0f},
+	{0x369b, 0x1f},
+	{0x360f, 0x15},
+	{0x36bd, 0x18},
+	{0x36be, 0x18},
+	{0x36b7, 0x88},
+	{0x36b8, 0x08},
+	{0x36b9, 0x08},
+	{0x301f, 0x01},
+	{0x3902, 0xc5},
+	{0x391b, 0x83},
+	{0x3271, 0x18},
+	{0x3273, 0x1b},
+	{0x3275, 0x18},
+	{0x3237, 0x1b},
+	{0x3231, 0x01},
+	{0x3259, 0x02},
+	{0x3933, 0x1f},
+	{0x3934, 0xff},
+	{0x39c5, 0x07},
+	{0x39e8, 0x07},
+	{0x39c8, 0x00},
+	{0x39bf, 0x00},
+	{0x39c0, 0xda},
+	{0x39c1, 0x00},
+	{0x39a4, 0x0a},
+	{0x39a5, 0x18},
+	{0x39a6, 0x32},
+	{0x39a7, 0x50},
+	{0x39a8, 0x40},
+	{0x39a9, 0x20},
+	{0x39aa, 0x10},
+	{0x39ab, 0x0a},
+	{0x3980, 0x03},
+	{0x3981, 0x00},
+	{0x3982, 0x03},
+	{0x3983, 0x80},
+	{0x3984, 0x03},
+	{0x3985, 0xc0},
+	{0x3986, 0x03},
+	{0x3987, 0xf0},
+	{0x3988, 0x00},
+	{0x3989, 0x0b},
+	{0x398a, 0x00},
+	{0x398b, 0x30},
+	{0x398c, 0x00},
+	{0x398d, 0x70},
+	{0x398e, 0x00},
+	{0x398f, 0xb0},
+	{0x3990, 0x01},
+	{0x3991, 0x40},
+	{0x39b6, 0x07},
+	{0x39b7, 0x78},
+	{0x39b8, 0x00},
+	{0x39ac, 0x04},
+	{0x39ad, 0x0c},
+	{0x39ae, 0x14},
+	{0x39af, 0x20},
+	{0x39b0, 0x18},
+	{0x39b1, 0x0c},
+	{0x39b2, 0x08},
+	{0x39b3, 0x04},
+	{0x3992, 0x03},
+	{0x3993, 0x80},
+	{0x3994, 0x03},
+	{0x3995, 0xc8},
+	{0x3996, 0x03},
+	{0x3997, 0xf0},
+	{0x3998, 0x03},
+	{0x3999, 0xf0},
+	{0x399a, 0x03},
+	{0x399b, 0xfe},
+	{0x399c, 0x00},
+	{0x399d, 0x10},
+	{0x399e, 0x00},
+	{0x399f, 0x28},
+	{0x39a0, 0x00},
+	{0x39a1, 0x58},
+	{0x39a2, 0x00},
+	{0x39a3, 0xc0},
+	{0x39db, 0x0d},
+	{0x39dc, 0x1e},
+	{0x39de, 0x06},
+	{0x39df, 0xa0},
+	{0x39e0, 0x00},
+	{0x39e1, 0x0f},
+	{0x39e2, 0x01},
+	{0x39e3, 0x5f},
+	{0x39e4, 0x01},
+	{0x39e5, 0xb7},
+	{0x39ee, 0x00},
+	{0x39b5, 0x60},
+	{0x5784, 0x08},
+	{0x5785, 0x04},
+	{0x5787, 0x06},
+	{0x5788, 0x06},
+	{0x5789, 0x00},
+	{0x578a, 0x06},
+	{0x578b, 0x06},
+	{0x578c, 0x00},
+	{0x5790, 0x10},
+	{0x5791, 0x10},
+	{0x5792, 0x00},
+	{0x5793, 0x10},
+	{0x5794, 0x10},
+	{0x5795, 0x00},
+	{0x57c4, 0x08},
+	{0x57c5, 0x04},
+	{0x57c7, 0x06},
+	{0x57c8, 0x06},
+	{0x57c9, 0x00},
+	{0x57ca, 0x06},
+	{0x57cb, 0x06},
+	{0x57cc, 0x00},
+	{0x57d0, 0x10},
+	{0x57d1, 0x10},
+	{0x57d2, 0x00},
+	{0x57d3, 0x10},
+	{0x57d4, 0x10},
+	{0x57d5, 0x00},
+	{0x3038, 0x66},
+	{0x320c, 0x04},
+	{0x320d, 0x4c},
+	{0x320e, 0x04},
+	{0x320f, 0x65},
+	/*80x3106,0x01,
+	0x36e9,0x20,
+	0x36ea,0x35,
+	0x36eb,0x07,
+	0x36ec,0x03,
+	0x36ed,0x34,
+	0x36f9,0x51,
+	0x36fa,0x35,
+	0x36fb,0x08,
+	0x36fc,0x00,
+	0x36fd,0x34,
+	0x4837,0x11,
+	0x331e,0x49,
+	0x331f,0x61,
+	0x3304,0x50,
+	0x3309,0x68,
+	0x3305,0x00,
+	0x3306,0x78,
+	0x330a,0x01,*/
+	{0x330b, 0x60},
+	{0x3e01, 0x46},
+	{0x3e02, 0x10},
+	/*SHDR VC
+	0x4b01,0x11,
+	0x3220,0x50,
+	0x3e23,0x01,
+	0x320e,0x08,
+	0x320f,0xca,
+	0x3250,0x3f,
+	0x3368,0x04,
+	0x3369,0x60,
+	0x336a,0x01,
+	0x336b,0x00,
+	0x4853,0xfd,
+	0x3033,0x20,
+	0x4814,0x6a,
+	0x4851,0x1b,
+	0x3905,0x98,
+	SHDR VC end*/
+	{0x301f, 0x01},
+	{0x3e01, 0x46},
+	{0x3e02, 0x10},
+	{0x36e9, 0x20},
+	{0x36f9, 0x51},
+	{0x0100, 0x01},
+};
+static struct regval_list sensor_1080p12b30_regs[] = {
+	{0x0103, 0x01},
+	{0x0100, 0x00},
+	{0x36e9, 0x80},
+	{0x36f9, 0x80},
+	/*digit alinit*/
+	{0x300a, 0x24},
+	{0x4500, 0x18},
+	{0x3310, 0x08},
+	{0x3362, 0x72},
+	{0x3038, 0x22},
+	{0x3220, 0x10},
+	{0x3c14, 0x00},
+	{0x3c10, 0x00},
+	{0x3c11, 0x00},
+	{0x3c12, 0x80},
+	{0x33e0, 0x60},
+	{0x33e1, 0x08},
+	{0x33e2, 0x38},
+	{0x33e3, 0x18},
+	{0x33e4, 0x18},
+	{0x33e5, 0x10},
+	{0x33e6, 0x06},
+	{0x33e7, 0x02},
+	{0x33e8, 0x38},
+	{0x33e9, 0x10},
+	{0x33ea, 0x0c},
+	{0x33eb, 0x10},
+	{0x33ec, 0x04},
+	{0x33ed, 0x02},
+	{0x33ee, 0xa0},
+	{0x33ef, 0x08},
+	{0x33f4, 0x18},
+	{0x33f5, 0x10},
+	{0x33f6, 0x0c},
+	{0x33f7, 0x10},
+	{0x33f8, 0x06},
+	{0x33f9, 0x02},
+	{0x33fa, 0x18},
+	{0x33fb, 0x10},
+	{0x33fc, 0x0c},
+	{0x33fd, 0x10},
+	{0x33fe, 0x04},
+	{0x33ff, 0x02},
+	{0x391b, 0x83},
+	{0x336d, 0x03},
+	{0x335e, 0x02},
+	{0x335f, 0x04},
+	{0x337c, 0x06},
+	{0x337d, 0x0a},
+	{0x33a2, 0x08},
+	{0x3000, 0x00},
+	{0x3001, 0x00},
+	{0x3002, 0x00},
+	{0x301c, 0x78},
+	{0x3018, 0x32},
+	{0x301a, 0xf0},
+	{0x3c00, 0x41},
+	{0x300a, 0x20},
+	{0x3030, 0x01},
+	{0x303f, 0x01},
+	{0x3037, 0x00},
+	{0x3031, 0x0c},
+	{0x330a, 0x01},
+	{0x330b, 0x58},
+	{0x3306, 0x78},
+	{0x3e01, 0x46},
+	{0x3e02, 0x20},
+	{0x3635, 0x20},
+	{0x363b, 0xe4},
+	{0x3637, 0x15},
+	{0x3641, 0x0c},
+	{0x36eb, 0x07},
+	{0x4837, 0x11},
+	{0x36fb, 0x08},
+	{0x36fc, 0x00},
+	{0x36fd, 0x34},
+	{0x3641, 0x00},
+	{0x3304, 0x50},
+	{0x331e, 0x49},
+	{0x3638, 0x08},
+	{0x3309, 0x68},
+	{0x331f, 0x61},
+	{0x3356, 0x20},
+	{0x33af, 0x28},
+	{0x3301, 0x20},
+	{0x3308, 0x10},
+	{0x3213, 0x04},
+	{0x3211, 0x0c},
+	{0x3203, 0x02},
+	{0x3207, 0x4d},
+	{0x360f, 0x05},
+	{0x367a, 0x08},
+	{0x367b, 0x38},
+	{0x3671, 0xe6},
+	{0x3672, 0x06},
+	{0x3673, 0x16},
+	{0x3670, 0x08},
+	{0x369c, 0x08},
+	{0x369d, 0x38},
+	{0x3690, 0x44},
+	{0x3691, 0x43},
+	{0x3692, 0x44},
+	{0x3670, 0x0a},
+	{0x367c, 0x08},
+	{0x367d, 0x38},
+	{0x3674, 0xc0},
+	{0x3675, 0x50},
+	{0x3676, 0x50},
+	{0x3364, 0x17},
+	{0x3301, 0x0a},
+	{0x3393, 0x18},
+	{0x3394, 0x80},
+	{0x3395, 0x80},
+	{0x3390, 0x08},
+	{0x3391, 0x18},
+	{0x3392, 0x38},
+	{0x3670, 0x4a},
+	{0x36a2, 0x08},
+	{0x36a3, 0x18},
+	{0x3699, 0x00},
+	{0x369a, 0x0f},
+	{0x369b, 0x1f},
+	{0x360f, 0x15},
+	{0x36bd, 0x18},
+	{0x36be, 0x18},
+	{0x36b7, 0x88},
+	{0x36b8, 0x08},
+	{0x36b9, 0x08},
+	{0x301f, 0x01},
+	{0x3902, 0xc5},
+	{0x391b, 0x83},
+	{0x3271, 0x18},
+	{0x3273, 0x1b},
+	{0x3275, 0x18},
+	{0x3237, 0x1b},
+	{0x3231, 0x01},
+	{0x3259, 0x02},
+	{0x3933, 0x1f},
+	{0x3934, 0xff},
+	{0x39c5, 0x07},
+	{0x39e8, 0x07},
+	{0x39c8, 0x00},
+	{0x39bf, 0x00},
+	{0x39c0, 0xda},
+	{0x39c1, 0x00},
+	{0x39a4, 0x0a},
+	{0x39a5, 0x18},
+	{0x39a6, 0x32},
+	{0x39a7, 0x50},
+	{0x39a8, 0x40},
+	{0x39a9, 0x20},
+	{0x39aa, 0x10},
+	{0x39ab, 0x0a},
+	{0x3980, 0x03},
+	{0x3981, 0x00},
+	{0x3982, 0x03},
+	{0x3983, 0x80},
+	{0x3984, 0x03},
+	{0x3985, 0xc0},
+	{0x3986, 0x03},
+	{0x3987, 0xf0},
+	{0x3988, 0x00},
+	{0x3989, 0x0b},
+	{0x398a, 0x00},
+	{0x398b, 0x30},
+	{0x398c, 0x00},
+	{0x398d, 0x70},
+	{0x398e, 0x00},
+	{0x398f, 0xb0},
+	{0x3990, 0x01},
+	{0x3991, 0x40},
+	{0x39b6, 0x07},
+	{0x39b7, 0x78},
+	{0x39b8, 0x00},
+	{0x39ac, 0x04},
+	{0x39ad, 0x0c},
+	{0x39ae, 0x14},
+	{0x39af, 0x20},
+	{0x39b0, 0x18},
+	{0x39b1, 0x0c},
+	{0x39b2, 0x08},
+	{0x39b3, 0x04},
+	{0x3992, 0x03},
+	{0x3993, 0x80},
+	{0x3994, 0x03},
+	{0x3995, 0xc8},
+	{0x3996, 0x03},
+	{0x3997, 0xf0},
+	{0x3998, 0x03},
+	{0x3999, 0xf0},
+	{0x399a, 0x03},
+	{0x399b, 0xfe},
+	{0x399c, 0x00},
+	{0x399d, 0x10},
+	{0x399e, 0x00},
+	{0x399f, 0x28},
+	{0x39a0, 0x00},
+	{0x39a1, 0x58},
+	{0x39a2, 0x00},
+	{0x39a3, 0xc0},
+	{0x39db, 0x0d},
+	{0x39dc, 0x1e},
+	{0x39de, 0x06},
+	{0x39df, 0xa0},
+	{0x39e0, 0x00},
+	{0x39e1, 0x0f},
+	{0x39e2, 0x01},
+	{0x39e3, 0x5f},
+	{0x39e4, 0x01},
+	{0x39e5, 0xb7},
+	{0x39ee, 0x00},
+	{0x39b5, 0x60},
+	{0x5784, 0x08},
+	{0x5785, 0x04},
+	{0x5787, 0x06},
+	{0x5788, 0x06},
+	{0x5789, 0x00},
+	{0x578a, 0x06},
+	{0x578b, 0x06},
+	{0x578c, 0x00},
+	{0x5790, 0x10},
+	{0x5791, 0x10},
+	{0x5792, 0x00},
+	{0x5793, 0x10},
+	{0x5794, 0x10},
+	{0x5795, 0x00},
+	{0x57c4, 0x08},
+	{0x57c5, 0x04},
+	{0x57c7, 0x06},
+	{0x57c8, 0x06},
+	{0x57c9, 0x00},
+	{0x57ca, 0x06},
+	{0x57cb, 0x06},
+	{0x57cc, 0x00},
+	{0x57d0, 0x10},
+	{0x57d1, 0x10},
+	{0x57d2, 0x00},
+	{0x57d3, 0x10},
+	{0x57d4, 0x10},
+	{0x57d5, 0x00},
+	{0x3038, 0x66},
+	{0x320c, 0x04},
+	{0x320d, 0x4c},
+	{0x320e, 0x08},
+	{0x320f, 0xca},
+	{0x330b, 0x60},
+	{0x3e01, 0x46},
+	{0x3e02, 0x10},
+	/*SHDR VC
+	0x4b01,0x11,
+	0x3220,0x50,
+	0x3e23,0x01,
+	0x320e,0x08,
+	0x320f,0xca,
+	0x3250,0x3f,
+	0x3368,0x04,
+	0x3369,0x60,
+	0x336a,0x01,
+	0x336b,0x00,
+	0x4853,0xfd,
+	0x3033,0x20,
+	0x4814,0x6a,
+	0x4851,0x1b,
+	0x3905,0x98,
+	//SHDR VC end*/
+	{0x301f, 0x01},
+	{0x3e01, 0x46},
+	{0x3e02, 0x10},
+	{0x36e9, 0x20},
+	{0x36f9, 0x51},
+	{0x0100, 0x01},
+};
+static struct regval_list sensor_1080p12b30_hdr_regs[] = {
+	{0x0103, 0x01},
+	{0x0100, 0x00},
+	{0x36e9, 0x80},
+	{0x36f9, 0x80},
+	{0x300a, 0x24},
+	{0x4500, 0x18},
+	{0x3310, 0x08},
+	{0x3362, 0x72},
+	{0x3038, 0x22},
+	{0x3220, 0x10},
+	{0x3c14, 0x00},
+	{0x3c10, 0x00},
+	{0x3c11, 0x00},
+	{0x3c12, 0x80},
+	{0x33e0, 0x60},
+	{0x33e1, 0x08},
+	{0x33e2, 0x38},
+	{0x33e3, 0x18},
+	{0x33e4, 0x18},
+	{0x33e5, 0x10},
+	{0x33e6, 0x06},
+	{0x33e7, 0x02},
+	{0x33e8, 0x38},
+	{0x33e9, 0x10},
+	{0x33ea, 0x0c},
+	{0x33eb, 0x10},
+	{0x33ec, 0x04},
+	{0x33ed, 0x02},
+	{0x33ee, 0xa0},
+	{0x33ef, 0x08},
+	{0x33f4, 0x18},
+	{0x33f5, 0x10},
+	{0x33f6, 0x0c},
+	{0x33f7, 0x10},
+	{0x33f8, 0x06},
+	{0x33f9, 0x02},
+	{0x33fa, 0x18},
+	{0x33fb, 0x10},
+	{0x33fc, 0x0c},
+	{0x33fd, 0x10},
+	{0x33fe, 0x04},
+	{0x33ff, 0x02},
+	{0x391b, 0x83},
+	{0x336d, 0x03},
+	{0x335e, 0x02},
+	{0x335f, 0x04},
+	{0x337c, 0x06},
+	{0x337d, 0x0a},
+	{0x33a2, 0x08},
+	{0x3000, 0x00},
+	{0x3001, 0x00},
+	{0x3002, 0x00},
+	{0x301c, 0x78},
+	{0x3018, 0x32},
+	{0x301a, 0xf0},
+	{0x3c00, 0x41},
+	{0x300a, 0x20},
+	{0x3030, 0x01},
+	{0x303f, 0x01},
+	{0x3037, 0x00},
+	{0x3031, 0x0c},
+	{0x330a, 0x01},
+	{0x330b, 0x58},
+	{0x3306, 0x78},
+	{0x3e01, 0x46},
+	{0x3e02, 0x20},
+	{0x3635, 0x20},
+	{0x363b, 0xe4},
+	{0x3637, 0x15},
+	{0x3641, 0x0c},
+	{0x36eb, 0x07},
+	{0x4837, 0x11},
+	{0x36fb, 0x08},
+	{0x36fc, 0x00},
+	{0x36fd, 0x34},
+	{0x3641, 0x00},
+	{0x3304, 0x50},
+	{0x331e, 0x49},
+	{0x3638, 0x08},
+	{0x3309, 0x68},
+	{0x331f, 0x61},
+	{0x3356, 0x20},
+	{0x33af, 0x28},
+	{0x3301, 0x20},
+	{0x3308, 0x10},
+	{0x3213, 0x04},
+	{0x3211, 0x0c},
+	{0x3203, 0x02},
+	{0x3207, 0x4d},
+	{0x360f, 0x05},
+	{0x367a, 0x08},
+	{0x367b, 0x38},
+	{0x3671, 0xe6},
+	{0x3672, 0x06},
+	{0x3673, 0x16},
+	{0x3670, 0x08},
+	{0x369c, 0x08},
+	{0x369d, 0x38},
+	{0x3690, 0x44},
+	{0x3691, 0x43},
+	{0x3692, 0x44},
+	{0x3670, 0x0a},
+	{0x367c, 0x08},
+	{0x367d, 0x38},
+	{0x3674, 0xc0},
+	{0x3675, 0x50},
+	{0x3676, 0x50},
+	{0x3364, 0x17},
+	{0x3301, 0x0a},
+	{0x3393, 0x18},
+	{0x3394, 0x80},
+	{0x3395, 0x80},
+	{0x3390, 0x08},
+	{0x3391, 0x18},
+	{0x3392, 0x38},
+	{0x3670, 0x4a},
+	{0x36a2, 0x08},
+	{0x36a3, 0x18},
+	{0x3699, 0x00},
+	{0x369a, 0x0f},
+	{0x369b, 0x1f},
+	{0x360f, 0x15},
+	{0x36bd, 0x18},
+	{0x36be, 0x18},
+	{0x36b7, 0x88},
+	{0x36b8, 0x08},
+	{0x36b9, 0x08},
+	{0x301f, 0x01},
+	{0x3902, 0xc5},
+	{0x391b, 0x83},
+	{0x3271, 0x18},
+	{0x3273, 0x1b},
+	{0x3275, 0x18},
+	{0x3237, 0x1b},
+	{0x3231, 0x01},
+	{0x3259, 0x02},
+	{0x3933, 0x1f},
+	{0x3934, 0xff},
+	{0x39c5, 0x07},
+	{0x39e8, 0x07},
+	{0x39c8, 0x00},
+	{0x39bf, 0x00},
+	{0x39c0, 0xda},
+	{0x39c1, 0x00},
+	{0x39a4, 0x0a},
+	{0x39a5, 0x18},
+	{0x39a6, 0x32},
+	{0x39a7, 0x50},
+	{0x39a8, 0x40},
+	{0x39a9, 0x20},
+	{0x39aa, 0x10},
+	{0x39ab, 0x0a},
+	{0x3980, 0x03},
+	{0x3981, 0x00},
+	{0x3982, 0x03},
+	{0x3983, 0x80},
+	{0x3984, 0x03},
+	{0x3985, 0xc0},
+	{0x3986, 0x03},
+	{0x3987, 0xf0},
+	{0x3988, 0x00},
+	{0x3989, 0x0b},
+	{0x398a, 0x00},
+	{0x398b, 0x30},
+	{0x398c, 0x00},
+	{0x398d, 0x70},
+	{0x398e, 0x00},
+	{0x398f, 0xb0},
+	{0x3990, 0x01},
+	{0x3991, 0x40},
+	{0x39b6, 0x07},
+	{0x39b7, 0x78},
+	{0x39b8, 0x00},
+	{0x39ac, 0x04},
+	{0x39ad, 0x0c},
+	{0x39ae, 0x14},
+	{0x39af, 0x20},
+	{0x39b0, 0x18},
+	{0x39b1, 0x0c},
+	{0x39b2, 0x08},
+	{0x39b3, 0x04},
+	{0x3992, 0x03},
+	{0x3993, 0x80},
+	{0x3994, 0x03},
+	{0x3995, 0xc8},
+	{0x3996, 0x03},
+	{0x3997, 0xf0},
+	{0x3998, 0x03},
+	{0x3999, 0xf0},
+	{0x399a, 0x03},
+	{0x399b, 0xfe},
+	{0x399c, 0x00},
+	{0x399d, 0x10},
+	{0x399e, 0x00},
+	{0x399f, 0x28},
+	{0x39a0, 0x00},
+	{0x39a1, 0x58},
+	{0x39a2, 0x00},
+	{0x39a3, 0xc0},
+	{0x39db, 0x0d},
+	{0x39dc, 0x1e},
+	{0x39de, 0x06},
+	{0x39df, 0xa0},
+	{0x39e0, 0x00},
+	{0x39e1, 0x0f},
+	{0x39e2, 0x01},
+	{0x39e3, 0x5f},
+	{0x39e4, 0x01},
+	{0x39e5, 0xb7},
+	{0x39ee, 0x00},
+	{0x39b5, 0x60},
+	{0x5784, 0x08},
+	{0x5785, 0x04},
+	{0x5787, 0x06},
+	{0x5788, 0x06},
+	{0x5789, 0x00},
+	{0x578a, 0x06},
+	{0x578b, 0x06},
+	{0x578c, 0x00},
+	{0x5790, 0x10},
+	{0x5791, 0x10},
+	{0x5792, 0x00},
+	{0x5793, 0x10},
+	{0x5794, 0x10},
+	{0x5795, 0x00},
+	{0x57c4, 0x08},
+	{0x57c5, 0x04},
+	{0x57c7, 0x06},
+	{0x57c8, 0x06},
+	{0x57c9, 0x00},
+	{0x57ca, 0x06},
+	{0x57cb, 0x06},
+	{0x57cc, 0x00},
+	{0x57d0, 0x10},
+	{0x57d1, 0x10},
+	{0x57d2, 0x00},
+	{0x57d3, 0x10},
+	{0x57d4, 0x10},
+	{0x57d5, 0x00},
+	{0x3038, 0x66},
+	{0x320c, 0x04},
+	{0x320d, 0x4c},
+	{0x320e, 0x08},
+	{0x320f, 0xca},
+	{0x330b, 0x60},
+	{0x3e01, 0x46},
+	{0x3e02, 0x10},
+	/*SHDR  VC*/
+	{0x4b01, 0x11},
+	{0x3220, 0x50},
+	{0x3e23, 0x01},
+	{0x320e, 0x08},
+	{0x320f, 0xca},
+	{0x3250, 0x3f},
+	{0x4853, 0xfd},
+	{0x3033, 0x20},/*HDR*/
+	{0x3905, 0x98},
+	/*SHDR VC end*/
+	{0x301f, 0x04},
+	{0x3e01, 0x40},
+	{0x3e02, 0x00},
+	{0x3e04, 0x04},
+	{0x3e05, 0x00},
+	{0x3e23, 0x00},
+	{0x3e24, 0x48},
+	{0x36e9, 0x20},
+	{0x36f9, 0x51},
+	{0x0100, 0x01},
+};
+/*
+ * Here we'll try to encapsulate the changes for just the output
+ * video format.
+ *
+ */
+
+static struct regval_list sensor_fmt_raw[] = {
+
+};
+
+
+/*
+ * Code for dealing with controls.
+ * fill with different sensor module
+ * different sensor module has different settings here
+ * if not support the follow function ,retrun -EINVAL
+ */
+
+static int sensor_g_exp(struct v4l2_subdev *sd, __s32 *value)
+{
+	struct sensor_info *info = to_state(sd);
+	*value = info->exp;
+	sensor_dbg("sensor_get_exposure = %d\n", info->exp);
+	return 0;
+}
+
+static int sc2323_sensor_vts;
+static int sc2323_sensor_svr;
+static int shutter_delay = 1;
+static int shutter_delay_cnt;
+static int fps_change_flag;
+
+static int sensor_s_exp(struct v4l2_subdev *sd, unsigned int exp_val)
+{
+	data_type explow, expmid, exphigh;
+	struct sensor_info *info = to_state(sd);
+	if (info->isp_wdr_mode == ISP_DOL_WDR_MODE) {
+		exphigh = (unsigned char) (0xf & (exp_val>>16));
+		expmid = (unsigned char) (0xff & (exp_val>>8));
+		explow = (unsigned char) (0xf0 & exp_val);
+
+		sensor_write(sd, 0x3e02, explow);
+		sensor_write(sd, 0x3e01, expmid);
+		sensor_write(sd, 0x3e00, exphigh);
+
+		sensor_dbg("sensor_set_long_exp = %d line Done!\n", exp_val);
+
+		exp_val /= HDR_RATIO;
+		exphigh = (unsigned char) (0xff & (exp_val>>8));
+		explow = (unsigned char) (0xf0 & exp_val);
+
+		sensor_write(sd, 0x3e05, explow);
+		sensor_write(sd, 0x3e04, exphigh);
+
+		sensor_dbg("sensor_set_short_exp = %d line Done!\n", exp_val);
+
+	} else{
+			exphigh = (unsigned char) (0xf & (exp_val>>16));
+			expmid = (unsigned char) (0xff & (exp_val>>8));
+			explow = (unsigned char) (0xf0 & exp_val);
+
+			sensor_write(sd, 0x3e02, explow);
+			sensor_write(sd, 0x3e01, expmid);
+			sensor_write(sd, 0x3e00, exphigh);
+			sensor_dbg("sensor_set_exp = %d line Done!\n", exp_val);
+			info->exp = exp_val;
+			return 0;
+		}
+}
+
+static int sensor_g_gain(struct v4l2_subdev *sd, __s32 *value)
+{
+	struct sensor_info *info = to_state(sd);
+	*value = info->gain;
+	sensor_dbg("sensor_get_gain = %d\n", info->gain);
+	return 0;
+}
+
+static int sensor_s_gain(struct v4l2_subdev *sd, int gain_val)
+{
+	struct sensor_info *info = to_state(sd);
+	data_type gainlow = 0;
+	data_type gainhigh = 0;
+	data_type gaindiglow = 0x80;
+	data_type gaindighigh = 0x00;
+	int gainana = gain_val<<2 ;
+	if (gainana < 0x80) {
+		gainhigh = 0x03;
+		gainlow = gainana;
+	} else if (gainana < 2 * 0x80) {
+		gainhigh = 0x07;
+		gainlow = gainana >> 1;
+	} else if (gainana < 4 * 0x80) {
+		gainhigh = 0x0f;
+		gainlow = gainana >> 2;
+	} else if (gainana < 8 * 0x80) {
+		gainhigh = 0x1f;
+		gainlow = gainana >> 3;
+	} else {
+		gainhigh = 0x1f;
+		gainlow = 0x7f;
+		if (gainana < 16 * 0x80) {
+			gaindiglow = gainana >> 3;
+			gaindighigh = 0x00;
+		} else if (gainana < 32 * 0x80) {
+			gaindiglow = gainana >> 4;
+			gaindighigh = 0x01;
+		} else if (gainana < 64 * 0x80) {
+			gaindiglow = gainana >> 5;
+			gaindighigh = 0x03;
+		} else if (gainana < 128 * 0x80) {
+			gaindiglow = gainana >> 6;
+			gaindighigh = 0x07;
+		} else if (gainana < 256 * 0x80) {
+			gaindiglow = gainana >> 7;
+			gaindighigh = 0x0f;
+		} else {
+			gaindiglow = 0xfc;
+			gaindighigh = 0x0f;
+		}
+	}
+	if (info->isp_wdr_mode == ISP_DOL_WDR_MODE) {
+		sensor_write(sd, 0x3e13, (unsigned char)gainlow);
+		sensor_write(sd, 0x3e12, (unsigned char)gainhigh);
+		sensor_write(sd, 0x3e11, (unsigned char)gaindiglow);
+		sensor_write(sd, 0x3e10, (unsigned char)gaindighigh);
+	}
+	sensor_write(sd, 0x3e09, (unsigned char)gainlow);
+	sensor_write(sd, 0x3e08, (unsigned char)gainhigh);
+	sensor_write(sd, 0x3e07, (unsigned char)gaindiglow);
+	sensor_write(sd, 0x3e06, (unsigned char)gaindighigh);
+	sensor_dbg("sensor_set_anagain = %d, 0x%x, 0x%x Done!\n", gain_val, gainhigh, gainlow);
+	sensor_dbg("digital_gain = 0x%x, 0x%x Done!\n", gaindighigh, gaindiglow);
+	info->gain = gain_val;
+	return 0;
+}
+
+static int sensor_s_exp_gain(struct v4l2_subdev *sd,
+			     struct sensor_exp_gain *exp_gain)
+{
+	struct sensor_info *info = to_state(sd);
+	int exp_val, gain_val;
+	exp_val = exp_gain->exp_val;
+	gain_val = exp_gain->gain_val;
+	if (gain_val < 1 * 16)
+		gain_val = 16;
+	if (exp_val > 0xfffff)
+		exp_val = 0xfffff;
+	if (fps_change_flag) {
+		if (shutter_delay_cnt == shutter_delay) {
+			shutter_delay_cnt = 0;
+			fps_change_flag = 0;
+		} else
+			shutter_delay_cnt++;
+	}
+	sensor_s_exp(sd, exp_val);
+	sensor_s_gain(sd, gain_val);
+	sensor_dbg("sensor_set_gain exp = %d, %d Done!\n", gain_val, exp_val);
+
+	info->exp = exp_val;
+	info->gain = gain_val;
+	return 0;
+}
+
+static int sensor_s_fps(struct v4l2_subdev *sd,
+			struct sensor_fps *fps)
+{
+	data_type rdval1, rdval2, rdval3;
+	struct sensor_info *info = to_state(sd);
+	struct sensor_win_size *wsize = info->current_wins;
+
+	sc2323_sensor_vts = wsize->pclk/fps->fps/wsize->hts;
+	fps_change_flag = 1;
+	return 0;
+}
+
+static int sensor_s_sw_stby(struct v4l2_subdev *sd, int on_off)
+{
+	int ret;
+	data_type rdval;
+
+	ret = sensor_read(sd, 0x0100, &rdval);
+	if (ret != 0)
+		return ret;
+
+	if (on_off == STBY_ON)
+		ret = sensor_write(sd, 0x0100, rdval&0xfe);
+	else
+		ret = sensor_write(sd, 0x0100, rdval|0x01);
+	return ret;
+}
+
+/*
+ * Stuff that knows about the sensor.
+ */
+static int sensor_power(struct v4l2_subdev *sd, int on)
+{
+	int ret = 0;
+
+	switch (on) {
+	case STBY_ON:
+		sensor_dbg("STBY_ON!\n");
+		cci_lock(sd);
+		ret = sensor_s_sw_stby(sd, STBY_ON);
+		if (ret < 0)
+			sensor_err("soft stby falied!\n");
+		usleep_range(10000, 12000);
+		cci_unlock(sd);
+		break;
+	case STBY_OFF:
+		sensor_dbg("STBY_OFF!\n");
+		cci_lock(sd);
+		usleep_range(10000, 12000);
+		ret = sensor_s_sw_stby(sd, STBY_OFF);
+		if (ret < 0)
+			sensor_err("soft stby off falied!\n");
+		cci_unlock(sd);
+		break;
+	case PWR_ON:
+		sensor_dbg("PWR_ON!\n");
+		cci_lock(sd);
+		vin_gpio_set_status(sd, PWDN, 1);
+		vin_gpio_set_status(sd, RESET, 1);
+		vin_gpio_set_status(sd, POWER_EN, 1);
+		vin_gpio_write(sd, RESET, CSI_GPIO_LOW);
+		vin_gpio_write(sd, PWDN, CSI_GPIO_LOW);
+		vin_gpio_write(sd, POWER_EN, CSI_GPIO_HIGH);
+		vin_set_pmu_channel(sd, IOVDD, ON);
+		vin_set_pmu_channel(sd, DVDD, ON);
+		vin_set_pmu_channel(sd, AVDD, ON);
+		usleep_range(10000, 12000);
+		vin_gpio_write(sd, RESET, CSI_GPIO_HIGH);
+		vin_gpio_write(sd, PWDN, CSI_GPIO_HIGH);
+		usleep_range(10000, 12000);
+		vin_set_mclk(sd, ON);
+		usleep_range(10000, 12000);
+		vin_set_mclk_freq(sd, MCLK);
+		usleep_range(30000, 32000);
+		cci_unlock(sd);
+		break;
+	case PWR_OFF:
+		sensor_dbg("PWR_OFF!\n");
+		cci_lock(sd);
+		vin_gpio_set_status(sd, PWDN, 1);
+		vin_gpio_set_status(sd, RESET, 1);
+		vin_gpio_write(sd, RESET, CSI_GPIO_LOW);
+		vin_gpio_write(sd, PWDN, CSI_GPIO_LOW);
+		vin_set_mclk(sd, OFF);
+		vin_set_pmu_channel(sd, AFVDD, OFF);
+		vin_set_pmu_channel(sd, AVDD, OFF);
+		vin_set_pmu_channel(sd, IOVDD, OFF);
+		vin_set_pmu_channel(sd, DVDD, OFF);
+		vin_gpio_write(sd, POWER_EN, CSI_GPIO_LOW);
+		vin_gpio_set_status(sd, RESET, 0);
+		vin_gpio_set_status(sd, PWDN, 0);
+		vin_gpio_set_status(sd, POWER_EN, 0);
+		cci_unlock(sd);
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static int sensor_reset(struct v4l2_subdev *sd, u32 val)
+{
+	switch (val) {
+	case 0:
+		vin_gpio_write(sd, RESET, CSI_GPIO_HIGH);
+		usleep_range(1000, 1200);
+		break;
+	case 1:
+		vin_gpio_write(sd, RESET, CSI_GPIO_LOW);
+		usleep_range(1000, 1200);
+		break;
+	default:
+		return -EINVAL;
+	}
+	return 0;
+}
+
+static int sensor_detect(struct v4l2_subdev *sd)
+{
+	data_type rdval = 0;
+
+	sensor_read(sd, 0x3107, &rdval);
+	sensor_print("0x3107 = 0x%x\n", rdval);
+	if (rdval != (0xff & (V4L2_IDENT_SENSOR>>8)))
+		return -ENODEV;
+	sensor_read(sd, 0x3108, &rdval);
+	sensor_print("0x3108 = 0x%x\n", rdval);
+	if (rdval != (0xf & V4L2_IDENT_SENSOR))
+		return -ENODEV;
+	return 0;
+}
+
+static int sensor_init(struct v4l2_subdev *sd, u32 val)
+{
+	int ret;
+	struct sensor_info *info = to_state(sd);
+
+	sensor_dbg("sensor_init\n");
+
+	/*Make sure it is a target sensor */
+	ret = sensor_detect(sd);
+	if (ret) {
+		sensor_err("chip found is not an target chip.\n");
+		return ret;
+	}
+
+	info->focus_status = 0;
+	info->low_speed = 0;
+	info->width = 1920;
+	info->height = 1080;
+	info->hflip = 0;
+	info->vflip = 0;
+	info->gain = 0;
+	info->exp = 0;
+
+	info->tpf.numerator = 1;
+	info->tpf.denominator = 30;	/* 30fps */
+
+	return 0;
+}
+
+static long sensor_ioctl(struct v4l2_subdev *sd, unsigned int cmd, void *arg)
+{
+	int ret = 0;
+	struct sensor_info *info = to_state(sd);
+
+	switch (cmd) {
+	case GET_CURRENT_WIN_CFG:
+		if (info->current_wins != NULL) {
+			memcpy(arg, info->current_wins,
+				sizeof(struct sensor_win_size));
+			ret = 0;
+		} else {
+			sensor_err("empty wins!\n");
+			ret = -1;
+		}
+		break;
+	case SET_FPS:
+		ret = 0;
+		break;
+	case VIDIOC_VIN_SENSOR_EXP_GAIN:
+		ret = sensor_s_exp_gain(sd, (struct sensor_exp_gain *)arg);
+		break;
+	case VIDIOC_VIN_SENSOR_SET_FPS:
+		ret = sensor_s_fps(sd, (struct sensor_fps *)arg);
+		break;
+	case VIDIOC_VIN_SENSOR_CFG_REQ:
+		sensor_cfg_req(sd, (struct sensor_config *)arg);
+		break;
+	default:
+		return -EINVAL;
+	}
+	return ret;
+}
+
+/*
+ * Store information about the video data format.
+ */
+static struct sensor_format_struct sensor_formats[] = {
+	{
+		.desc = "Raw RGB Bayer",
+		.mbus_code = MEDIA_BUS_FMT_SBGGR12_1X12,
+		.regs = sensor_fmt_raw,
+		.regs_size = ARRAY_SIZE(sensor_fmt_raw),
+		.bpp = 1
+	},
+};
+#define N_FMTS ARRAY_SIZE(sensor_formats)
+
+/*
+ * Then there is the issue of window sizes.  Try to capture the info here.
+ */
+
+static struct sensor_win_size sensor_win_sizes[] = {
+	{
+	 .width = HD1080_WIDTH,
+	 .height = HD1080_HEIGHT,
+	 .hoffset = 0,
+	 .voffset = 0,
+	 .hts = 2200,
+	 .vts = 1125,
+	 .pclk = 148 * 1000 * 1000,
+	 .mipi_bps = 891 * 1000 * 1000,
+	 .fps_fixed = 60,
+	 .bin_factor = 1,
+	 .intg_min = 0,
+	 .intg_max = 1119,
+	 .gain_min = 1 << 4,
+	 .gain_max = 500 << 4,
+	 .regs = sensor_1080p12b60_regs,
+	 .regs_size = ARRAY_SIZE(sensor_1080p12b60_regs),
+	 .set_size = NULL,
+	},
+	{
+	 .width = HD1080_WIDTH,
+	 .height = HD1080_HEIGHT,
+	 .hoffset = 0,
+	 .voffset = 0,
+	 .hts = 2200,
+	 .vts = 2250,
+	 .pclk = 148 * 1000 * 1000,
+	 .mipi_bps = 891 * 1000 * 1000,
+	 .fps_fixed = 30,
+	 .bin_factor = 1,
+	 .intg_min = 0,
+	 .intg_max = 1119,
+	 .gain_min = 1 << 4,
+	 .gain_max = 500 << 4,
+	 .regs = sensor_1080p12b30_regs,
+	 .regs_size = ARRAY_SIZE(sensor_1080p12b30_regs),
+	 .set_size = NULL,
+	},
+	{
+	 .width = HD1080_WIDTH,
+	 .height = HD1080_HEIGHT,
+	 .hoffset = 0,
+	 .voffset = 0,
+	 .hts = 2200,
+	 .vts = 2250,
+	 .pclk = 148 * 1000 * 1000,
+	 .mipi_bps = 891 * 1000 * 1000,
+	 .fps_fixed = 30,
+	 .bin_factor = 1,
+	  .if_mode = MIPI_VC_WDR_MODE,
+	 .wdr_mode = ISP_DOL_WDR_MODE,
+	 .intg_min = 0,
+	 .intg_max = 1047,
+	 .gain_min = 1 << 4,
+	 .gain_max = 500 << 4,
+	 .regs = sensor_1080p12b30_hdr_regs,
+	 .regs_size = ARRAY_SIZE(sensor_1080p12b30_hdr_regs),
+	 .set_size = NULL,
+	},
+};
+
+#define N_WIN_SIZES (ARRAY_SIZE(sensor_win_sizes))
+
+static int sensor_g_mbus_config(struct v4l2_subdev *sd,
+				struct v4l2_mbus_config *cfg)
+{
+	struct sensor_info *info = to_state(sd);
+
+	cfg->type = V4L2_MBUS_CSI2;
+	if (info->isp_wdr_mode == ISP_DOL_WDR_MODE)
+		cfg->flags = 0 | V4L2_MBUS_CSI2_2_LANE | V4L2_MBUS_CSI2_CHANNEL_0 | V4L2_MBUS_CSI2_CHANNEL_1;
+	else
+		cfg->flags = 0 | V4L2_MBUS_CSI2_2_LANE | V4L2_MBUS_CSI2_CHANNEL_0;
+	return 0;
+}
+
+static int sensor_g_ctrl(struct v4l2_ctrl *ctrl)
+{
+	struct sensor_info *info =
+			container_of(ctrl->handler, struct sensor_info, handler);
+	struct v4l2_subdev *sd = &info->sd;
+
+	switch (ctrl->id) {
+	case V4L2_CID_GAIN:
+		return sensor_g_gain(sd, &ctrl->val);
+	case V4L2_CID_EXPOSURE:
+		return sensor_g_exp(sd, &ctrl->val);
+	}
+	return -EINVAL;
+}
+
+static int sensor_s_ctrl(struct v4l2_ctrl *ctrl)
+{
+	struct sensor_info *info =
+			container_of(ctrl->handler, struct sensor_info, handler);
+	struct v4l2_subdev *sd = &info->sd;
+
+	switch (ctrl->id) {
+	case V4L2_CID_GAIN:
+		return sensor_s_gain(sd, ctrl->val);
+	case V4L2_CID_EXPOSURE:
+		return sensor_s_exp(sd, ctrl->val);
+	}
+	return -EINVAL;
+}
+
+static int sensor_reg_init(struct sensor_info *info)
+{
+	int ret;
+	struct v4l2_subdev *sd = &info->sd;
+	struct sensor_format_struct *sensor_fmt = info->fmt;
+	struct sensor_win_size *wsize = info->current_wins;
+	data_type rdval;
+
+	ret = sensor_write_array(sd, sensor_default_regs,
+				 ARRAY_SIZE(sensor_default_regs));
+	if (ret < 0) {
+		sensor_err("write sensor_default_regs error\n");
+		return ret;
+	}
+
+	sensor_dbg("sensor_reg_init\n");
+	sensor_write_array(sd, sensor_fmt->regs, sensor_fmt->regs_size);
+
+	if (wsize->regs)
+		sensor_write_array(sd, wsize->regs, wsize->regs_size);
+
+	if (wsize->set_size)
+		wsize->set_size(sd);
+
+	info->width = wsize->width;
+	info->height = wsize->height;
+	sc2323_sensor_vts = wsize->vts;
+
+	sensor_dbg("s_fmt set width = %d, height = %d\n", wsize->width,
+		     wsize->height);
+	sensor_read(sd, 0x320c, &rdval);
+	sensor_print("0x320c = 0x%x\n", rdval);
+	sensor_read(sd, 0x320d, &rdval);
+	sensor_print("0x320d = 0x%x\n", rdval);
+	sensor_read(sd, 0x320e, &rdval);
+	sensor_print("0x320e = 0x%x\n", rdval);
+	sensor_read(sd, 0x320f, &rdval);
+	sensor_print("0x320f = 0x%x\n", rdval);
+	return 0;
+}
+
+static int sensor_s_stream(struct v4l2_subdev *sd, int enable)
+{
+	struct sensor_info *info = to_state(sd);
+
+	sensor_dbg("%s on = %d, %d*%d fps: %d code: %x\n", __func__, enable,
+		     info->current_wins->width, info->current_wins->height,
+		     info->current_wins->fps_fixed, info->fmt->mbus_code);
+
+	if (!enable)
+		return 0;
+
+	return sensor_reg_init(info);
+}
+
+/* ----------------------------------------------------------------------- */
+
+static const struct v4l2_ctrl_ops sensor_ctrl_ops = {
+	.g_volatile_ctrl = sensor_g_ctrl,
+	.s_ctrl = sensor_s_ctrl,
+};
+
+static const struct v4l2_subdev_core_ops sensor_core_ops = {
+	.reset = sensor_reset,
+	.init = sensor_init,
+	.s_power = sensor_power,
+	.ioctl = sensor_ioctl,
+#ifdef CONFIG_COMPAT
+	.compat_ioctl32 = sensor_compat_ioctl32,
+#endif
+};
+
+static const struct v4l2_subdev_video_ops sensor_video_ops = {
+	.s_parm = sensor_s_parm,
+	.g_parm = sensor_g_parm,
+	.s_stream = sensor_s_stream,
+	.g_mbus_config = sensor_g_mbus_config,
+};
+
+static const struct v4l2_subdev_pad_ops sensor_pad_ops = {
+	.enum_mbus_code = sensor_enum_mbus_code,
+	.enum_frame_size = sensor_enum_frame_size,
+	.get_fmt = sensor_get_fmt,
+	.set_fmt = sensor_set_fmt,
+};
+
+static const struct v4l2_subdev_ops sensor_ops = {
+	.core = &sensor_core_ops,
+	.video = &sensor_video_ops,
+	.pad = &sensor_pad_ops,
+};
+
+/* ----------------------------------------------------------------------- */
+static struct cci_driver cci_drv[] = {
+	{
+		.name = SENSOR_NAME,
+		.addr_width = CCI_BITS_16,
+		.data_width = CCI_BITS_8,
+	}, {
+		.name = SENSOR_NAME_2,
+		.addr_width = CCI_BITS_16,
+		.data_width = CCI_BITS_8,
+	}
+};
+
+static int sensor_init_controls(struct v4l2_subdev *sd, const struct v4l2_ctrl_ops *ops)
+{
+	struct sensor_info *info = to_state(sd);
+	struct v4l2_ctrl_handler *handler = &info->handler;
+	struct v4l2_ctrl *ctrl;
+	int ret = 0;
+
+	v4l2_ctrl_handler_init(handler, 2);
+
+	v4l2_ctrl_new_std(handler, ops, V4L2_CID_GAIN, 1 * 1600,
+			      256 * 1600, 1, 1 * 1600);
+	ctrl = v4l2_ctrl_new_std(handler, ops, V4L2_CID_EXPOSURE, 1,
+			      65536 * 16, 1, 1);
+	if (ctrl != NULL)
+		ctrl->flags |= V4L2_CTRL_FLAG_VOLATILE;
+
+	if (handler->error) {
+		ret = handler->error;
+		v4l2_ctrl_handler_free(handler);
+	}
+
+	sd->ctrl_handler = handler;
+
+	return ret;
+}
+
+static int sensor_dev_id;
+
+static int sensor_probe(struct i2c_client *client,
+			const struct i2c_device_id *id)
+{
+	struct v4l2_subdev *sd;
+	struct sensor_info *info;
+	int i;
+
+	info = kzalloc(sizeof(struct sensor_info), GFP_KERNEL);
+	if (info == NULL)
+		return -ENOMEM;
+	sd = &info->sd;
+
+	if (client) {
+		for (i = 0; i < SENSOR_NUM; i++) {
+			if (!strcmp(cci_drv[i].name, client->name))
+				break;
+		}
+		cci_dev_probe_helper(sd, client, &sensor_ops, &cci_drv[i]);
+	} else {
+		cci_dev_probe_helper(sd, client, &sensor_ops, &cci_drv[sensor_dev_id++]);
+	}
+
+	sensor_init_controls(sd, &sensor_ctrl_ops);
+
+	mutex_init(&info->lock);
+
+	info->fmt = &sensor_formats[0];
+	info->fmt_pt = &sensor_formats[0];
+	info->win_pt = &sensor_win_sizes[0];
+	info->fmt_num = N_FMTS;
+	info->win_size_num = N_WIN_SIZES;
+	info->sensor_field = V4L2_FIELD_NONE;
+	info->combo_mode = CMB_TERMINAL_RES | CMB_PHYA_OFFSET1 | MIPI_NORMAL_MODE;
+	info->stream_seq = MIPI_BEFORE_SENSOR;
+	info->af_first_flag = 1;
+	info->exp = 0;
+	info->gain = 0;
+
+	return 0;
+}
+
+static int sensor_remove(struct i2c_client *client)
+{
+	struct v4l2_subdev *sd;
+	int i;
+
+	if (client) {
+		for (i = 0; i < SENSOR_NUM; i++) {
+			if (!strcmp(cci_drv[i].name, client->name))
+				break;
+		}
+		sd = cci_dev_remove_helper(client, &cci_drv[i]);
+	} else {
+		sd = cci_dev_remove_helper(client, &cci_drv[sensor_dev_id++]);
+	}
+
+	kfree(to_state(sd));
+	return 0;
+}
+
+static const struct i2c_device_id sensor_id[] = {
+	{SENSOR_NAME, 0},
+	{}
+};
+
+static const struct i2c_device_id sensor_id_2[] = {
+	{SENSOR_NAME_2, 0},
+	{}
+};
+
+MODULE_DEVICE_TABLE(i2c, sensor_id);
+MODULE_DEVICE_TABLE(i2c, sensor_id_2);
+
+static struct i2c_driver sensor_driver[] = {
+	{
+		.driver = {
+			   .owner = THIS_MODULE,
+			   .name = SENSOR_NAME,
+			   },
+		.probe = sensor_probe,
+		.remove = sensor_remove,
+		.id_table = sensor_id,
+	}, {
+		.driver = {
+			   .owner = THIS_MODULE,
+			   .name = SENSOR_NAME_2,
+			   },
+		.probe = sensor_probe,
+		.remove = sensor_remove,
+		.id_table = sensor_id_2,
+	},
+};
+static __init int init_sensor(void)
+{
+	int i, ret = 0;
+
+	sensor_dev_id = 0;
+
+	for (i = 0; i < SENSOR_NUM; i++)
+		ret = cci_dev_init_helper(&sensor_driver[i]);
+
+	return ret;
+}
+
+static __exit void exit_sensor(void)
+{
+	int i;
+
+	sensor_dev_id = 0;
+
+	for (i = 0; i < SENSOR_NUM; i++)
+		cci_dev_exit_helper(&sensor_driver[i]);
+}
+
+module_init(init_sensor);
+module_exit(exit_sensor);
