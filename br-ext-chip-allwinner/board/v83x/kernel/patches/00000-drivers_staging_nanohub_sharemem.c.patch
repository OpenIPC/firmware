diff -drupN a/drivers/staging/nanohub/sharemem.c b/drivers/staging/nanohub/sharemem.c
--- a/drivers/staging/nanohub/sharemem.c	1970-01-01 03:00:00.000000000 +0300
+++ b/drivers/staging/nanohub/sharemem.c	2022-06-12 05:28:14.000000000 +0300
@@ -0,0 +1,414 @@
+/*
+ * Copyright (C) 2016 Google, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#include <linux/delay.h>
+#ifdef LINUX_KERNEL_4_9
+#include <linux/iio/iio.h>
+#else
+#include "../iio/iio.h"
+#endif
+#include <linux/gpio.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/arisc/arisc.h>
+
+#include "main.h"
+#include "bl.h"
+#include "comms.h"
+
+#define SHAREMEM_TIMEOUT		65535
+#define SHAREMEM_MIN_DMA		48
+
+struct nanohub_sharemem_data {
+	struct nanohub_data data;
+	struct platform_device *device;
+	struct semaphore sharemem_sem;
+};
+
+#ifdef NANOHUB_BL
+static uint8_t bl_checksum(const uint8_t *bytes, int length)
+{
+	int i;
+	uint8_t csum;
+
+	if (length == 1) {
+		csum = ~bytes[0];
+	} else if (length > 1) {
+		for (csum = 0, i = 0; i < length; i++)
+			csum ^= bytes[i];
+	} else {
+		csum = 0xFF;
+	}
+
+	return csum;
+}
+
+static uint8_t sharemem_bl_write_data(const void *data, uint8_t *tx,
+	int length)
+{
+	const struct nanohub_sharemem_data *sharemem_data = data;
+	const struct nanohub_bl *bl = &sharemem_data->data.bl;
+	struct sharemem_message msg;
+	struct sharemem_transfer xfer = {
+		.len = length + 1,
+		.tx_buf = bl->tx_buffer,
+		.rx_buf = bl->rx_buffer,
+		.cs_change = 1,
+	};
+
+	tx[length] = bl_checksum(tx, length);
+	memcpy(bl->tx_buffer, tx, length + 1);
+
+	sharemem_message_init_with_transfers(&msg, &xfer, 1);
+
+	if (sharemem_sync_locked(sharemem_data->device, &msg) == 0)
+		return bl->rx_buffer[length];
+	else
+		return CMD_NACK;
+}
+
+static uint8_t sharemem_bl_write_cmd(const void *data, uint8_t cmd)
+{
+	const struct nanohub_sharemem_data *sharemem_data = data;
+	const struct nanohub_bl *bl = &sharemem_data->data.bl;
+	struct sharemem_message msg;
+	struct sharemem_transfer xfer = {
+		.len = 3,
+		.tx_buf = bl->tx_buffer,
+		.rx_buf = bl->rx_buffer,
+		.cs_change = 1,
+	};
+	bl->tx_buffer[0] = CMD_SOF;
+	bl->tx_buffer[1] = cmd;
+	bl->tx_buffer[2] = ~cmd;
+
+	sharemem_message_init_with_transfers(&msg, &xfer, 1);
+
+	if (sharemem_sync_locked(sharemem_data->device, &msg) == 0)
+		return CMD_ACK;
+	else
+		return CMD_NACK;
+}
+
+static uint8_t sharemem_bl_read_data(const void *data, uint8_t *rx,
+	int length)
+{
+	const struct nanohub_sharemem_data *sharemem_data = data;
+	const struct nanohub_bl *bl = &sharemem_data->data.bl;
+	struct sharemem_message msg;
+	struct sharemem_transfer xfer = {
+		.len = length + 1,
+		.tx_buf = bl->tx_buffer,
+		.rx_buf = bl->rx_buffer,
+		.cs_change = 1,
+	};
+	memset(&bl->tx_buffer[0], 0x00, length + 1);
+
+	sharemem_message_init_with_transfers(&msg, &xfer, 1);
+
+	if (sharemem_sync_locked(sharemem_data->device, &msg) == 0) {
+		memcpy(rx, &bl->rx_buffer[1], length);
+		return CMD_ACK;
+	} else {
+		return CMD_NACK;
+	}
+}
+
+static uint8_t sharemem_bl_read_ack(const void *data)
+{
+	const struct nanohub_sharemem_data *sharemem_data = data;
+	const struct nanohub_bl *bl = &sharemem_data->data.bl;
+	int32_t timeout = SHAREMEM_TIMEOUT;
+	uint8_t ret;
+	struct sharemem_message msg;
+	struct sharemem_transfer xfer = {
+		.len = 1,
+		.tx_buf = bl->tx_buffer,
+		.rx_buf = bl->rx_buffer,
+		.cs_change = 1,
+	};
+	bl->tx_buffer[0] = 0x00;
+
+	sharemem_message_init_with_transfers(&msg, &xfer, 1);
+
+	if (sharemem_sync_locked(sharemem_data->device, &msg) == 0) {
+		do {
+			sharemem_sync_locked(sharemem_data->device, &msg);
+			timeout--;
+			if (bl->rx_buffer[0] != CMD_ACK
+			    && bl->rx_buffer[0] != CMD_NACK
+			    && timeout % 256 == 0)
+				schedule();
+		} while (bl->rx_buffer[0] != CMD_ACK
+			 && bl->rx_buffer[0] != CMD_NACK && timeout > 0);
+
+		if (bl->rx_buffer[0] != CMD_ACK && bl->rx_buffer[0] != CMD_NACK
+		    && timeout == 0)
+			ret = CMD_NACK;
+		else
+			ret = bl->rx_buffer[0];
+
+		bl->tx_buffer[0] = CMD_ACK;
+		sharemem_sync_locked(sharemem_data->device, &msg);
+		return ret;
+	} else {
+		return CMD_NACK;
+	}
+}
+
+static int sharemem_bl_open(const void *data)
+{
+	const struct nanohub_sharemem_data *sharemem_data = data;
+	int ret;
+
+	sharemem_bus_lock(sharemem_data->device->master);
+	sharemem_data->device->max_speed_hz = 1000000;
+	sharemem_data->device->mode = SHAREMEM_MODE_0;
+	sharemem_data->device->bits_per_word = 8;
+	ret = sharemem_setup(sharemem_data->device);
+	if (!ret)
+		gpio_set_value(sharemem_data->cs, 0);
+
+	return ret;
+}
+
+static void sharemem_bl_close(const void *data)
+{
+	const struct nanohub_sharemem_data *sharemem_data = data;
+
+	gpio_set_value(sharemem_data->cs, 1);
+	sharemem_bus_unlock(sharemem_data->device->master);
+}
+
+static uint8_t sharemem_bl_sync(const void *data)
+{
+	const struct nanohub_sharemem_data *sharemem_data = data;
+	const struct nanohub_bl *bl = &sharemem_data->data.bl;
+	int32_t timeout = SHAREMEM_TIMEOUT;
+	struct sharemem_message msg;
+	struct sharemem_transfer xfer = {
+		.len = 1,
+		.tx_buf = bl->tx_buffer,
+		.rx_buf = bl->rx_buffer,
+		.cs_change = 1,
+	};
+	bl->tx_buffer[0] = CMD_SOF;
+
+	sharemem_message_init_with_transfers(&msg, &xfer, 1);
+
+	do {
+		if (sharemem_sync_locked(sharemem_data->device, &msg) != 0)
+			return CMD_NACK;
+		timeout--;
+		if (bl->rx_buffer[0] != CMD_SOF_ACK && timeout % 256 == 0)
+			schedule();
+	} while (bl->rx_buffer[0] != CMD_SOF_ACK && timeout > 0);
+
+	if (bl->rx_buffer[0] == CMD_SOF_ACK)
+		return bl->read_ack(data);
+	else
+		return CMD_NACK;
+}
+
+void nanohub_sharemem_bl_init(
+	struct nanohub_sharemem_data *sharemem_data)
+{
+	struct nanohub_bl *bl = &sharemem_data->data.bl;
+
+	bl->open = sharemem_bl_open;
+	bl->sync = sharemem_bl_sync;
+	bl->write_data = sharemem_bl_write_data;
+	bl->write_cmd = sharemem_bl_write_cmd;
+	bl->read_data = sharemem_bl_read_data;
+	bl->read_ack = sharemem_bl_read_ack;
+	bl->close = sharemem_bl_close;
+}
+#endif
+
+int nanohub_sharemem_write(void *data, uint8_t *tx, int length,
+	int timeout)
+{
+	if (arisc_ap_write_data(tx, length) == 0)
+		return length;
+	else
+		return ERROR_NACK;
+}
+
+int nanohub_sharemem_read(void *data, uint8_t *rx, int max_length,
+	int timeout)
+{
+	const int min_size = sizeof(struct nanohub_packet) +
+	sizeof(struct nanohub_packet_crc);
+	int ret;
+
+	if (max_length < min_size)
+		return ERROR_NACK;
+
+	ret = arisc_ap_read_data((char *)rx, max_length);
+
+	return ret;
+}
+
+static int nanohub_sharemem_open(void *data)
+{
+	struct nanohub_sharemem_data *sharemem_data = data;
+	int ret = 0;
+
+	down(&sharemem_data->sharemem_sem);
+	return ret;
+}
+
+static void nanohub_sharemem_close(void *data)
+{
+	struct nanohub_sharemem_data *sharemem_data = data;
+
+	up(&sharemem_data->sharemem_sem);
+	udelay(60);
+}
+
+void nanohub_sharemem_comms_init(
+	struct nanohub_sharemem_data *sharemem_data)
+{
+	struct nanohub_comms *comms = &sharemem_data->data.comms;
+	int max_len = sizeof(struct nanohub_packet) + MAX_UINT8 +
+		      sizeof(struct nanohub_packet_crc);
+
+	comms->seq = 1;
+	comms->timeout_write = 544;
+	comms->timeout_ack = 272;
+	comms->timeout_reply = 512;
+	comms->open = nanohub_sharemem_open;
+	comms->close = nanohub_sharemem_close;
+	comms->write = nanohub_sharemem_write;
+	comms->read = nanohub_sharemem_read;
+
+	max_len += comms->timeout_write;
+	max_len = max(max_len, comms->timeout_ack);
+	max_len = max(max_len, comms->timeout_reply);
+	comms->tx_buffer = kmalloc(max_len, GFP_KERNEL | GFP_DMA);
+	comms->rx_buffer = kmalloc(max_len, GFP_KERNEL | GFP_DMA);
+
+	sema_init(&sharemem_data->sharemem_sem, 1);
+}
+
+static int nanohub_sharemem_probe(struct platform_device *sharemem)
+{
+	struct nanohub_sharemem_data *sharemem_data;
+	struct iio_dev *iio_dev;
+
+	#ifdef LINUX_KERNEL_4_9
+	iio_dev = iio_device_alloc(sizeof(struct nanohub_sharemem_data));
+	#else
+	iio_dev = iio_allocate_device(sizeof(struct nanohub_sharemem_data));
+	#endif
+
+	iio_dev = nanohub_probe(&sharemem->dev, iio_dev);
+
+	if (IS_ERR(iio_dev))
+		return PTR_ERR(iio_dev);
+
+	sharemem_data = iio_priv(iio_dev);
+
+	platform_set_drvdata(sharemem, iio_dev);
+
+	sharemem_data->device = sharemem;
+	nanohub_sharemem_comms_init(sharemem_data);
+
+#ifdef NANOHUB_BL
+	sharemem_data->data.bl.cmd_erase = CMD_ERASE;
+	sharemem_data->data.bl.cmd_read_memory = CMD_READ_MEMORY;
+	sharemem_data->data.bl.cmd_write_memory = CMD_WRITE_MEMORY;
+	nanohub_sharemem_bl_init(sharemem_data);
+#endif
+	nanohub_reset(&sharemem_data->data); /* FIXME */
+
+	return 0;
+}
+
+static int nanohub_sharemem_remove(struct platform_device *sharemem)
+{
+	struct nanohub_sharemem_data *sharemem_data;
+	struct iio_dev *iio_dev;
+
+	iio_dev = platform_get_drvdata(sharemem);
+	sharemem_data = iio_priv(iio_dev);
+
+	return nanohub_remove(iio_dev);
+}
+
+static int nanohub_sharemem_suspend(struct device *dev)
+{
+	struct iio_dev *iio_dev = platform_get_drvdata(to_platform_device(dev));
+	struct nanohub_sharemem_data *sharemem_data = iio_priv(iio_dev);
+	int ret;
+
+	ret = nanohub_suspend(iio_dev);
+
+	if (!ret) {
+		ret = down_interruptible(&sharemem_data->sharemem_sem);
+		if (ret)
+			up(&sharemem_data->sharemem_sem);
+	}
+
+	return ret;
+}
+
+static int nanohub_sharemem_resume(struct device *dev)
+{
+	struct iio_dev *iio_dev = platform_get_drvdata(to_platform_device(dev));
+	struct nanohub_sharemem_data *sharemem_data = iio_priv(iio_dev);
+
+	up(&sharemem_data->sharemem_sem);
+
+	return nanohub_resume(iio_dev);
+}
+
+static struct platform_device_id nanohub_sharemem_id[] = {
+	{NANOHUB_NAME, 0},
+	{},
+};
+
+static const struct dev_pm_ops nanohub_sharemem_pm_ops = {
+	.suspend = nanohub_sharemem_suspend,
+	.resume = nanohub_sharemem_resume,
+};
+
+static const struct of_device_id nanohub_match[] = {
+	{ .compatible = "allwinner,nanohub", },
+	{},
+};
+
+static struct platform_driver nanohub_sharemem_driver = {
+	.driver = {
+		   .name = NANOHUB_NAME,
+		   .owner = THIS_MODULE,
+		   .pm = &nanohub_sharemem_pm_ops,
+		   .of_match_table = nanohub_match,
+		   },
+	.probe = nanohub_sharemem_probe,
+	.remove = nanohub_sharemem_remove,
+	.id_table = nanohub_sharemem_id,
+};
+
+int __init nanohub_sharemem_init(void)
+{
+	return platform_driver_register(&nanohub_sharemem_driver);
+}
+
+void nanohub_sharemem_cleanup(void)
+{
+	platform_driver_unregister(&nanohub_sharemem_driver);
+}
+
+MODULE_DEVICE_TABLE(sharemem, nanohub_sharemem_id);
