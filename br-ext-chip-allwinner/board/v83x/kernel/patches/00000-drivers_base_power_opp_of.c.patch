diff -drupN a/drivers/base/power/opp/of.c b/drivers/base/power/opp/of.c
--- a/drivers/base/power/opp/of.c	2018-08-06 17:23:04.000000000 +0300
+++ b/drivers/base/power/opp/of.c	2022-06-12 05:28:14.000000000 +0300
@@ -610,3 +610,193 @@ put_cpu_node:
 	return ret;
 }
 EXPORT_SYMBOL_GPL(dev_pm_opp_of_get_sharing_cpus);
+
+/**
+* copy to _of_get_opp_desc_node().
+* Returns opp descriptor node for a device, caller must do of_node_put()
+*/
+struct device_node *of_get_opp_desc_node_by_soc_bin(struct device *dev,
+		int soc_bin)
+{
+	/*
+	 * TODO: Support for multiple OPP tables.
+	 *
+	 * There support more phandle present in "operating-points-v2"
+	 * property.
+	 */
+	struct of_phandle_args args;
+
+	if (soc_bin < 0)
+		return NULL;
+
+	of_parse_phandle_with_fixed_args(dev->of_node, "operating-points-v2",
+			0, soc_bin, &args);
+
+	return args.np;
+}
+
+/*
+ * copy to dev_pm_opp_of_get_sharing_cpus
+ * Works only for OPP v2 bindings.
+ *
+ * Returns -ENOENT if operating-points-v2 bindings aren't supported.
+ */
+int dev_pm_opp_of_get_sharing_cpus_by_soc_bin(struct device *cpu_dev,
+					cpumask_var_t cpumask, int soc_bin)
+{
+	struct device_node *np, *tmp_np;
+	struct device *tcpu_dev;
+	int cpu, ret = 0;
+
+	/* Get OPP descriptor node */
+	np = of_get_opp_desc_node_by_soc_bin(cpu_dev, soc_bin);
+	if (!np) {
+		dev_dbg(cpu_dev, "%s: Couldn't find cpu_dev node.\n", __func__);
+		return -ENOENT;
+	}
+
+	cpumask_set_cpu(cpu_dev->id, cpumask);
+
+	/* OPPs are shared ? */
+	if (!of_property_read_bool(np, "opp-shared"))
+		goto put_cpu_node;
+
+	for_each_possible_cpu(cpu) {
+		if (cpu == cpu_dev->id)
+			continue;
+
+		tcpu_dev = get_cpu_device(cpu);
+		if (!tcpu_dev) {
+			dev_err(cpu_dev, "%s: failed to get cpu%d device\n",
+				__func__, cpu);
+			ret = -ENODEV;
+			goto put_cpu_node;
+		}
+
+		/* Get OPP descriptor node */
+		tmp_np = of_get_opp_desc_node_by_soc_bin(tcpu_dev, soc_bin);
+		if (!tmp_np) {
+			dev_err(tcpu_dev, "%s: Couldn't find tcpu_dev node.\n",
+				__func__);
+			ret = -ENOENT;
+			goto put_cpu_node;
+		}
+
+		/* CPUs are sharing opp node */
+		if (np == tmp_np)
+			cpumask_set_cpu(cpu, cpumask);
+
+		of_node_put(tmp_np);
+	}
+
+put_cpu_node:
+	of_node_put(np);
+	return ret;
+}
+EXPORT_SYMBOL_GPL(dev_pm_opp_of_get_sharing_cpus_by_soc_bin);
+
+/**
+ * copy to dev_pm_opp_of_add_table()
+ */
+int dev_pm_opp_of_add_table_by_soc_bin(struct device *dev, int soc_bin)
+{
+	struct device_node *opp_np;
+	int ret;
+
+	/*
+	 * OPPs have two version of bindings now. The older one is deprecated,
+	 * try for the new binding first.
+	 */
+	opp_np = of_get_opp_desc_node_by_soc_bin(dev, soc_bin);
+	if (!opp_np) {
+		/*
+		 * Try old-deprecated bindings for backward compatibility with
+		 * older dtbs.
+		 */
+		return _of_add_opp_table_v1(dev);
+	}
+
+	ret = _of_add_opp_table_v2(dev, opp_np);
+	of_node_put(opp_np);
+
+	return ret;
+}
+EXPORT_SYMBOL_GPL(dev_pm_opp_of_add_table_by_soc_bin);
+
+
+/*
+ * copy to dev_pm_opp_of_cpumask_add_table
+ */
+int
+dev_pm_opp_of_cpumask_add_table_by_soc_bin(cpumask_var_t cpumask, int soc_bin)
+{
+	struct device *cpu_dev;
+	int cpu, ret = 0;
+
+	WARN_ON(cpumask_empty(cpumask));
+
+	for_each_cpu(cpu, cpumask) {
+		cpu_dev = get_cpu_device(cpu);
+		if (!cpu_dev) {
+			pr_err("%s: failed to get cpu%d device\n", __func__,
+			       cpu);
+			continue;
+		}
+
+		ret = dev_pm_opp_of_add_table_by_soc_bin(cpu_dev, soc_bin);
+		if (ret) {
+			pr_err("%s: couldn't find opp table for cpu:%d, %d\n",
+			       __func__, cpu, ret);
+
+			/* Free all other OPPs */
+			dev_pm_opp_of_cpumask_remove_table(cpumask);
+			break;
+		}
+	}
+
+	return ret;
+}
+EXPORT_SYMBOL_GPL(dev_pm_opp_of_cpumask_add_table_by_soc_bin);
+
+/**
+ * dev_pm_opp_axi_bus_divide_ratio() - Gets the axi_bus_divide_ratio
+ * @opp:	opp for which frequency has to be returned for
+ *
+ */
+unsigned long dev_pm_opp_axi_bus_divide_ratio(struct dev_pm_opp *opp)
+{
+	struct dev_pm_opp *tmp_opp;
+	u32 f = 0;
+
+//	opp_rcu_lockdep_assert();
+
+	tmp_opp = rcu_dereference(opp);
+	if (IS_ERR_OR_NULL(tmp_opp) || !tmp_opp->available)
+		pr_err("%s: Invalid parameters\n", __func__);
+	else
+		of_property_read_u32(tmp_opp->np, "axi-bus-divide-ratio", &f);
+
+	return f;
+}
+EXPORT_SYMBOL_GPL(dev_pm_opp_axi_bus_divide_ratio);
+#ifdef CONFIG_ARM_SUNXI_AVS
+/**
+ * dev_pm_opp_get_pval() - Gets the pval
+ * @opp:	opp for which frequency has to be returned for
+ *
+ */
+unsigned long dev_pm_opp_get_pval(struct dev_pm_opp *opp)
+{
+	struct dev_pm_opp *tmp_opp;
+	u32 f = 0;
+
+	tmp_opp = rcu_dereference(opp);
+	if (IS_ERR_OR_NULL(tmp_opp) || !tmp_opp->available)
+		pr_err("%s: Invalid parameters\n", __func__);
+	else
+		of_property_read_u32(tmp_opp->np, "pval", &f);
+
+	return f;
+}
+EXPORT_SYMBOL_GPL(dev_pm_opp_get_pval);
+#endif
