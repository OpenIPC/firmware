diff -drupN a/drivers/video/fbdev/sunxi/disp2/hdmi2/hdmi_core/api/general_ops.h b/drivers/video/fbdev/sunxi/disp2/hdmi2/hdmi_core/api/general_ops.h
--- a/drivers/video/fbdev/sunxi/disp2/hdmi2/hdmi_core/api/general_ops.h	1970-01-01 03:00:00.000000000 +0300
+++ b/drivers/video/fbdev/sunxi/disp2/hdmi2/hdmi_core/api/general_ops.h	2022-06-12 05:28:14.000000000 +0300
@@ -0,0 +1,71 @@
+/*
+ * Allwinner SoCs hdmi2.0 driver.
+ *
+ * Copyright (C) 2016 Allwinner.
+ *
+ * This file is licensed under the terms of the GNU General Public
+ * License version 2.  This program is licensed "as is" without any
+ * warranty of any kind, whether express or implied.
+ */
+
+#ifndef GENERAL_OPS_H_
+#define GENERAL_OPS_H_
+
+#include "../../config.h"
+
+#include <linux/gpio.h>
+#include <linux/regulator/consumer.h>
+#include <linux/pwm.h>
+#include <asm/div64.h>
+#include <linux/of_irq.h>
+#include <linux/of_address.h>
+#include <linux/of_iommu.h>
+#include <linux/of_device.h>
+#include <linux/of_platform.h>
+#include <linux/of_gpio.h>
+#include <linux/compat.h>
+
+/**
+ * Concatenate two parts of two 8-bit bytes into a new 16-bit word
+ * @param bHi first byte
+ * @param oHi shift part of first byte (to be place as most significant
+ * bits)
+ * @param nHi width part of first byte (to be place as most significant
+ * bits)
+ * @param bLo second byte
+ * @param oLo shift part of second byte (to be place as least
+ * significant bits)
+ * @param nLo width part of second byte (to be place as least
+ * significant bits)
+ * @returns 16-bit concatenated word as part of the first byte and part of
+ * the second byte
+ */
+u16 concat_bits(u8 bHi, u8 oHi, u8 nHi, u8 bLo, u8 oLo, u8 nLo);
+
+/** Concatenate two full bytes into a new 16-bit word
+ * @param hi
+ * @param lo
+ * @returns hi as most significant bytes concatenated with lo as least
+ * significant bits.
+ */
+u16 byte_to_word(const u8 hi, const u8 lo);
+
+/** Extract the content of a certain part of a byte
+ * @param data 8bit byte
+ * @param shift shift from the start of the bit (0)
+ * @param width width of the desired part starting from shift
+ * @returns an 8bit byte holding only the desired part of the passed on
+ * data byte
+ */
+u8 bit_field(const u16 data, u8 shift, u8 width);
+
+/** Concatenate four 8-bit bytes into a new 32-bit word
+ * @param b3 assumed as most significant 8-bit byte
+ * @param b2
+ * @param b1
+ * @param b0 assumed as least significant 8bit byte
+ * @returns a 2D word, 32bits, composed of the 4 passed on parameters
+ */
+u32 byte_to_dword(u8 b3, u8 b2, u8 b1, u8 b0);
+
+#endif /* GENERAL_OPS_H_ */
