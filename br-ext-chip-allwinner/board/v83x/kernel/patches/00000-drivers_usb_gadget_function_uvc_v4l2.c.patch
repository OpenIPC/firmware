diff -drupN a/drivers/usb/gadget/function/uvc_v4l2.c b/drivers/usb/gadget/function/uvc_v4l2.c
--- a/drivers/usb/gadget/function/uvc_v4l2.c	2018-08-06 17:23:04.000000000 +0300
+++ b/drivers/usb/gadget/function/uvc_v4l2.c	2022-06-12 05:28:14.000000000 +0300
@@ -39,7 +39,11 @@ uvc_send_response(struct uvc_device *uvc
 	struct usb_request *req = uvc->control_req;
 
 	if (data->length < 0)
+#if IS_ENABLED(CONFIG_USB_SUNXI_UDC0)
+		return 0;
+#else
 		return usb_ep_set_halt(cdev->gadget->ep0);
+#endif
 
 	req->length = min_t(unsigned int, uvc->event_length, data->length);
 	req->zero = data->length < uvc->event_length;
@@ -60,7 +64,9 @@ struct uvc_format
 };
 
 static struct uvc_format uvc_formats[] = {
+#if !IS_ENABLED(CONFIG_USB_SUNXI_UDC0)
 	{ 16, V4L2_PIX_FMT_YUYV  },
+#endif
 	{ 0,  V4L2_PIX_FMT_MJPEG },
 };
 
@@ -298,20 +304,25 @@ uvc_v4l2_open(struct file *file)
 	handle->device = &uvc->video;
 	file->private_data = &handle->vfh;
 
+#if !IS_ENABLED(CONFIG_USB_SUNXI_UDC0)
 	uvc_function_connect(uvc);
+#endif
 	return 0;
 }
 
 static int
 uvc_v4l2_release(struct file *file)
 {
+#if !IS_ENABLED(CONFIG_USB_SUNXI_UDC0)
 	struct video_device *vdev = video_devdata(file);
 	struct uvc_device *uvc = video_get_drvdata(vdev);
+#endif
 	struct uvc_file_handle *handle = to_uvc_file_handle(file->private_data);
 	struct uvc_video *video = handle->device;
 
+#if !IS_ENABLED(CONFIG_USB_SUNXI_UDC0)
 	uvc_function_disconnect(uvc);
-
+#endif
 	mutex_lock(&video->mutex);
 	uvcg_video_enable(video, 0);
 	uvcg_free_buffers(&video->queue);
