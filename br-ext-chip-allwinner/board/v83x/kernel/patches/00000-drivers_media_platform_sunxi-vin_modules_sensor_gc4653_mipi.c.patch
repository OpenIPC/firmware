diff -drupN a/drivers/media/platform/sunxi-vin/modules/sensor/gc4653_mipi.c b/drivers/media/platform/sunxi-vin/modules/sensor/gc4653_mipi.c
--- a/drivers/media/platform/sunxi-vin/modules/sensor/gc4653_mipi.c	1970-01-01 03:00:00.000000000 +0300
+++ b/drivers/media/platform/sunxi-vin/modules/sensor/gc4653_mipi.c	2022-06-12 05:28:14.000000000 +0300
@@ -0,0 +1,893 @@
+/*
+ * A V4L2 driver for Raw cameras.
+ *
+ * Copyright (c) 2017 by Allwinnertech Co., Ltd.  http://www.allwinnertech.com
+ *
+ * Authors:  Chen weihong <chenweihong@allwinnertech.com>
+ *
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/i2c.h>
+#include <linux/delay.h>
+#include <linux/videodev2.h>
+#include <linux/clk.h>
+#include <media/v4l2-device.h>
+#include <media/v4l2-mediabus.h>
+#include <linux/io.h>
+
+#include "camera.h"
+#include "sensor_helper.h"
+
+MODULE_AUTHOR("cwh");
+MODULE_DESCRIPTION("A low-level driver for GC4653 sensors");
+MODULE_LICENSE("GPL");
+
+#define MCLK              (24*1000*1000)
+#define V4L2_IDENT_SENSOR  0x4653
+
+//define the registers
+#define EXP_HIGH		0xff
+#define EXP_MID			0x03
+#define EXP_LOW			0x04
+#define GAIN_HIGH		0xff
+#define GAIN_LOW		0x24
+/*
+ * Our nominal (default) frame rate.
+ */
+#define ID_REG_HIGH		0x03f0
+#define ID_REG_LOW		0x03f1
+#define ID_VAL_HIGH		((V4L2_IDENT_SENSOR) >> 8)
+#define ID_VAL_LOW		((V4L2_IDENT_SENSOR) & 0xff)
+#define SENSOR_FRAME_RATE 30
+
+/*
+ * The GC4653 i2c address
+ */
+#define I2C_ADDR 0x52
+
+#define SENSOR_NUM 0x2
+#define SENSOR_NAME "gc4653_mipi"
+#define SENSOR_NAME_2 "gc4653_mipi_2"
+
+/*
+ * The default register settings
+ */
+
+static struct regval_list sensor_default_regs[] = {
+
+};
+
+static struct regval_list sensor_2k30_regs[] = {
+	{0x03fe, 0xf0},
+	{0x03fe, 0x00},
+	{0x0317, 0x00},
+	{0x0320, 0x77},
+	{0x0324, 0xc8},
+	{0x0325, 0x06},
+	{0x0326, 0x6c},
+	{0x0327, 0x03},
+	{0x0334, 0x40},
+	{0x0336, 0x6c},
+	{0x0337, 0x82},
+	{0x033e, 0xc0},
+	{0x033f, 0x12},
+	{0x0340, 0xdc},
+	{0x0341, 0x05},
+	{0x0315, 0x25},
+	{0x031c, 0xc6},
+	/****************************************/
+	/*frame structure*/
+	/****************************************/
+	{0x0287, 0x18},
+	{0x0084, 0x00},
+	{0x0087, 0x50},
+	{0x029d, 0x08},
+	{0x0290, 0x00},
+	/**********AHD 30 other need change ******************/
+	{0x0340, 0x05},
+	{0x0341, 0xdc},
+	{0x0345, 0x06},
+	{0x034b, 0xb0},
+	{0x0352, 0x08},
+	{0x0354, 0x08},
+	/****************************************/
+	/*ANALOG CIRCUIT*/
+	/****************************************/
+	{0x02d1, 0xb0},
+	{0x023c, 0x05},
+	{0x0223, 0xfb},
+	{0x0232, 0xc4},
+	{0x0279, 0x53},
+	{0x02d3, 0x01},
+	{0x0243, 0x06},
+	{0x02ce, 0xbf},
+	{0x02ee, 0x30},
+	{0x026f, 0x70},
+	{0x0257, 0x09},
+	{0x0211, 0x02},
+	{0x0219, 0x09},
+	{0x023f, 0x2d},
+	{0x0518, 0x00},
+	{0x0519, 0x01},
+	{0x0515, 0x08},
+	{0x02d9, 0x3f},
+	{0x02da, 0x02},
+	{0x02db, 0xe8},
+	{0x02e6, 0x20},
+	{0x021b, 0x10},
+	{0x0252, 0x22},
+	{0x024e, 0x22},
+	{0x02c4, 0x01},
+	{0x021d, 0x07},
+	{0x024a, 0x01},
+	{0x02ca, 0x02},
+	{0x0262, 0x10},
+	{0x029a, 0x20},
+	{0x021c, 0x0e},
+	{0x0298, 0x03},
+	{0x029c, 0x00},
+	{0x027e, 0x14},
+	{0x02c2, 0x10},
+	{0x0540, 0x20},
+	{0x0546, 0x01},
+	{0x0548, 0x01},
+	{0x0544, 0x01},
+	{0x0242, 0x1b},
+	{0x02c0, 0x1b},
+	{0x02c3, 0x20},
+	{0x02e4, 0x10},
+	{0x022e, 0x00},
+	{0x027b, 0x3f},
+	{0x0269, 0x0f},
+	{0x02d2, 0x40},
+	{0x027c, 0x08},
+	{0x023a, 0x2e},
+	{0x0245, 0xce},
+	{0x0530, 0x20},
+	{0x0531, 0x02},
+	{0x0228, 0x28},
+	{0x02ab, 0x00},
+	{0x0250, 0x00},
+	{0x0221, 0x28},
+	{0x02ac, 0x00},
+	{0x02a5, 0x02},
+	{0x0260, 0x0b},
+	{0x0216, 0x04},
+	{0x0299, 0x1C},
+	{0x02bb, 0x0d},
+	{0x02a3, 0x02},
+	{0x02a4, 0x02},
+	{0x021e, 0x02},
+	{0x024f, 0x08},
+	{0x028c, 0x08},
+	{0x0532, 0x3f},
+	{0x0533, 0x02},
+	{0x0277, 0x58},
+	{0x0276, 0x70},
+	{0x0239, 0xc0},
+	/*exp*/
+	{0x0202, 0x05},
+	{0x0203, 0xd0},
+	/*GAIN*/
+	{0x0205, 0xc0},
+	{0x02b0, 0x60},
+	/*DPC*/
+	{0x0002, 0xa9},
+	{0x0004, 0x01},
+	/****************************************/
+	/*mipi*/
+	/****************************************/
+	/*********** AHD 30 ******************/
+	/*30fps*/
+	{0x0342, 0x06},
+	{0x0343, 0x40},
+	{0x03fe, 0x10},
+	{0x03fe, 0x00},
+	{0x0106, 0x78},
+	{0x0108, 0x0c},
+	{0x0114, 0x01},
+	{0x0115, 0x12},
+	{0x0180, 0x46},
+	{0x0181, 0x30},
+	{0x0182, 0x05},
+	{0x0185, 0x01},
+	{0x03fe, 0x10},
+	{0x03fe, 0x00},
+	{0x0100, 0x09},
+
+};
+
+/*
+ * Here we'll try to encapsulate the changes for just the output
+ * video format.
+ *
+ */
+
+static struct regval_list sensor_fmt_raw[] = {
+
+};
+
+
+/*
+ * Code for dealing with controls.
+ * fill with different sensor module
+ * different sensor module has different settings here
+ * if not support the follow function , retrun -EINVAL
+ */
+
+static int sensor_g_exp(struct v4l2_subdev *sd, __s32 *value)
+{
+	struct sensor_info *info = to_state(sd);
+	*value = info->exp;
+	sensor_dbg("sensor_get_exposure = %d\n", info->exp);
+	return 0;
+}
+
+static int sensor_s_exp(struct v4l2_subdev *sd, unsigned int exp_val)
+{
+	struct sensor_info *info = to_state(sd);
+	int tmp_exp_val = exp_val / 16;
+
+	sensor_dbg("exp_val:%d\n", exp_val);
+	sensor_write(sd, 0x202, (tmp_exp_val >> 8) & 0xFF);
+	sensor_write(sd, 0x203, (tmp_exp_val & 0xFF));
+
+	info->exp = exp_val;
+	return 0;
+}
+
+static int sensor_g_gain(struct v4l2_subdev *sd, __s32 *value)
+{
+	struct sensor_info *info = to_state(sd);
+	*value = info->gain;
+	sensor_dbg("sensor_get_gain = %d\n", info->gain);
+	return 0;
+}
+unsigned char regValTable[26][5] = {
+	{0x00, 0x04, 0x42, 0x01, 0x00},
+    {0x20, 0x05, 0x43, 0x01, 0x0B},
+    {0x01, 0x04, 0x42, 0x01, 0x19},
+    {0x21, 0x05, 0x43, 0x01, 0x2a},
+    {0x02, 0x04, 0x42, 0x02, 0x00},
+    {0x22, 0x05, 0x43, 0x02, 0x17},
+    {0x03, 0x05, 0x43, 0x02, 0x33},
+    {0x23, 0x06, 0x44, 0x03, 0x14},
+    {0x04, 0x06, 0x44, 0x04, 0x00},
+    {0x24, 0x08, 0x46, 0x04, 0x2f},
+    {0x05, 0x08, 0x46, 0x05, 0x26},
+    {0x25, 0x0a, 0x48, 0x06, 0x28},
+    {0x06, 0x0c, 0x4a, 0x08, 0x00},
+    {0x26, 0x0d, 0x4b, 0x09, 0x1E},
+    {0x46, 0x0f, 0x4d, 0x0B, 0x0C},
+    {0x66, 0x11, 0x4f, 0x0D, 0x11},
+    {0x0e, 0x13, 0x51, 0x10, 0x00},
+    {0x2e, 0x16, 0x54, 0x12, 0x3D},
+    {0x4e, 0x19, 0x57, 0x16, 0x19},
+    {0x6e, 0x1b, 0x59, 0x1A, 0x22},
+    {0x1e, 0x1e, 0x5c, 0x20, 0x00},
+    {0x3e, 0x21, 0x5f, 0x25, 0x3A},
+    {0x5e, 0x25, 0x63, 0x2C, 0x33},
+    {0x7e, 0x29, 0x67, 0x35, 0x05},
+    {0x9e, 0x2d, 0x6b, 0x40, 0x00},
+    {0xbe, 0x31, 0x6f, 0x4B, 0x35},
+};
+
+unsigned int gainLevelTable[26] = {
+	64, 75, 89, 106, 128, 151,
+	179, 212, 256, 303, 358, 424,
+	512, 606, 716, 849, 1024, 1213,
+	1433, 1698, 2048, 2426, 2867,
+	3397, 4096, 4853,
+};
+
+static int setSensorGain(struct v4l2_subdev *sd, int gain)
+{
+	int i;
+	int total;
+	unsigned int tol_dig_gain = 0;
+
+	total = sizeof(gainLevelTable) / sizeof(unsigned int);
+	for (i = 0; i < total-1; i++) {
+		if ((gainLevelTable[i] <= gain) && (gain < gainLevelTable[i+1]))
+			break;
+	}
+
+	tol_dig_gain = gain * 64 / gainLevelTable[i];
+	sensor_write(sd, 0x2b3, regValTable[i][0]);
+	sensor_write(sd, 0x519, regValTable[i][1]);
+	sensor_write(sd, 0x2d9, regValTable[i][2]);
+	sensor_write(sd, 0x2b8, regValTable[i][3]);
+	sensor_write(sd, 0x2b9, regValTable[i][4]);
+	sensor_write(sd, 0x20e, (tol_dig_gain>>6));
+	sensor_write(sd, 0x20f, ((tol_dig_gain&0x3f)<<2));
+
+	return 0;
+}
+static int sensor_s_gain(struct v4l2_subdev *sd, int gain_val)
+{
+	struct sensor_info *info = to_state(sd);
+
+	if (gain_val == info->gain) {
+		return 0;
+	}
+
+	sensor_dbg("gain_val:%d\n", gain_val);
+	setSensorGain(sd, gain_val * 4);
+
+	info->gain = gain_val;
+
+	return 0;
+}
+
+
+static int sensor_s_exp_gain(struct v4l2_subdev *sd,
+				 struct sensor_exp_gain *exp_gain)
+{
+	int exp_val, gain_val;
+	struct sensor_info *info = to_state(sd);
+
+	exp_val = exp_gain->exp_val;
+	gain_val = exp_gain->gain_val;
+
+	if (gain_val < (1 * 16)) {
+		gain_val = 16;
+	}
+
+	if (exp_val > 0xfffff)
+		exp_val = 0xfffff;
+
+	sensor_s_exp(sd, exp_val);
+	sensor_s_gain(sd, gain_val);
+
+	info->exp = exp_val;
+	info->gain = gain_val;
+	return 0;
+}
+
+/*
+ * Stuff that knows about the sensor.
+ */
+static int sensor_power(struct v4l2_subdev *sd, int on)
+{
+	switch (on) {
+	case STBY_ON:
+		sensor_dbg("STBY_ON!\n");
+		cci_lock(sd);
+		vin_gpio_write(sd, PWDN, CSI_GPIO_HIGH);
+		cci_unlock(sd);
+		break;
+
+	case STBY_OFF:
+		sensor_dbg("STBY_OFF!\n");
+		cci_lock(sd);
+		vin_set_mclk_freq(sd, MCLK);
+		vin_set_mclk(sd, ON);
+		usleep_range(10000, 12000);
+		vin_gpio_write(sd, PWDN, CSI_GPIO_LOW);
+		usleep_range(10000, 12000);
+		cci_unlock(sd);
+		usleep_range(10000, 12000);
+		break;
+
+	case PWR_ON:
+		sensor_dbg("PWR_ON!\n");
+		cci_lock(sd);
+		vin_gpio_set_status(sd, PWDN, 1);
+		vin_gpio_set_status(sd, RESET, 1);
+		vin_gpio_set_status(sd, POWER_EN, 1);
+		vin_gpio_write(sd, PWDN, CSI_GPIO_LOW);
+		vin_gpio_write(sd, RESET, CSI_GPIO_LOW);
+		usleep_range(1000, 1200);
+		#if 0//sk
+		vin_gpio_write(sd, POWER_EN, CSI_GPIO_HIGH);
+		#endif
+		vin_set_pmu_channel(sd, IOVDD, ON);
+		usleep_range(100, 120);
+		vin_set_pmu_channel(sd, DVDD, ON);
+		usleep_range(1000, 1200);
+		vin_set_pmu_channel(sd, AVDD, ON);
+		vin_set_mclk(sd, ON);
+		usleep_range(1000, 1200);
+		vin_set_mclk_freq(sd, MCLK);
+		usleep_range(10000, 12000);
+		vin_gpio_write(sd, PWDN, CSI_GPIO_HIGH);
+		usleep_range(10000, 12000);
+		vin_gpio_write(sd, RESET, CSI_GPIO_HIGH);
+		usleep_range(30000, 31000);
+		cci_unlock(sd);
+		break;
+
+	case PWR_OFF:
+		sensor_dbg("PWR_OFF!do nothing\n");
+		cci_lock(sd);
+		vin_set_mclk(sd, OFF);
+		vin_gpio_write(sd, POWER_EN, CSI_GPIO_LOW);
+		//vin_set_pmu_channel(sd, CMBCSI, OFF);
+		vin_set_pmu_channel(sd, AVDD, OFF);
+		vin_set_pmu_channel(sd, DVDD, OFF);
+		vin_set_pmu_channel(sd, IOVDD, OFF);
+		usleep_range(10000, 12000);
+		vin_gpio_write(sd, PWDN, CSI_GPIO_HIGH);
+		vin_gpio_write(sd, RESET, CSI_GPIO_LOW);
+		vin_gpio_set_status(sd, RESET, 0);
+		vin_gpio_set_status(sd, PWDN, 0);
+		cci_unlock(sd);
+		break;
+
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static int sensor_reset(struct v4l2_subdev *sd, u32 val)
+{
+
+	sensor_dbg("%s: val=%d\n", __func__);
+	switch (val) {
+	case 0:
+		vin_gpio_write(sd, RESET, CSI_GPIO_HIGH);
+		usleep_range(10000, 12000);
+		break;
+
+	case 1:
+		vin_gpio_write(sd, RESET, CSI_GPIO_LOW);
+		usleep_range(10000, 12000);
+		break;
+
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static int sensor_detect(struct v4l2_subdev *sd)
+{
+	data_type rdval;
+	int eRet;
+	int times_out = 3;
+	do {
+		eRet = sensor_read(sd, ID_REG_HIGH, &rdval);
+		sensor_dbg("eRet:%d, ID_VAL_HIGH:0x%x, times_out:%d\n", eRet, rdval, times_out);
+		usleep_range(200000, 220000);
+		times_out--;
+	} while (eRet < 0  &&  times_out > 0);
+
+	sensor_read(sd, ID_REG_HIGH, &rdval);
+	sensor_dbg("ID_VAL_HIGH = %2x, Done!\n", rdval);
+	if (rdval != ID_VAL_HIGH)
+		return -ENODEV;
+
+	sensor_read(sd, ID_REG_LOW, &rdval);
+	sensor_dbg("ID_VAL_LOW = %2x, Done!\n", rdval);
+	if (rdval != ID_VAL_LOW)
+		return -ENODEV;
+
+	sensor_dbg("Done!\n");
+	return 0;
+}
+
+static int sensor_init(struct v4l2_subdev *sd, u32 val)
+{
+	int ret;
+	struct sensor_info *info = to_state(sd);
+
+	sensor_dbg("sensor_init\n");
+
+	/*Make sure it is a target sensor */
+	ret = sensor_detect(sd);
+	if (ret) {
+		sensor_err("chip found is not an target chip.\n");
+		return ret;
+	}
+
+	info->focus_status = 0;
+	info->low_speed    = 0;
+	info->width        = 2560;
+	info->height       = 1440;
+	info->hflip        = 0;
+	info->vflip        = 0;
+	info->gain         = 0;
+	info->exp          = 0;
+
+	info->tpf.numerator      = 1;
+	info->tpf.denominator    = 30;	/* 30fps */
+	info->preview_first_flag = 1;
+	return 0;
+}
+
+static long sensor_ioctl(struct v4l2_subdev *sd, unsigned int cmd, void *arg)
+{
+	int ret = 0;
+	struct sensor_info *info = to_state(sd);
+
+	switch (cmd) {
+	case GET_CURRENT_WIN_CFG:
+		sensor_print("%s: GET_CURRENT_WIN_CFG, info->current_wins=%p\n", __func__, info->current_wins);
+
+		if (info->current_wins != NULL) {
+			memcpy(arg, info->current_wins,
+				sizeof(struct sensor_win_size));
+			ret = 0;
+		} else {
+			sensor_err("empty wins!\n");
+			ret = -1;
+		}
+		break;
+	case SET_FPS:
+		break;
+	case VIDIOC_VIN_SENSOR_EXP_GAIN:
+		sensor_s_exp_gain(sd, (struct sensor_exp_gain *)arg);
+		break;
+	case VIDIOC_VIN_SENSOR_CFG_REQ:
+		sensor_cfg_req(sd, (struct sensor_config *)arg);
+		break;
+	default:
+		return -EINVAL;
+	}
+	return ret;
+}
+
+/*
+ * Store information about the video data format.
+ */
+static struct sensor_format_struct sensor_formats[] = {
+	{
+		.desc      = "Raw RGB Bayer",
+		.mbus_code = MEDIA_BUS_FMT_SGRBG10_1X10, /*.mbus_code = MEDIA_BUS_FMT_SBGGR10_1X10, */
+		.regs      = sensor_fmt_raw,
+		.regs_size = ARRAY_SIZE(sensor_fmt_raw),
+		.bpp       = 1
+	},
+};
+#define N_FMTS ARRAY_SIZE(sensor_formats)
+
+/*
+ * Then there is the issue of window sizes.  Try to capture the info here.
+ */
+
+static struct sensor_win_size sensor_win_sizes[] = {
+	{
+		.width      = 2560,
+		.height     = 1440,
+		.hoffset    = 0,
+		.voffset    = 0,
+		.hts        = 4800,
+		.vts        = 1500,
+		.pclk       = 216 * 1000 * 1000,
+		.mipi_bps   = 648 * 1000 * 1000,
+		.fps_fixed  = 30,
+		.bin_factor = 1,
+		.intg_min   = 1 << 4,
+		.intg_max   = 1500 << 4,
+		.gain_min   = 1 << 4,
+		.gain_max   = 110 << 4,
+		.regs       = sensor_2k30_regs,
+		.regs_size  = ARRAY_SIZE(sensor_2k30_regs),
+		.set_size   = NULL,
+		.top_clk = 300*1000*1000,
+		.isp_clk = 297*1000*1000,
+	},
+};
+
+#define N_WIN_SIZES (ARRAY_SIZE(sensor_win_sizes))
+
+static int sensor_g_mbus_config(struct v4l2_subdev *sd,
+				struct v4l2_mbus_config *cfg)
+{
+
+	cfg->type  = V4L2_MBUS_CSI2;
+	cfg->flags = 0 | V4L2_MBUS_CSI2_2_LANE | V4L2_MBUS_CSI2_CHANNEL_0;
+
+	return 0;
+}
+
+static int sensor_g_ctrl(struct v4l2_ctrl *ctrl)
+{
+	struct sensor_info *info =
+			container_of(ctrl->handler, struct sensor_info, handler);
+	struct v4l2_subdev *sd = &info->sd;
+
+	switch (ctrl->id) {
+	case V4L2_CID_GAIN:
+		return sensor_g_gain(sd, &ctrl->val);
+	case V4L2_CID_EXPOSURE:
+		return sensor_g_exp(sd, &ctrl->val);
+	}
+	return -EINVAL;
+}
+
+static int sensor_queryctrl(struct v4l2_subdev *sd, struct v4l2_queryctrl *qc)
+{
+	/* Fill in min, max, step and default value for these controls. */
+	/* see include/linux/videodev2.h for details */
+	switch (qc->id) {
+	case V4L2_CID_GAIN:
+		return v4l2_ctrl_query_fill(qc, 1 * 16, 128 * 16 - 1, 1, 16);
+	case V4L2_CID_EXPOSURE:
+		return v4l2_ctrl_query_fill(qc, 1, 65536 * 16, 1, 1);
+	}
+	return -EINVAL;
+}
+
+static int sensor_s_ctrl(struct v4l2_ctrl *ctrl)
+{
+	struct v4l2_queryctrl qc;
+	int ret;
+
+	struct sensor_info *info =
+			container_of(ctrl->handler, struct sensor_info, handler);
+	struct v4l2_subdev *sd = &info->sd;
+
+	qc.id = ctrl->id;
+	ret = sensor_queryctrl(sd, &qc);
+	if (ret < 0)
+		return ret;
+
+	if (ctrl->val < qc.minimum || ctrl->val > qc.maximum)
+		return -ERANGE;
+
+	switch (ctrl->id) {
+	case V4L2_CID_GAIN:
+		return sensor_s_gain(sd, ctrl->val);
+	case V4L2_CID_EXPOSURE:
+		return sensor_s_exp(sd, ctrl->val);
+	}
+	return -EINVAL;
+}
+
+static int sensor_reg_init(struct sensor_info *info)
+{
+	int ret;
+	struct v4l2_subdev *sd = &info->sd;
+	struct sensor_format_struct *sensor_fmt = info->fmt;
+	struct sensor_win_size *wsize = info->current_wins;
+
+	sensor_dbg("ARRAY_SIZE(sensor_default_regs)=%d\n",
+			(unsigned int)ARRAY_SIZE(sensor_default_regs));
+
+	ret = sensor_write_array(sd, sensor_default_regs,
+				 ARRAY_SIZE(sensor_default_regs));
+	if (ret < 0) {
+		sensor_err("write sensor_default_regs error\n");
+		return ret;
+	}
+
+	sensor_write_array(sd, sensor_fmt->regs, sensor_fmt->regs_size);
+
+	if (wsize->regs) {
+		sensor_write_array(sd, wsize->regs, wsize->regs_size);
+	}
+
+	if (wsize->set_size)
+		wsize->set_size(sd);
+
+	info->width = wsize->width;
+	info->height = wsize->height;
+
+	sensor_dbg("s_fmt set width = %d, height = %d\n", wsize->width,
+			 wsize->height);
+
+	return 0;
+}
+
+static int sensor_s_stream(struct v4l2_subdev *sd, int enable)
+{
+	struct sensor_info *info = to_state(sd);
+
+	sensor_dbg("%s on = %d, %d*%d fps: %d code: %x\n", __func__, enable,
+			 info->current_wins->width, info->current_wins->height,
+			 info->current_wins->fps_fixed, info->fmt->mbus_code);
+
+	if (!enable)
+		return 0;
+
+	return sensor_reg_init(info);
+}
+
+/* ----------------------------------------------------------------------- */
+static const struct v4l2_ctrl_ops sensor_ctrl_ops = {
+	.g_volatile_ctrl = sensor_g_ctrl,
+	.s_ctrl = sensor_s_ctrl,
+};
+
+static const struct v4l2_subdev_core_ops sensor_core_ops = {
+
+	.reset = sensor_reset,
+	.init = sensor_init,
+	.s_power = sensor_power,
+	.ioctl = sensor_ioctl,
+#ifdef CONFIG_COMPAT
+	.compat_ioctl32 = sensor_compat_ioctl32,
+#endif
+};
+
+static const struct v4l2_subdev_video_ops sensor_video_ops = {
+	.s_parm = sensor_s_parm,
+	.g_parm = sensor_g_parm,
+	.s_stream = sensor_s_stream,
+	.g_mbus_config = sensor_g_mbus_config,
+};
+
+static const struct v4l2_subdev_pad_ops sensor_pad_ops = {
+	.enum_mbus_code = sensor_enum_mbus_code,
+	.enum_frame_size = sensor_enum_frame_size,
+	.get_fmt = sensor_get_fmt,
+	.set_fmt = sensor_set_fmt,
+};
+
+static const struct v4l2_subdev_ops sensor_ops = {
+	.core = &sensor_core_ops,
+	.video = &sensor_video_ops,
+	.pad = &sensor_pad_ops,
+};
+
+/* ----------------------------------------------------------------------- */
+static struct cci_driver cci_drv[] = {
+	{
+		.name = SENSOR_NAME,
+		.addr_width = CCI_BITS_16,
+		.data_width = CCI_BITS_8,
+	}, {
+		.name = SENSOR_NAME_2,
+		.addr_width = CCI_BITS_16,
+		.data_width = CCI_BITS_8,
+	}
+};
+
+static int sensor_init_controls(struct v4l2_subdev *sd, const struct v4l2_ctrl_ops *ops)
+{
+	struct sensor_info *info = to_state(sd);
+	struct v4l2_ctrl_handler *handler = &info->handler;
+	struct v4l2_ctrl *ctrl;
+	int ret = 0;
+
+	v4l2_ctrl_handler_init(handler, 2);
+
+	ctrl = v4l2_ctrl_new_std(handler, ops, V4L2_CID_GAIN, 1 * 1600,
+				  256 * 1600, 1, 1 * 1600);
+
+	if (ctrl != NULL)
+		ctrl->flags |= V4L2_CTRL_FLAG_VOLATILE;
+
+	ctrl = v4l2_ctrl_new_std(handler, ops, V4L2_CID_EXPOSURE, 1,
+				  65536 * 16, 1, 1);
+	if (ctrl != NULL)
+		ctrl->flags |= V4L2_CTRL_FLAG_VOLATILE;
+
+	if (handler->error) {
+		ret = handler->error;
+		v4l2_ctrl_handler_free(handler);
+	}
+
+	sd->ctrl_handler = handler;
+
+	return ret;
+}
+static int sensor_dev_id;
+
+static int sensor_probe(struct i2c_client *client,
+			const struct i2c_device_id *id)
+{
+	struct v4l2_subdev *sd;
+	struct sensor_info *info;
+	int i;
+
+	info = kzalloc(sizeof(struct sensor_info), GFP_KERNEL);
+	if (info == NULL)
+		return -ENOMEM;
+	sd = &info->sd;
+
+	if (client) {
+		for (i = 0; i < SENSOR_NUM; i++) {
+			if (!strcmp(cci_drv[i].name, client->name))
+				break;
+		}
+		cci_dev_probe_helper(sd, client, &sensor_ops, &cci_drv[i]);
+	} else {
+		cci_dev_probe_helper(sd, client, &sensor_ops, &cci_drv[sensor_dev_id++]);
+	}
+
+	sensor_init_controls(sd, &sensor_ctrl_ops);
+
+	mutex_init(&info->lock);
+
+	info->fmt = &sensor_formats[0];
+	info->fmt_pt = &sensor_formats[0];
+	info->win_pt = &sensor_win_sizes[0];
+	info->fmt_num = N_FMTS;
+	info->win_size_num = N_WIN_SIZES;
+	info->sensor_field = V4L2_FIELD_NONE;
+	info->combo_mode = CMB_TERMINAL_RES | CMB_PHYA_OFFSET3 | MIPI_NORMAL_MODE;
+	info->stream_seq = MIPI_BEFORE_SENSOR;
+	info->af_first_flag = 1;
+	info->exp = 0;
+	info->gain = 0;
+
+	return 0;
+}
+
+static int sensor_remove(struct i2c_client *client)
+{
+	struct v4l2_subdev *sd;
+	int i;
+
+	if (client) {
+		for (i = 0; i < SENSOR_NUM; i++) {
+			if (!strcmp(cci_drv[i].name, client->name))
+				break;
+		}
+		sd = cci_dev_remove_helper(client, &cci_drv[i]);
+	} else {
+		sd = cci_dev_remove_helper(client, &cci_drv[sensor_dev_id++]);
+	}
+
+	kfree(to_state(sd));
+	return 0;
+}
+
+static const struct i2c_device_id sensor_id[] = {
+	{SENSOR_NAME, 0},
+	{}
+};
+
+static const struct i2c_device_id sensor_id_2[] = {
+	{SENSOR_NAME_2, 0},
+	{}
+};
+
+MODULE_DEVICE_TABLE(i2c, sensor_id);
+MODULE_DEVICE_TABLE(i2c, sensor_id_2);
+
+static struct i2c_driver sensor_driver[] = {
+	{
+		.driver = {
+			   .owner = THIS_MODULE,
+			   .name = SENSOR_NAME,
+			   },
+		.probe = sensor_probe,
+		.remove = sensor_remove,
+		.id_table = sensor_id,
+	}, {
+		.driver = {
+			   .owner = THIS_MODULE,
+			   .name = SENSOR_NAME_2,
+			   },
+		.probe = sensor_probe,
+		.remove = sensor_remove,
+		.id_table = sensor_id_2,
+	},
+};
+static __init int init_sensor(void)
+{
+	int i, ret = 0;
+
+	sensor_dev_id = 0;
+
+	for (i = 0; i < SENSOR_NUM; i++)
+		ret = cci_dev_init_helper(&sensor_driver[i]);
+
+	return ret;
+}
+
+static __exit void exit_sensor(void)
+{
+	int i;
+
+	sensor_dev_id = 0;
+
+	for (i = 0; i < SENSOR_NUM; i++)
+		cci_dev_exit_helper(&sensor_driver[i]);
+}
+
+module_init(init_sensor);
+module_exit(exit_sensor);
