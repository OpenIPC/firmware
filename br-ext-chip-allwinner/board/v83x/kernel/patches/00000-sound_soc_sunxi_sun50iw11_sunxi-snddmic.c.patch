diff -drupN a/sound/soc/sunxi/sun50iw11/sunxi-snddmic.c b/sound/soc/sunxi/sun50iw11/sunxi-snddmic.c
--- a/sound/soc/sunxi/sun50iw11/sunxi-snddmic.c	1970-01-01 03:00:00.000000000 +0300
+++ b/sound/soc/sunxi/sun50iw11/sunxi-snddmic.c	2022-06-12 05:28:14.000000000 +0300
@@ -0,0 +1,388 @@
+/*
+ * sound\soc\sunxi\sun50iw11\sunxi-snddmic.c
+ * (C) Copyright 2019-2025
+ * Allwinner Technology Co., Ltd. <www.allwinnertech.com>
+ * yumingfeng <yumingfeng@allwinnertech.com>
+ *
+ * some simple description for this code
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/clk.h>
+#include <linux/mutex.h>
+#include <sound/pcm.h>
+#include <sound/soc.h>
+#include <sound/pcm_params.h>
+#include <sound/soc-dapm.h>
+#include <linux/io.h>
+#include <linux/of.h>
+
+#ifdef CONFIG_SND_SUN50IW11_MAD
+#include "sunxi-mad.h"
+#endif
+
+#include "sunxi-snddmic.h"
+
+static int sunxi_snddmic_hw_params(struct snd_pcm_substream *substream,
+					struct snd_pcm_hw_params *params)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
+	int ret = 0;
+	int freq;
+
+	switch (params_rate(params)) {
+	case	8000:
+	case	16000:
+	case	32000:
+	case	12000:
+	case	24000:
+	case	48000:
+	case	96000:
+	case	192000:
+		freq = 24576000;
+		break;
+	case	11025:
+	case	22050:
+	case	44100:
+	case	88200:
+	case	176400:
+		freq = 22579200;
+		break;
+	default:
+		pr_debug("invalid rate setting\n");
+		return -EINVAL;
+	}
+
+	ret = snd_soc_dai_set_sysclk(cpu_dai, 0, freq, 0);
+	if (ret < 0) {
+		dev_err(rtd->dev, "invalid rate setting.\n");
+		return ret;
+	}
+
+	return 0;
+}
+
+#ifdef CONFIG_SND_SUN50IW11_MAD
+static int sunxi_snddmic_mad_startup(struct snd_pcm_substream *substream)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct sunxi_snddmic_priv *snddmic_priv =
+				snd_soc_card_get_drvdata(rtd->card);
+
+	if (snddmic_priv->mad_priv.mad_bind == 1)
+		rtd->dai_link->ignore_suspend = 1;
+	return 0;
+}
+#endif
+
+/*enable the snddmic suspend */
+static int sunxi_snddmic_startup(struct snd_pcm_substream *substream)
+{
+#ifdef CONFIG_SND_SUN50IW11_MAD
+	return sunxi_snddmic_mad_startup(substream);
+#else
+	return 0;
+#endif
+}
+
+#ifdef CONFIG_SND_SUN50IW11_MAD
+/*disable the snddmic suspend */
+static void sunxi_snddmic_mad_shutdown(struct snd_pcm_substream *substream)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct sunxi_snddmic_priv *snddmic_priv =
+				snd_soc_card_get_drvdata(rtd->card);
+
+	if (snddmic_priv->mad_priv.mad_bind == 1)
+		rtd->dai_link->ignore_suspend = 0;
+}
+#endif
+
+static void sunxi_snddmic_shutdown(struct snd_pcm_substream *substream)
+{
+#ifdef CONFIG_SND_SUN50IW11_MAD
+	sunxi_snddmic_mad_shutdown(substream);
+#endif
+}
+
+#ifdef CONFIG_SND_SUN50IW11_MAD
+/*lpsd channel sel*/
+static int sunxi_snddmic_set_lpsd_chan(struct snd_kcontrol *kcontrol,
+	struct snd_ctl_elem_value *ucontrol)
+{
+	struct snd_soc_card *card = snd_kcontrol_chip(kcontrol);
+	struct sunxi_snddmic_priv *snddmic_priv =
+				snd_soc_card_get_drvdata(card);
+	struct sunxi_mad_priv *mad_priv = &snddmic_priv->mad_priv;
+
+	mad_priv->lpsd_chan_sel = ucontrol->value.enumerated.item[0];
+	sunxi_lpsd_chan_sel(mad_priv->lpsd_chan_sel);
+
+	return 0;
+}
+
+static int sunxi_snddmic_get_lpsd_chan(struct snd_kcontrol *kcontrol,
+	struct snd_ctl_elem_value *ucontrol)
+{
+	struct snd_soc_card *card = snd_kcontrol_chip(kcontrol);
+	struct sunxi_snddmic_priv *snddmic_priv =
+				snd_soc_card_get_drvdata(card);
+	struct sunxi_mad_priv *mad_priv = &snddmic_priv->mad_priv;
+
+	ucontrol->value.enumerated.item[0] = mad_priv->lpsd_chan_sel;
+	return 0;
+}
+
+static const char * const lpsd_chan_sel_function[] = {"0th_chan", "1st_chan",
+		"2nd_chan", "3rd_chan", "4th_chan", "5th_chan",
+		"6th_chan", "7th_chan", "8th_chan"};
+
+static const struct soc_enum lpsd_chan_sel_enum[] = {
+	SOC_ENUM_SINGLE_EXT(ARRAY_SIZE(lpsd_chan_sel_function),
+			lpsd_chan_sel_function),
+};
+
+/*mad_standby channel sel*/
+static int sunxi_snddmic_set_mad_standby_chan(struct snd_kcontrol *kcontrol,
+	struct snd_ctl_elem_value *ucontrol)
+{
+	struct snd_soc_card *card = snd_kcontrol_chip(kcontrol);
+	struct sunxi_snddmic_priv *snddmic_priv =
+				snd_soc_card_get_drvdata(card);
+	struct sunxi_mad_priv *mad_priv = &snddmic_priv->mad_priv;
+
+	mad_priv->mad_standby_chan_sel = ucontrol->value.enumerated.item[0];
+	sunxi_mad_standby_chan_sel(mad_priv->mad_standby_chan_sel);
+
+	return 0;
+}
+
+static int sunxi_snddmic_get_mad_standby_chan(struct snd_kcontrol *kcontrol,
+	struct snd_ctl_elem_value *ucontrol)
+{
+	struct snd_soc_card *card = snd_kcontrol_chip(kcontrol);
+	struct sunxi_snddmic_priv *snddmic_priv =
+				snd_soc_card_get_drvdata(card);
+	struct sunxi_mad_priv *mad_priv = &snddmic_priv->mad_priv;
+
+	ucontrol->value.enumerated.item[0] = mad_priv->mad_standby_chan_sel;
+	return 0;
+}
+
+/* FIXME: fix the RD_POINTER at "Zero_chan" mode */
+static const char * const mad_standby_chan_sel_function[] = {
+	"Zero_Chan", "Two_Chan", "Four_Chan",
+};
+
+static const struct soc_enum mad_standby_chan_sel_enum[] = {
+	SOC_ENUM_SINGLE_EXT(ARRAY_SIZE(mad_standby_chan_sel_function),
+			mad_standby_chan_sel_function),
+};
+
+/*mad_bind config*/
+static int sunxi_snddmic_set_mad_bind(struct snd_kcontrol *kcontrol,
+	struct snd_ctl_elem_value *ucontrol)
+{
+	struct snd_soc_card *card = snd_kcontrol_chip(kcontrol);
+	struct sunxi_snddmic_priv *snddmic_priv =
+				snd_soc_card_get_drvdata(card);
+
+	snddmic_priv->mad_priv.mad_bind = ucontrol->value.enumerated.item[0];
+	return 0;
+}
+
+static int sunxi_snddmic_get_mad_bind(struct snd_kcontrol *kcontrol,
+	struct snd_ctl_elem_value *ucontrol)
+{
+	struct snd_soc_card *card = snd_kcontrol_chip(kcontrol);
+	struct sunxi_snddmic_priv *snddmic_priv =
+				snd_soc_card_get_drvdata(card);
+
+	ucontrol->value.enumerated.item[0] = snddmic_priv->mad_priv.mad_bind;
+	return 0;
+}
+
+static const char *mad_bind_function[] = {"mad_unbind", "mad_bind"};
+
+static const struct soc_enum mad_bind_enum[] = {
+	SOC_ENUM_SINGLE_EXT(ARRAY_SIZE(mad_bind_function),
+			mad_bind_function),
+};
+
+/* dmic machine kcontrols */
+static const struct snd_kcontrol_new sunxi_snddmic_controls[] = {
+	SOC_ENUM_EXT("dmic bind mad function", mad_bind_enum[0],
+		sunxi_snddmic_get_mad_bind, sunxi_snddmic_set_mad_bind),
+	SOC_ENUM_EXT("lpsd channel sel function", lpsd_chan_sel_enum[0],
+		sunxi_snddmic_get_lpsd_chan, sunxi_snddmic_set_lpsd_chan),
+	SOC_ENUM_EXT("mad standby channel sel function",
+		mad_standby_chan_sel_enum[0],
+		sunxi_snddmic_get_mad_standby_chan,
+		sunxi_snddmic_set_mad_standby_chan),
+};
+#endif
+
+static struct snd_soc_ops sunxi_snddmic_ops = {
+	.hw_params	= sunxi_snddmic_hw_params,
+	.startup = sunxi_snddmic_startup,
+	.shutdown = sunxi_snddmic_shutdown,
+};
+
+#ifdef CONFIG_SND_SUN50IW11_MAD
+static int sunxi_snddmic_mad_init(struct snd_soc_pcm_runtime *rtd)
+{
+	struct sunxi_snddmic_priv *snddmic_priv =
+				snd_soc_card_get_drvdata(rtd->card);
+
+	snddmic_priv->mad_priv.mad_bind = 0;
+	snddmic_priv->mad_priv.lpsd_chan_sel = 0;
+	snddmic_priv->mad_priv.mad_standby_chan_sel = 1;
+
+	return 0;
+}
+#endif
+
+static int sunxi_snddmic_init(struct snd_soc_pcm_runtime *rtd)
+{
+#ifdef CONFIG_SND_SUN50IW11_MAD
+	sunxi_snddmic_mad_init(rtd);
+#endif
+
+	return 0;
+}
+
+static struct snd_soc_dai_link sunxi_snddmic_dai_link = {
+	.name		= "DMIC",
+	.stream_name	= "SUNXI-DMIC",
+	.codec_name	= "dmic-codec",
+	.codec_dai_name = "dmic-hifi",
+	.ops		= &sunxi_snddmic_ops,
+	.init		= sunxi_snddmic_init,
+	.capture_only = 1,
+};
+
+static struct snd_soc_card snd_soc_sunxi_snddmic = {
+	.name		= "snddmic",
+	.owner		= THIS_MODULE,
+	.dai_link	= &sunxi_snddmic_dai_link,
+	.num_links	= 1,
+#ifdef CONFIG_SND_SUN50IW11_MAD
+	.controls = sunxi_snddmic_controls,
+	.num_controls = ARRAY_SIZE(sunxi_snddmic_controls),
+#endif
+};
+
+static int sunxi_snddmic_dev_probe(struct platform_device *pdev)
+{
+	int ret = 0;
+	struct snd_soc_card *card = &snd_soc_sunxi_snddmic;
+	struct device_node *np = pdev->dev.of_node;
+	struct sunxi_snddmic_priv *snddmic_priv;
+
+	snddmic_priv = devm_kzalloc(&pdev->dev,
+			sizeof(struct sunxi_snddmic_priv), GFP_KERNEL);
+	if (!snddmic_priv) {
+		dev_err(card->dev, "Can't malloc the sunxi_snddmic_priv!\n");
+		return -ENOMEM;
+	}
+	snddmic_priv->card = card;
+	card->dev = &pdev->dev;
+
+	sunxi_snddmic_dai_link.cpu_dai_name = NULL;
+	sunxi_snddmic_dai_link.cpu_of_node = of_parse_phandle(np,
+					"sunxi,dmic-controller", 0);
+	if (!sunxi_snddmic_dai_link.cpu_of_node) {
+		dev_err(&pdev->dev, "Property 'sunxi,dmic-controller' missing or invalid\n");
+		ret = -EINVAL;
+		goto err_of_get_cpunode;
+	}
+	sunxi_snddmic_dai_link.platform_name = NULL;
+	sunxi_snddmic_dai_link.platform_of_node =
+				sunxi_snddmic_dai_link.cpu_of_node;
+
+	snddmic_priv->codec_device = platform_device_alloc("dmic-codec", -1);
+	if (!snddmic_priv->codec_device) {
+		dev_err(&pdev->dev, "dmic codec alloc failed\n");
+		ret = -ENOMEM;
+		goto err_platform_dev_alloc;
+	}
+
+	ret = platform_device_add(snddmic_priv->codec_device);
+	if (ret) {
+		dev_err(&pdev->dev, "dmic codec add failed\n");
+		ret = -EBUSY;
+		goto err_platform_dev_add;
+	}
+
+#ifdef CONFIG_SND_SUN50IW11_MAD
+	snddmic_priv->mad_priv.mad_bind = 0;
+#ifdef MAD_CLK_ALWAYS_ON
+	snddmic_priv->mad_priv.mad_clk_enable = 1;
+#else
+	snddmic_priv->mad_priv.mad_clk_enable = 0;
+#endif
+	snddmic_priv->mad_priv.stop_mad_reset = 0;
+	mutex_init(&snddmic_priv->mad_priv.mad_clk_mutex);
+#endif
+
+	snd_soc_card_set_drvdata(card, snddmic_priv);
+
+	ret = snd_soc_register_card(card);
+	if (ret) {
+		dev_err(&pdev->dev, "snd_soc_register_card() fail: %d\n", ret);
+		ret = -EBUSY;
+		goto err_snd_register_card;
+	}
+	return ret;
+
+err_snd_register_card:
+	platform_device_del(snddmic_priv->codec_device);
+err_platform_dev_add:
+	platform_device_put(snddmic_priv->codec_device);
+err_platform_dev_alloc:
+err_of_get_cpunode:
+	devm_kfree(&pdev->dev, snddmic_priv);
+	return ret;
+}
+
+static int sunxi_snddmic_dev_remove(struct platform_device *pdev)
+{
+	struct snd_soc_card *card = platform_get_drvdata(pdev);
+	struct sunxi_snddmic_priv *snddmic_priv =
+				snd_soc_card_get_drvdata(card);
+
+	snd_soc_unregister_card(card);
+	platform_device_del(snddmic_priv->codec_device);
+	platform_device_put(snddmic_priv->codec_device);
+	devm_kfree(&pdev->dev, snddmic_priv);
+	return 0;
+}
+
+static const struct of_device_id sunxi_dmic_of_match[] = {
+	{ .compatible = "allwinner,sunxi-dmic-machine", },
+	{},
+};
+
+static struct platform_driver sunxi_dmic_driver = {
+	.driver = {
+		.name = "snddmic",
+		.owner = THIS_MODULE,
+		.of_match_table = sunxi_dmic_of_match,
+		.pm = &snd_soc_pm_ops,
+	},
+	.probe = sunxi_snddmic_dev_probe,
+	.remove = sunxi_snddmic_dev_remove,
+};
+module_platform_driver(sunxi_dmic_driver);
+
+MODULE_AUTHOR("yumingfeng <yumingfeng@allwinnertech.com>");
+MODULE_DESCRIPTION("SUNXI DMIC Machine ASoC driver");
+MODULE_ALIAS("platform:snddmic");
+MODULE_LICENSE("GPL");
