diff -drupN a/drivers/pinctrl/sunxi/pinctrl-sun8iw19p1-r.c b/drivers/pinctrl/sunxi/pinctrl-sun8iw19p1-r.c
--- a/drivers/pinctrl/sunxi/pinctrl-sun8iw19p1-r.c	1970-01-01 03:00:00.000000000 +0300
+++ b/drivers/pinctrl/sunxi/pinctrl-sun8iw19p1-r.c	2022-06-12 05:28:14.000000000 +0300
@@ -0,0 +1,111 @@
+/*
+ * Allwinner sun8iw19p1 SoCs R_PIO pinctrl driver.
+ *
+ * Copyright(c) 2016-2020 Allwinnertech Co., Ltd.
+ * Author: zhouhuacai <zhouhuacai@allwinnertech.com>
+ *
+ * This file is licensed under the terms of the GNU General Public
+ * License version 2. This program is licensed "as is" without any
+ * warranty of any kind, whether express or implied.
+ */
+
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/pinctrl/pinctrl.h>
+
+#include "pinctrl-sunxi.h"
+
+static const struct sunxi_desc_pin sun8iw19p1_r_pins[] = {
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 0),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_rsb0"),		/* SCK */
+		SUNXI_FUNCTION(0x3, "s_twi0"),		/* SCK */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 0)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 1),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x2, "s_rsb0"),		/* SDA */
+		SUNXI_FUNCTION(0x3, "s_twi0"),		/* SDA */
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 1)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 2),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 2)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 3),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 3)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 4),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 4)),
+	SUNXI_PIN(SUNXI_PINCTRL_PIN(L, 5),
+		SUNXI_FUNCTION(0x0, "gpio_in"),
+		SUNXI_FUNCTION(0x1, "gpio_out"),
+		SUNXI_FUNCTION(0x7, "io_disabled"),
+		SUNXI_FUNCTION_IRQ_BANK(0x6, 0, 5)),
+};
+
+static const unsigned sun8iw19p1_r_irq_bank_base[] = {
+	SUNXI_R_PIO_BANK_BASE(PL_BASE, 0),
+};
+
+static const unsigned sun8iw19p1_r_bank_base[] = {
+	SUNXI_PIO_BANK_BASE(PL_BASE, 0),
+};
+
+static const struct sunxi_pinctrl_desc sun8iw19p1_r_pinctrl_data = {
+	.pins = sun8iw19p1_r_pins,
+	.npins = ARRAY_SIZE(sun8iw19p1_r_pins),
+	.pin_base = PL_BASE,
+	.banks = ARRAY_SIZE(sun8iw19p1_r_bank_base),
+	.bank_base = sun8iw19p1_r_bank_base,
+	.irq_banks = ARRAY_SIZE(sun8iw19p1_r_irq_bank_base),
+	.irq_bank_base = sun8iw19p1_r_irq_bank_base,
+};
+
+static int sun8iw19p1_r_pinctrl_probe(struct platform_device *pdev)
+{
+	return sunxi_pinctrl_init(pdev, &sun8iw19p1_r_pinctrl_data);
+}
+
+static const struct of_device_id sun8iw19p1_r_pinctrl_match[] = {
+	{ .compatible = "allwinner,sun8iw19p1-r-pinctrl", },
+	{}
+};
+MODULE_DEVICE_TABLE(of, sun8iw19p1_r_pinctrl_match);
+
+static struct platform_driver sun8iw19p1_r_pinctrl_driver = {
+	.probe	= sun8iw19p1_r_pinctrl_probe,
+	.driver	= {
+		.name		= "sun8iw19p1-r-pinctrl",
+		.owner		= THIS_MODULE,
+		.of_match_table	= sun8iw19p1_r_pinctrl_match,
+		.pm		= &sunxi_pinctrl_pm_ops,
+	},
+};
+
+static int __init sun8iw19p1_r_pio_init(void)
+{
+	int ret;
+
+	ret = platform_driver_register(&sun8iw19p1_r_pinctrl_driver);
+	if (IS_ERR_VALUE(ret)) {
+		pr_debug("register sun8i r-pio controller failed\n");
+		return -EINVAL;
+	}
+	return 0;
+}
+postcore_initcall(sun8iw19p1_r_pio_init);
+
+MODULE_AUTHOR("lihuaxing<lihuaxing@allwinnertech.com>");
+MODULE_DESCRIPTION("Allwinner sun8iw19p1 R_PIO pinctrl driver");
+MODULE_LICENSE("GPL");
