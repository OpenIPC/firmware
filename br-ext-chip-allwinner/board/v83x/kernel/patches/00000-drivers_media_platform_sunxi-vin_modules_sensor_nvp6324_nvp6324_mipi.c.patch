diff -drupN a/drivers/media/platform/sunxi-vin/modules/sensor/nvp6324/nvp6324_mipi.c b/drivers/media/platform/sunxi-vin/modules/sensor/nvp6324/nvp6324_mipi.c
--- a/drivers/media/platform/sunxi-vin/modules/sensor/nvp6324/nvp6324_mipi.c	1970-01-01 03:00:00.000000000 +0300
+++ b/drivers/media/platform/sunxi-vin/modules/sensor/nvp6324/nvp6324_mipi.c	2022-06-12 05:28:14.000000000 +0300
@@ -0,0 +1,575 @@
+/*
+ * A V4L2 driver for nvp6324 cameras and AHD Coax protocol.
+ *
+ * Copyright (c) 2017 by Allwinnertech Co., Ltd.  http://www.allwinnertech.com
+ *
+ * Authors:  Li Huiyu <lihuiyu@allwinnertech.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/i2c.h>
+#include <linux/delay.h>
+#include <linux/videodev2.h>
+#include <linux/clk.h>
+#include <media/v4l2-device.h>
+#include <media/v4l2-mediabus.h>
+#include <linux/io.h>
+#include "../camera.h"
+#include "../sensor_helper.h"
+#include "mipi_dev_nvp6324.h"
+#include "jaguar1_video.h"
+
+
+MODULE_AUTHOR("lhy");
+MODULE_DESCRIPTION("A low-level driver for nvp6324 mipi chip for cvbs sensor");
+MODULE_LICENSE("GPL");
+
+/*define module timing*/
+#define MCLK              (27*1000*1000)
+#define VREF_POL          V4L2_MBUS_VSYNC_ACTIVE_LOW
+#define HREF_POL          V4L2_MBUS_HSYNC_ACTIVE_HIGH
+#define CLK_POL           V4L2_MBUS_PCLK_SAMPLE_RISING
+#define V4L2_IDENT_SENSOR  0x6131
+
+/*
+ * Our nominal (default) frame rate.
+ */
+#ifdef FPGA
+#define SENSOR_FRAME_RATE	15
+#else
+#define SENSOR_FRAME_RATE	25
+#endif
+
+/*
+ * The OV2710_xc6130 i2c address
+ */
+
+#define I2C_ADDR (0x60)
+
+/*static struct delayed_work sensor_s_ae_ratio_work;*/
+static bool restart;
+#define SENSOR_NAME "nvp6324_mipi"
+
+struct cfg_array {		/* coming later */
+	struct regval_list *regs;
+	int size;
+};
+
+
+/*
+ * The default register settings
+ *
+ */
+static struct regval_list sensor_default_regs[] = {
+
+};
+
+struct v4l2_subdev *nvp6324_sd;
+
+static int sensor_g_exp(struct v4l2_subdev *sd, __s32 *value)
+{
+	return 0;
+}
+
+static int sensor_s_exp(struct v4l2_subdev *sd, unsigned int exp_val)
+{
+	return 0;
+}
+
+static int sensor_g_gain(struct v4l2_subdev *sd, __s32 *value)
+{
+	return 0;
+}
+
+static int sensor_s_gain(struct v4l2_subdev *sd, int gain_val)
+{
+	return 0;
+}
+
+static int sensor_s_exp_gain(struct v4l2_subdev *sd,
+			     struct sensor_exp_gain *exp_gain)
+{
+	int exp_val, gain_val;
+	struct sensor_info *info = to_state(sd);
+
+	exp_val = exp_gain->exp_val;
+	gain_val = exp_gain->gain_val;
+
+	info->exp = exp_val;
+	info->gain = gain_val;
+	return 0;
+}
+
+static int sensor_s_sw_stby(struct v4l2_subdev *sd, int on_off)
+{
+	int ret = 0;
+	return ret;
+}
+
+/*
+ * Stuff that knows about the sensor.
+ */
+
+static int sensor_power(struct v4l2_subdev *sd, int on)
+{
+	int ret;
+	ret = 0;
+	switch (on) {
+	case STBY_ON:
+		sensor_dbg("STBY_ON!\n");
+		cci_lock(sd);
+		vin_gpio_write(sd, PWDN, CSI_GPIO_HIGH);
+		vin_set_mclk(sd, OFF);
+		cci_unlock(sd);
+		break;
+	case STBY_OFF:
+		sensor_dbg("STBY_OFF!\n");
+		cci_lock(sd);
+		vin_set_mclk_freq(sd, MCLK);
+		vin_set_mclk(sd, ON);
+		usleep_range(10000, 12000);
+		vin_gpio_write(sd, PWDN, CSI_GPIO_LOW);
+		usleep_range(10000, 12000);
+		cci_unlock(sd);
+		ret = sensor_s_sw_stby(sd, CSI_GPIO_LOW);
+		if (ret < 0)
+			sensor_err("soft stby off falied!\n");
+		usleep_range(10000, 12000);
+
+		break;
+	case PWR_ON:
+		sensor_print("PWR_ON!\n");
+		cci_lock(sd);
+		vin_set_mclk_freq(sd, MCLK);
+		vin_set_mclk(sd, ON);
+		vin_set_pmu_channel(sd, IOVDD, ON);
+		vin_set_pmu_channel(sd, DVDD, ON);
+		usleep_range(10000, 12000);
+/*		vin_gpio_set_status(sd, VDD3V3_EN, 1);
+		vin_gpio_set_status(sd, V5_EN, 1);
+		vin_gpio_set_status(sd, CCDVDD_EN, 1);*/
+		vin_gpio_set_status(sd, RESET, 1);
+		vin_gpio_set_status(sd, POWER_EN, 1);
+/*		vin_gpio_write(sd, VDD3V3_EN, CSI_GPIO_HIGH);
+		vin_gpio_write(sd, V5_EN, CSI_GPIO_HIGH);
+		vin_gpio_write(sd, CCDVDD_EN, CSI_GPIO_HIGH);*/
+		vin_gpio_write(sd, POWER_EN, CSI_GPIO_LOW);
+		usleep_range(10000, 12000);
+		vin_gpio_write(sd, POWER_EN, CSI_GPIO_HIGH);
+		usleep_range(10000, 12000);
+		vin_gpio_write(sd, RESET, CSI_GPIO_HIGH);
+		usleep_range(10000, 12000);
+		vin_gpio_write(sd, RESET, CSI_GPIO_LOW);
+		usleep_range(5000, 10000);
+		vin_gpio_write(sd, RESET, CSI_GPIO_HIGH);
+		cci_unlock(sd);
+		break;
+
+	case PWR_OFF:
+		sensor_print("PWR_OFF!\n");
+		cci_lock(sd);
+		vin_set_mclk(sd, OFF);
+		usleep_range(10000, 12000);
+		vin_gpio_write(sd, RESET, CSI_GPIO_HIGH);
+		vin_gpio_write(sd, POWER_EN, CSI_GPIO_LOW);
+		usleep_range(10000, 12000);
+/*		vin_gpio_write(sd, VDD3V3_EN, CSI_GPIO_LOW);
+		vin_gpio_write(sd, V5_EN, CSI_GPIO_LOW);
+		vin_gpio_write(sd, CCDVDD_EN, CSI_GPIO_LOW);*/
+		vin_set_pmu_channel(sd, IOVDD, OFF);
+		vin_set_pmu_channel(sd, DVDD, OFF);
+		cci_unlock(sd);
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static int sensor_reset(struct v4l2_subdev *sd, u32 val)
+{
+	switch (val) {
+	case 0:
+		vin_gpio_write(sd, RESET, CSI_GPIO_HIGH);
+		usleep_range(10000, 12000);
+		break;
+	case 1:
+		vin_gpio_write(sd, RESET, CSI_GPIO_LOW);
+		usleep_range(10000, 12000);
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static int sensor_detect(struct v4l2_subdev *sd)
+{
+	unsigned char i;
+	data_type rdval1, rdval2;
+	rdval1 = rdval2 = 0;
+
+	for (i = 0; i < 5; i++) {
+		sensor_write(sd, 0xff, 0x00);
+		sensor_read(sd, 0xf4, &rdval1);
+		sensor_read(sd, 0xf5, &rdval2);
+		if (rdval1 == 0xb0 && rdval2 == 0) {
+			sensor_print("reg 0x%x = 0x%x\n", 0xf4, rdval1);
+			sensor_print("reg 0x%x = 0x%x\n", 0xf5, rdval2);
+			break;
+		}
+	}
+
+
+	return 0;
+}
+static int sensor_init(struct v4l2_subdev *sd, u32 val)
+{
+	int ret;
+	struct sensor_info *info = to_state(sd);
+
+	sensor_dbg("sensor_init\n");
+	restart = 0;
+	/*Make sure it is a target sensor */
+	ret = sensor_detect(sd);
+	if (ret) {
+		sensor_err("chip found is not an target chip.\n");
+		return ret;
+	}
+
+	info->focus_status = 0;
+	info->low_speed = 0;
+	info->width = HD1080_WIDTH;
+	info->height = HD1080_HEIGHT;
+	info->hflip = 0;
+	info->vflip = 0;
+	info->gain = 0;
+
+	info->tpf.numerator = 1;
+	info->tpf.denominator = 30;
+
+	//info->preview_first_flag = 1;
+
+	return 0;
+}
+
+static long sensor_ioctl(struct v4l2_subdev *sd, unsigned int cmd, void *arg)
+{
+	int ret = 0;
+	struct sensor_info *info = to_state(sd);
+	switch (cmd) {
+	case GET_CURRENT_WIN_CFG:
+		if (info->current_wins != NULL) {
+			memcpy(arg, info->current_wins,
+			       sizeof(struct sensor_win_size));
+			ret = 0;
+		} else {
+			sensor_err("empty wins!\n");
+			ret = -1;
+		}
+		break;
+	case SET_FPS:
+		break;
+	case VIDIOC_VIN_SENSOR_EXP_GAIN:
+		sensor_s_exp_gain(sd, (struct sensor_exp_gain *)arg);
+		break;
+	case VIDIOC_VIN_SENSOR_CFG_REQ:
+		sensor_cfg_req(sd, (struct sensor_config *)arg);
+		break;
+	default:
+		return -EINVAL;
+	}
+	return ret;
+}
+
+static struct sensor_format_struct sensor_formats[] = {
+	{
+		.desc		= "YUYV 4:2:2",
+		.mbus_code	= MEDIA_BUS_FMT_VYUY8_2X8,
+		.regs 		= sensor_default_regs,
+		.regs_size = ARRAY_SIZE(sensor_default_regs),
+		.bpp		= 2,
+	}
+};
+#define N_FMTS ARRAY_SIZE(sensor_formats)
+
+/*
+ * Then there is the issue of window sizes.  Try to capture the info here.
+ */
+static struct sensor_win_size sensor_win_sizes[] = {
+
+	{
+	 .width = 1920,
+	 .height = 1080,
+	 .hoffset = 0,
+	 .voffset = 0,
+	 .pclk = 567*1000*1000,
+	 .mipi_bps = 567*1000*1000,
+	 .fps_fixed = 30,
+	 .regs = sensor_default_regs,
+	 .regs_size = ARRAY_SIZE(sensor_default_regs),
+	 .set_size = NULL,
+	 },
+	 {
+	  .width = 1280,
+	  .height = 720,
+	  .hoffset = 0,
+	  .voffset = 0,
+	  .pclk = 567*1000*1000,
+	  .mipi_bps = 567*1000*1000,
+	  .fps_fixed = 30,
+	  .regs = sensor_default_regs,
+	  .regs_size = ARRAY_SIZE(sensor_default_regs),
+	  .set_size = NULL,
+	  },
+	  {
+	  .width = 1280,
+	  .height = 720,
+	  .hoffset = 0,
+	  .voffset = 0,
+	  .pclk = 567*1000*1000,
+	  .mipi_bps = 567*1000*1000,
+	  .fps_fixed = 60,
+	  .regs = sensor_default_regs,
+	  .regs_size = ARRAY_SIZE(sensor_default_regs),
+	  .set_size = NULL,
+	  },
+
+};
+#define N_WIN_SIZES (ARRAY_SIZE(sensor_win_sizes))
+
+static int sensor_g_mbus_config(struct v4l2_subdev *sd,
+				struct v4l2_mbus_config *cfg)
+{
+	struct sensor_info *info = to_state(sd);
+
+	cfg->type = V4L2_MBUS_CSI2;
+	sensor_dbg("%s ips_wdr_mode = %d\n", __FUNCTION__, info->isp_wdr_mode);
+	cfg->flags = V4L2_MBUS_CSI2_4_LANE | V4L2_MBUS_CSI2_CHANNEL_0 | V4L2_MBUS_CSI2_CHANNEL_1 | V4L2_MBUS_CSI2_CHANNEL_2 | V4L2_MBUS_CSI2_CHANNEL_3;
+
+	return 0;
+}
+
+static int sensor_g_ctrl(struct v4l2_ctrl *ctrl)
+{
+	struct sensor_info *info =
+		container_of(ctrl->handler, struct sensor_info, handler);
+	struct v4l2_subdev *sd = &info->sd;
+
+	switch (ctrl->id) {
+	case V4L2_CID_GAIN:
+		return sensor_g_gain(sd, &ctrl->val);
+	case V4L2_CID_EXPOSURE:
+		return sensor_g_exp(sd, &ctrl->val);
+	}
+	return -EINVAL;
+}
+
+
+static int sensor_s_ctrl(struct v4l2_ctrl *ctrl)
+{
+	struct sensor_info *info =
+			container_of(ctrl->handler, struct sensor_info, handler);
+	struct v4l2_subdev *sd = &info->sd;
+
+	switch (ctrl->id) {
+	case V4L2_CID_GAIN:
+		return sensor_s_gain(sd, ctrl->val);
+	case V4L2_CID_EXPOSURE:
+		return sensor_s_exp(sd, ctrl->val);
+	}
+
+	return 0;
+}
+
+static int sensor_reg_init(struct sensor_info *info)
+{
+	/*int ret;
+	struct v4l2_subdev *sd = &info->sd;
+	struct sensor_format_struct *sensor_fmt = info->fmt;*/
+	struct sensor_win_size *wsize = info->current_wins;
+
+	sensor_dbg("sensor_reg_init\n");
+	sensor_dbg("%s : height = %d,width= %d,fps = %d \n", __func__, wsize->height, wsize->width, wsize->fps_fixed);
+	if (wsize->width == 1920 && wsize->height == 1080)
+		nvp6324_init(AHD20_1080P_30P);
+	else if (wsize->fps_fixed == 60 && wsize->width == 1280 && wsize->height == 720)
+		nvp6324_init(AHD20_720P_60P);
+	else
+		nvp6324_init(AHD20_720P_30P);
+
+	info->width = wsize->width;
+	info->height = wsize->height;
+	sensor_dbg("s_fmt set width = %d, height = %d\n", wsize->width,
+		      wsize->height);
+	return 0;
+}
+
+static int sensor_s_stream(struct v4l2_subdev *sd, int enable)
+{
+	struct sensor_info *info = to_state(sd);
+	sensor_print("%s on = %d, %d*%d %x\n", __func__, enable,
+		  info->current_wins->width,
+		  info->current_wins->height, info->fmt->mbus_code);
+
+	if (!enable)
+		return 0;
+	return sensor_reg_init(info);
+}
+
+
+/* ----------------------------------------------------------------------- */
+static const struct v4l2_ctrl_ops sensor_ctrl_ops = {
+	.g_volatile_ctrl = sensor_g_ctrl,
+	.s_ctrl = sensor_s_ctrl,
+};
+
+static const struct v4l2_subdev_core_ops sensor_core_ops = {
+	.reset = sensor_reset,
+	.init = sensor_init,
+	.s_power = sensor_power,
+	.ioctl = sensor_ioctl,
+#ifdef CONFIG_COMPAT
+	.compat_ioctl32 = sensor_compat_ioctl32,
+#endif
+};
+
+static const struct v4l2_subdev_video_ops sensor_video_ops = {
+	.s_parm = sensor_s_parm,
+	.g_parm = sensor_g_parm,
+	.s_stream = sensor_s_stream,
+	.g_mbus_config = sensor_g_mbus_config,
+};
+
+static const struct v4l2_subdev_pad_ops sensor_pad_ops = {
+	.enum_mbus_code = sensor_enum_mbus_code,
+	.enum_frame_size = sensor_enum_frame_size,
+	.get_fmt = sensor_get_fmt,
+	.set_fmt = sensor_set_fmt,
+};
+
+static const struct v4l2_subdev_ops sensor_ops = {
+	.core = &sensor_core_ops,
+	.video = &sensor_video_ops,
+	.pad = &sensor_pad_ops,
+};
+
+
+/* ----------------------------------------------------------------------- */
+static struct cci_driver cci_drv = {
+	.name = SENSOR_NAME,
+	.addr_width = CCI_BITS_8,
+	.data_width = CCI_BITS_8,
+};
+
+static int sensor_init_controls(struct v4l2_subdev *sd, const struct v4l2_ctrl_ops *ops)
+{
+	struct sensor_info *info = to_state(sd);
+	struct v4l2_ctrl_handler *handler = &info->handler;
+	struct v4l2_ctrl *ctrl;
+	int ret = 0;
+
+	v4l2_ctrl_handler_init(handler, 2);
+
+	ctrl = v4l2_ctrl_new_std(handler, ops, V4L2_CID_GAIN, 1 * 1600,
+			      256 * 1600, 1, 1 * 1600);
+	if (ctrl != NULL)
+		ctrl->flags |= V4L2_CTRL_FLAG_VOLATILE;
+
+	ctrl = v4l2_ctrl_new_std(handler, ops, V4L2_CID_EXPOSURE, 0,
+			      65536 * 16, 1, 0);
+	if (ctrl != NULL)
+		ctrl->flags |= V4L2_CTRL_FLAG_VOLATILE;
+
+	if (handler->error) {
+		ret = handler->error;
+		v4l2_ctrl_handler_free(handler);
+	}
+
+	sd->ctrl_handler = handler;
+
+	return ret;
+
+}
+
+static int sensor_probe(struct i2c_client *client,
+			const struct i2c_device_id *id)
+{
+	struct v4l2_subdev *sd;
+	struct sensor_info *info;
+	info = kzalloc(sizeof(struct sensor_info), GFP_KERNEL);
+	if (info == NULL)
+		return -ENOMEM;
+	sd = &info->sd;
+	cci_dev_probe_helper(sd, client, &sensor_ops, &cci_drv);
+	sensor_init_controls(sd, &sensor_ctrl_ops);
+	mutex_init(&info->lock);
+	restart = 0;
+
+	info->fmt = &sensor_formats[0];
+	info->fmt_pt = &sensor_formats[0];
+	info->win_pt = &sensor_win_sizes[0];
+	info->fmt_num = N_FMTS;
+	info->win_size_num = N_WIN_SIZES;
+	info->sensor_field = V4L2_FIELD_NONE;
+	//info->combo_mode = CMB_TERMINAL_RES | CMB_PHYA_OFFSET1 | MIPI_NORMAL_MODE;
+	info->combo_mode = CMB_PHYA_OFFSET3 | MIPI_NORMAL_MODE;
+	info->stream_seq = MIPI_BEFORE_SENSOR;
+	info->af_first_flag = 1;
+	info->exp = 0;
+	info->gain = 0;
+
+	nvp6324_sd = sd;
+
+	return 0;
+}
+
+static int sensor_remove(struct i2c_client *client)
+{
+	struct v4l2_subdev *sd;
+	sd = cci_dev_remove_helper(client, &cci_drv);
+	kfree(to_state(sd));
+	return 0;
+}
+
+static const struct i2c_device_id sensor_id[] = {
+	{SENSOR_NAME, 0},
+	{}
+};
+
+MODULE_DEVICE_TABLE(i2c, sensor_id);
+
+static struct i2c_driver sensor_driver = {
+	.driver = {
+		   .owner = THIS_MODULE,
+		   .name = SENSOR_NAME,
+		   },
+	.probe = sensor_probe,
+	.remove = sensor_remove,
+	.id_table = sensor_id,
+};
+
+static __init int init_sensor(void)
+{
+	return cci_dev_init_helper(&sensor_driver);
+}
+
+static __exit void exit_sensor(void)
+{
+	cci_dev_exit_helper(&sensor_driver);
+}
+
+#ifdef CONFIG_ARCH_SUN8IW17P1
+subsys_initcall(init_sensor);
+#else
+module_init(init_sensor);
+#endif
+module_exit(exit_sensor);
