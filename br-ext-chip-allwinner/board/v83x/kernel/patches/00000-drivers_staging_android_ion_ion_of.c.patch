diff -drupN a/drivers/staging/android/ion/ion_of.c b/drivers/staging/android/ion/ion_of.c
--- a/drivers/staging/android/ion/ion_of.c	2018-08-06 17:23:04.000000000 +0300
+++ b/drivers/staging/android/ion/ion_of.c	2022-06-12 05:28:14.000000000 +0300
@@ -21,10 +21,16 @@
 #include <linux/dma-contiguous.h>
 #include <linux/io.h>
 #include <linux/of_reserved_mem.h>
+#include <linux/memblock.h>
 #include "ion.h"
 #include "ion_priv.h"
 #include "ion_of.h"
+#include <linux/ion_sunxi.h>
 
+#ifdef CONFIG_ARM64
+struct ion_mem_reserve_info ion_reserve_mem;
+#endif
+extern struct ion_mem_reserve_info ion_reserve_mem;
 static int ion_parse_dt_heap_common(struct device_node *heap_node,
 				    struct ion_platform_heap *heap,
 				    struct ion_of_heap *compatible)
@@ -43,11 +49,70 @@ static int ion_parse_dt_heap_common(stru
 	heap->type = compatible[i].type;
 	heap->name = compatible[i].name;
 	heap->align = compatible[i].align;
-
-	/* Some kind of callback function pointer? */
-
 	pr_info("%s: id %d type %d name %s align %lx\n", __func__,
 		heap->id, heap->type, heap->name, heap->align);
+
+	if (heap->id == ION_HEAP_TYPE_CARVEOUT) {
+		u32 dts_reserve_base, dts_reserve_size, dts_reserve_end;
+		int ret = 0;
+
+		ret = of_property_read_u32(heap_node, "heap-base", &dts_reserve_base);
+		ret = of_property_read_u32(heap_node, "heap-size", &dts_reserve_size);
+		if ((ret == 0) && (ion_reserve_mem.size == 0)) {
+			/*Only set carveout reserve info in dts*/
+			heap->base = dts_reserve_base;
+			heap->size = dts_reserve_size;
+			pr_info("%s: carveout(dts): base 0x%x, size 0x%x\n",
+					__func__, (unsigned int)heap->base, (unsigned int)heap->size);
+			return 0;
+		} else if ((ret != 0) && (ion_reserve_mem.size != 0)) {
+			/*Only set carveout reserve info in cmdline*/
+			heap->base = ion_reserve_mem.start;
+			heap->size = ion_reserve_mem.size;
+			pr_info("%s: carveout(ion_carveout_list-1): base 0x%x, size 0x%x\n",
+					__func__, (unsigned int)heap->base, (unsigned int)heap->size);
+			return 0;
+		} else if ((ret != 0) && (ion_reserve_mem.size == 0)) {
+			/*No carveout reserve info be set in dts or cmdline*/
+			pr_err("You need to set carveout reserve info in dts or cmdline!\n");
+			return 0;
+		}
+
+		/*If the heap or size in dts are zero, just use the cmdline config.*/
+		if ((heap->base == 0) || (heap->size == 0)) {
+			heap->base = ion_reserve_mem.start;
+			heap->size = ion_reserve_mem.size;
+			pr_info("%s: carveout(ion_carveout_list-2): base 0x%x, size 0x%x\n",
+					__func__, (unsigned int)heap->base, (unsigned int)heap->size);
+			return 0;
+		}
+		/*
+		 * Carveout reserve info was set in dts(not zero) and cmdline at the same time.
+		 *
+		 * In this case, the priority is : cmdline > dts,
+		 * so we should free the extra reserve mem caused by dts reserve.
+		 *
+		 */
+		dts_reserve_end = dts_reserve_base + dts_reserve_size;
+		if (dts_reserve_end <= ion_reserve_mem.start) {
+			/*Free all dts reserve mem*/
+			memblock_free(dts_reserve_base, dts_reserve_size);
+			free_reserved_area((void *)__phys_to_virt(dts_reserve_base),
+						(void *)__phys_to_virt(dts_reserve_end), -1, NULL);
+		} else {
+			if ((ion_reserve_mem.start - dts_reserve_base) > 0) {
+				/*Free part of dts reserve mem*/
+				memblock_free(dts_reserve_base, ion_reserve_mem.start - dts_reserve_base);
+				free_reserved_area((void *)__phys_to_virt(dts_reserve_base),
+							(void *)__phys_to_virt(ion_reserve_mem.start), -1, NULL);
+			}
+		}
+		heap->base = ion_reserve_mem.start;
+		heap->size = ion_reserve_mem.size;
+		pr_info("%s: carveout(ion_carveout_list-3): base 0x%x, size 0x%x\n",
+				__func__, (unsigned int)heap->base, (unsigned int)heap->size);
+	}
+
 	return 0;
 }
 
