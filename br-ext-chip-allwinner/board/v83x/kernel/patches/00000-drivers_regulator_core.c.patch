diff -drupN a/drivers/regulator/core.c b/drivers/regulator/core.c
--- a/drivers/regulator/core.c	2018-08-06 17:23:04.000000000 +0300
+++ b/drivers/regulator/core.c	2022-06-12 05:28:14.000000000 +0300
@@ -129,7 +129,11 @@ static const char *rdev_get_name(struct
 
 static bool have_full_constraints(void)
 {
+#if defined(CONFIG_AW_AXP)
+	return false;
+#else
 	return has_full_constraints || of_have_populated_dt();
+#endif
 }
 
 static bool regulator_ops_is_valid(struct regulator_dev *rdev, int ops)
@@ -184,6 +188,526 @@ static void regulator_unlock_supply(stru
 	}
 }
 
+#if defined(CONFIG_AW_AXP)
+unsigned int axp_regulator_debug;
+static DEFINE_MUTEX(axp_enable_list_mutex);
+static LIST_HEAD(axp_regulator_list);
+/*
+ * struct enabler
+ *
+ * One for each supply.
+ */
+struct enabler {
+	struct list_head list;
+	char *supply_name;
+};
+
+static ssize_t axp_regulator_enable_show(char *buf, int state)
+{
+	if (state > 0)
+		return sprintf(buf, "enabled  ");
+	else if (state == 0)
+		return sprintf(buf, "disabled  ");
+	else
+		return sprintf(buf, "unknown  ");
+}
+
+static ssize_t axp_dump_show(struct class *class,
+		struct class_attribute *attr, char *buf)
+{
+	struct enabler *enabler = NULL;
+	struct regulator_dev *rdev;
+	ssize_t count = 0;
+
+	mutex_lock(&regulator_list_mutex);
+	list_for_each_entry(rdev, &axp_regulator_list, list) {
+		mutex_lock(&rdev->mutex);
+		if (!strcmp(rdev_get_name(rdev), "regulator-dummy")) {
+			mutex_unlock(&rdev->mutex);
+			continue;
+		}
+
+		count += sprintf(buf+count, "%s : ", rdev_get_name(rdev));
+		count += axp_regulator_enable_show(buf+count,
+				_regulator_is_enabled(rdev));
+		count += sprintf(buf+count, "%d  ", rdev->use_count);
+		count += sprintf(buf+count, "%d  ",
+				_regulator_get_voltage(rdev));
+		count += sprintf(buf+count, "  %s:  ", "supply_name");
+
+		list_for_each_entry(enabler, &rdev->axp_enable_list, list) {
+			count += sprintf(buf+count, "%s  ",
+				enabler->supply_name);
+		}
+		mutex_unlock(&rdev->mutex);
+		count += sprintf(buf+count, "\n ");
+	}
+	mutex_unlock(&regulator_list_mutex);
+
+	return count;
+}
+
+static ssize_t axp_regulator_tree_show(struct class *class,
+		struct class_attribute *attr, char *buf)
+{
+	struct regulator_map *map;
+	struct regulator_dev *rdev;
+	ssize_t count = 0;
+
+	mutex_lock(&regulator_list_mutex);
+	list_for_each_entry(rdev, &axp_regulator_list, list) {
+		mutex_lock(&rdev->mutex);
+		count += sprintf(buf+count, "%s : ", rdev_get_name(rdev));
+		list_for_each_entry(map, &regulator_map_list, list) {
+			if (rdev == map->regulator) {
+				if (strcmp(map->supply,
+					rdev_get_name(rdev)) != 0)
+					count += sprintf(buf+count, "%s  ",
+						map->supply);
+			}
+		}
+		mutex_unlock(&rdev->mutex);
+		count += sprintf(buf+count, "\n ");
+	}
+	mutex_unlock(&regulator_list_mutex);
+
+	return count;
+}
+
+static ssize_t axp_debug_store(struct class *class,
+		struct class_attribute *attr, const char *buf, size_t count)
+{
+	unsigned int data;
+
+	sscanf(buf, "%u", &data);
+	axp_regulator_debug = data;
+
+	return count;
+}
+
+static ssize_t axp_debug_show(struct class *class,
+			struct class_attribute *attr, char *buf)
+{
+	return sprintf(buf, "%u\n", axp_regulator_debug);
+}
+
+static struct class_attribute axp_regulator_class_attrs[] = {
+	__ATTR(dump, S_IRUGO, axp_dump_show, NULL),
+	__ATTR(regulator_tree, S_IRUGO, axp_regulator_tree_show, NULL),
+	__ATTR(debug, S_IRUGO|S_IWUSR, axp_debug_show, axp_debug_store),
+	__ATTR_NULL
+};
+
+static void axp_add_enabler(struct regulator_dev *rdev, const char *supply_name)
+{
+	struct enabler *enabler;
+
+	enabler = kzalloc(sizeof(*enabler), GFP_KERNEL);
+	if (enabler == NULL) {
+		pr_err("%s: enabler request mem failed\n", supply_name);
+		return;
+	}
+
+	mutex_lock(&rdev->mutex);
+	list_add(&enabler->list, &rdev->axp_enable_list);
+	enabler->supply_name = kstrdup(supply_name, GFP_KERNEL);
+	if (enabler->supply_name == NULL) {
+		pr_err("enabler->%s set failed\n", supply_name);
+		goto attr_err;
+	}
+	mutex_unlock(&rdev->mutex);
+	return;
+
+attr_err:
+	list_del(&enabler->list);
+	kfree(enabler);
+	mutex_unlock(&rdev->mutex);
+	return;
+}
+
+static void axp_del_enabler(struct regulator_dev *rdev, const char *supply_name)
+{
+	struct enabler *enabler;
+
+	mutex_lock(&axp_enable_list_mutex);
+	list_for_each_entry(enabler, &rdev->axp_enable_list, list) {
+		if (!strcmp(enabler->supply_name, supply_name)) {
+			kfree(enabler->supply_name);
+			list_del(&enabler->list);
+			kfree(enabler);
+			mutex_unlock(&axp_enable_list_mutex);
+			return;
+		}
+	}
+	mutex_unlock(&axp_enable_list_mutex);
+
+	pr_err("%s: enabler can not find\n", supply_name);
+
+	return;
+}
+
+int axp_get_ldo_name(const char *supply_id, char *ldo_name)
+{
+	struct regulator_dev *rdev;
+	struct regulator_map *map;
+	bool irqs_state = irqs_disabled();
+
+	if (0 != irqs_state) {
+		list_for_each_entry(map, &regulator_map_list, list) {
+			if (strcmp(map->supply, supply_id) == 0) {
+				rdev = map->regulator;
+				goto found;
+			}
+		}
+	} else {
+		mutex_lock(&regulator_list_mutex);
+		list_for_each_entry(map, &regulator_map_list, list) {
+			if (strcmp(map->supply, supply_id) == 0) {
+				rdev = map->regulator;
+				mutex_unlock(&regulator_list_mutex);
+				goto found;
+			}
+		}
+		mutex_unlock(&regulator_list_mutex);
+	}
+
+	return -1;
+
+found:
+	strcpy(ldo_name, rdev->constraints->name);
+
+	return 0;
+}
+
+int axp_get_enable_id_count(const char *ldo_name)
+{
+	struct enabler *enabler = NULL;
+	struct regulator_dev *rdev;
+	int id_count = 0;
+	bool irqs_state = irqs_disabled();
+
+	if (0 != irqs_state) {
+		list_for_each_entry(rdev, &axp_regulator_list, list) {
+			if (NULL != rdev->constraints->name) {
+				if (strcmp(rdev->constraints->name,
+						ldo_name) == 0) {
+					list_for_each_entry(enabler,
+						&rdev->axp_enable_list, list) {
+						id_count++;
+					}
+					break;
+				}
+			}
+		}
+	} else {
+		mutex_lock(&regulator_list_mutex);
+		list_for_each_entry(rdev, &axp_regulator_list, list) {
+			mutex_lock(&rdev->mutex);
+			if (NULL != rdev->constraints->name) {
+				if (strcmp(rdev->constraints->name,
+						ldo_name) == 0) {
+					mutex_lock(&axp_enable_list_mutex);
+					list_for_each_entry(enabler,
+						&rdev->axp_enable_list, list) {
+						id_count++;
+					}
+					mutex_unlock(&axp_enable_list_mutex);
+					mutex_unlock(&rdev->mutex);
+					break;
+				}
+			}
+			mutex_unlock(&rdev->mutex);
+		}
+		mutex_unlock(&regulator_list_mutex);
+	}
+
+	return id_count;
+}
+
+int axp_get_enable_id(const char *ldo_name, u32 count, char *enable_id)
+{
+	struct enabler *enabler = NULL;
+	struct regulator_dev *rdev;
+	int id_count = 0;
+	bool irqs_state = irqs_disabled();
+
+	if (0 != irqs_state) {
+		list_for_each_entry(rdev, &axp_regulator_list, list) {
+			if (NULL != rdev->constraints->name) {
+				if (strcmp(rdev->constraints->name, ldo_name)
+					== 0) {
+					list_for_each_entry(enabler,
+						&rdev->axp_enable_list, list) {
+						if (id_count == count) {
+							strcpy(enable_id,
+							enabler->supply_name);
+							return 0;
+						}
+						id_count++;
+					}
+					break;
+				}
+			}
+		}
+	} else {
+		mutex_lock(&regulator_list_mutex);
+		list_for_each_entry(rdev, &axp_regulator_list, list) {
+			mutex_lock(&rdev->mutex);
+			if (NULL != rdev->constraints->name) {
+				if (strcmp(rdev->constraints->name, ldo_name)
+					== 0) {
+					mutex_lock(&axp_enable_list_mutex);
+					list_for_each_entry(enabler,
+						&rdev->axp_enable_list, list) {
+						if (id_count == count) {
+							strcpy(enable_id,
+							enabler->supply_name);
+							mutex_unlock(
+							&axp_enable_list_mutex);
+							mutex_unlock(
+							&rdev->mutex);
+							mutex_unlock(
+							&regulator_list_mutex);
+							return 0;
+						}
+						id_count++;
+					}
+					mutex_unlock(&axp_enable_list_mutex);
+					mutex_unlock(&rdev->mutex);
+					break;
+				}
+			}
+			mutex_unlock(&rdev->mutex);
+		}
+		mutex_unlock(&regulator_list_mutex);
+	}
+
+	return -1;
+}
+
+int axp_check_enable_id(const char *ldo_name, const char *enalbe_id)
+{
+	struct enabler *enabler = NULL;
+	struct regulator_dev *rdev;
+	bool irqs_state = irqs_disabled();
+
+	if (0 != irqs_state) {
+		list_for_each_entry(rdev, &axp_regulator_list, list) {
+			if (NULL != rdev->constraints->name) {
+				if (strcmp(rdev->constraints->name, ldo_name)
+					== 0) {
+					list_for_each_entry(enabler,
+						&rdev->axp_enable_list, list) {
+						if (strcmp(enabler->supply_name,
+							enalbe_id) == 0) {
+							goto found;
+						}
+					}
+				}
+			}
+		}
+	} else {
+		mutex_lock(&regulator_list_mutex);
+		list_for_each_entry(rdev, &axp_regulator_list, list) {
+			mutex_lock(&rdev->mutex);
+			if (NULL != rdev->constraints->name) {
+				if (strcmp(rdev->constraints->name, ldo_name)
+					== 0) {
+					mutex_lock(&axp_enable_list_mutex);
+					list_for_each_entry(enabler,
+						&rdev->axp_enable_list, list) {
+						if (strcmp(enabler->supply_name,
+							enalbe_id) == 0) {
+							mutex_unlock(
+							&axp_enable_list_mutex);
+							mutex_unlock(
+							&rdev->mutex);
+							mutex_unlock(
+							&regulator_list_mutex);
+							goto found;
+						}
+					}
+					mutex_unlock(&axp_enable_list_mutex);
+				}
+			}
+			mutex_unlock(&rdev->mutex);
+		}
+		mutex_unlock(&regulator_list_mutex);
+	}
+
+	return 0;
+
+found:
+	return 1;
+}
+
+int axp_check_ldo_alwayson(const char *ldo_name)
+{
+	struct regulator_dev *rdev;
+	bool irqs_state = irqs_disabled();
+
+	if (0 != irqs_state) {
+		list_for_each_entry(rdev, &axp_regulator_list, list) {
+			if (NULL != rdev->constraints->name) {
+				if (strcmp(rdev->constraints->name, ldo_name)
+					== 0) {
+					if (rdev->constraints->always_on)
+						return 1;
+					else
+						return 0;
+				}
+			}
+		}
+	} else {
+		mutex_lock(&regulator_list_mutex);
+		list_for_each_entry(rdev, &axp_regulator_list, list) {
+			mutex_lock(&rdev->mutex);
+			if (NULL != rdev->constraints->name) {
+				if (strcmp(rdev->constraints->name, ldo_name)
+					== 0) {
+					if (rdev->constraints->always_on) {
+						mutex_unlock(&rdev->mutex);
+						mutex_unlock(
+							&regulator_list_mutex);
+						return 1;
+					} else {
+						mutex_unlock(&rdev->mutex);
+						mutex_unlock(
+							&regulator_list_mutex);
+						return 0;
+					}
+				}
+			}
+			mutex_unlock(&rdev->mutex);
+		}
+		mutex_unlock(&regulator_list_mutex);
+	}
+
+	return -1;
+}
+
+int axp_set_ldo_alwayson(const char *ldo_name, unsigned int value)
+{
+	struct regulator_dev *rdev;
+	bool irqs_state = irqs_disabled();
+
+	if (0 != irqs_state) {
+		list_for_each_entry(rdev, &axp_regulator_list, list) {
+			if (NULL != rdev->constraints->name) {
+				if (strcmp(rdev->constraints->name, ldo_name)
+					== 0) {
+					rdev->constraints->always_on = value;
+					if ((rdev->constraints->always_on == 1)
+						&& (_regulator_is_enabled(rdev)
+							<= 0)
+					)
+						rdev->desc->ops->enable(rdev);
+
+					if ((rdev->constraints->always_on == 0)
+						&& (rdev->use_count == 0)
+						&& (_regulator_is_enabled(rdev)
+							> 0)
+					)
+						rdev->desc->ops->disable(rdev);
+
+					return 0;
+				}
+			}
+		}
+	} else {
+		mutex_lock(&regulator_list_mutex);
+		list_for_each_entry(rdev, &axp_regulator_list, list) {
+			mutex_lock(&rdev->mutex);
+			if (NULL != rdev->constraints->name) {
+				if (strcmp(rdev->constraints->name, ldo_name)
+					== 0) {
+					rdev->constraints->always_on = value;
+					mutex_unlock(&rdev->mutex);
+					mutex_unlock(&regulator_list_mutex);
+					if ((rdev->constraints->always_on == 1)
+						&& (_regulator_is_enabled(rdev)
+							<= 0)
+					)
+						rdev->desc->ops->enable(rdev);
+
+					if ((rdev->constraints->always_on == 0)
+						&& (rdev->use_count == 0)
+						&& (_regulator_is_enabled(rdev)
+							> 0)
+					)
+						rdev->desc->ops->disable(rdev);
+
+					return 0;
+				}
+			}
+			mutex_unlock(&rdev->mutex);
+		}
+		mutex_unlock(&regulator_list_mutex);
+	}
+
+	return -1;
+}
+
+int axp_regulator_dump(void)
+{
+	struct enabler *enabler = NULL;
+	struct regulator_dev *rdev;
+	char buf[256] = "";
+	s32 count = 0;
+	bool irqs_state = irqs_disabled();
+
+	if (0 != irqs_state) {
+		list_for_each_entry(rdev, &axp_regulator_list, list) {
+			if (!strcmp(rdev_get_name(rdev), "regulator-dummy"))
+				continue;
+			count += sprintf(buf+count, "%s : ",
+					rdev_get_name(rdev));
+			count += axp_regulator_enable_show(buf+count,
+					_regulator_is_enabled(rdev));
+			count += sprintf(buf+count, "%d  ", rdev->use_count);
+			count += sprintf(buf+count, "%d  ",
+					_regulator_get_voltage(rdev));
+			count += sprintf(buf+count, "  %s:  ", "supply_name");
+			list_for_each_entry(enabler,
+				&rdev->axp_enable_list, list) {
+				count += sprintf(buf+count, "%s  ",
+					enabler->supply_name);
+			}
+			printk("%s\n", buf);
+			count = 0;
+		}
+	} else {
+		mutex_lock(&regulator_list_mutex);
+		list_for_each_entry(rdev, &axp_regulator_list, list) {
+			mutex_lock(&rdev->mutex);
+			if (!strcmp(rdev_get_name(rdev), "regulator-dummy")) {
+				mutex_unlock(&rdev->mutex);
+				continue;
+			}
+			count += sprintf(buf+count, "%s : ",
+					rdev_get_name(rdev));
+			count += axp_regulator_enable_show(buf+count,
+					_regulator_is_enabled(rdev));
+			count += sprintf(buf+count, "%d  ", rdev->use_count);
+			count += sprintf(buf+count, "%d  ",
+					_regulator_get_voltage(rdev));
+			count += sprintf(buf+count, "  %s:  ", "supply_name");
+			list_for_each_entry(enabler,
+				&rdev->axp_enable_list, list) {
+				count += sprintf(buf+count, "%s  ",
+					enabler->supply_name);
+			}
+			mutex_unlock(&rdev->mutex);
+			printk("%s\n", buf);
+			count = 0;
+		}
+		mutex_unlock(&regulator_list_mutex);
+	}
+
+	return 0;
+}
+#endif
+
 /**
  * of_get_regulator - get a regulator device node based on supply name
  * @dev: Device pointer for the consumer (of regulator) device
@@ -2192,6 +2716,15 @@ int regulator_enable(struct regulator *r
 	if (regulator->always_on)
 		return 0;
 
+#if defined(CONFIG_AW_AXP)
+	if (axp_regulator_debug & 0x01) {
+		pr_info("%s:%s\n", __func__, regulator->supply_name);
+		dump_stack();
+	}
+
+	axp_add_enabler(rdev, regulator->supply_name);
+#endif
+
 	if (rdev->supply) {
 		ret = regulator_enable(rdev->supply);
 		if (ret != 0)
@@ -2306,6 +2839,14 @@ int regulator_disable(struct regulator *
 	if (regulator->always_on)
 		return 0;
 
+#if defined(CONFIG_AW_AXP)
+	if (axp_regulator_debug & 0x01) {
+		pr_info("%s:%s\n", __func__, regulator->supply_name);
+		dump_stack();
+	}
+	axp_del_enabler(rdev, regulator->supply_name);
+#endif
+
 	mutex_lock(&rdev->mutex);
 	ret = _regulator_disable(rdev);
 	mutex_unlock(&rdev->mutex);
@@ -2972,6 +3513,14 @@ static int regulator_set_voltage_unlocke
 		ret = 0;
 	}
 
+#if defined(CONFIG_AW_AXP)
+	if (axp_regulator_debug & 0x01) {
+		pr_info("%s:%s: %duV\n", __func__,
+				regulator->supply_name, min_uV);
+		dump_stack();
+	}
+#endif
+
 out:
 	return ret;
 out2:
@@ -3861,6 +4410,9 @@ static struct class regulator_class = {
 	.name = "regulator",
 	.dev_release = regulator_dev_release,
 	.dev_groups = regulator_dev_groups,
+#if defined(CONFIG_AW_AXP)
+	.class_attrs = axp_regulator_class_attrs,
+#endif
 };
 
 static void rdev_init_debugfs(struct regulator_dev *rdev)
@@ -3983,6 +4535,10 @@ regulator_register(const struct regulato
 		rdev->regmap = dev_get_regmap(dev->parent, NULL);
 	INIT_LIST_HEAD(&rdev->consumer_list);
 	INIT_LIST_HEAD(&rdev->list);
+#if defined(CONFIG_AW_AXP)
+	INIT_LIST_HEAD(&rdev->axp_enable_list);
+	list_add(&rdev->list, &axp_regulator_list);
+#endif
 	BLOCKING_INIT_NOTIFIER_HEAD(&rdev->notifier);
 	INIT_DELAYED_WORK(&rdev->disable_work, regulator_disable_work);
 
