diff -drupN a/sound/core/pcm_dmaengine.c b/sound/core/pcm_dmaengine.c
--- a/sound/core/pcm_dmaengine.c	2018-08-06 17:23:04.000000000 +0300
+++ b/sound/core/pcm_dmaengine.c	2022-06-12 05:28:14.000000000 +0300
@@ -27,6 +27,7 @@
 #include <sound/soc.h>
 
 #include <sound/dmaengine_pcm.h>
+#include "../soc/sunxi/sunxi-pcm.h"
 
 struct dmaengine_pcm_runtime_data {
 	struct dma_chan *dma_chan;
@@ -63,21 +64,22 @@ int snd_hwparams_to_dma_slave_config(con
 	struct dma_slave_config *slave_config)
 {
 	enum dma_slave_buswidth buswidth;
-	int bits;
-
-	bits = params_physical_width(params);
-	if (bits < 8 || bits > 64)
-		return -EINVAL;
-	else if (bits == 8)
+	switch (params_format(params)) {
+	case SNDRV_PCM_FORMAT_S8:
 		buswidth = DMA_SLAVE_BUSWIDTH_1_BYTE;
-	else if (bits == 16)
+		break;
+	case SNDRV_PCM_FORMAT_S16_LE:
 		buswidth = DMA_SLAVE_BUSWIDTH_2_BYTES;
-	else if (bits == 24)
-		buswidth = DMA_SLAVE_BUSWIDTH_3_BYTES;
-	else if (bits <= 32)
+		break;
+	case SNDRV_PCM_FORMAT_S18_3LE:
+	case SNDRV_PCM_FORMAT_S20_3LE:
+	case SNDRV_PCM_FORMAT_S24_LE:
+	case SNDRV_PCM_FORMAT_S32_LE:
 		buswidth = DMA_SLAVE_BUSWIDTH_4_BYTES;
-	else
-		buswidth = DMA_SLAVE_BUSWIDTH_8_BYTES;
+		break;
+	default:
+		return -EINVAL;
+	}
 
 	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK) {
 		slave_config->direction = DMA_MEM_TO_DEV;
@@ -141,10 +143,18 @@ static void dmaengine_pcm_dma_complete(v
 {
 	struct snd_pcm_substream *substream = arg;
 	struct dmaengine_pcm_runtime_data *prtd = substream_to_prtd(substream);
+	unsigned long flags;
+
+	snd_pcm_stream_lock_irqsave(substream, flags);
+	if (!substream->runtime) {
+		snd_pcm_stream_unlock_irqrestore(substream, flags);
+		return;
+	}
 
 	prtd->pos += snd_pcm_lib_period_bytes(substream);
 	if (prtd->pos >= snd_pcm_lib_buffer_bytes(substream))
 		prtd->pos = 0;
+	snd_pcm_stream_unlock_irqrestore(substream, flags);
 
 	snd_pcm_period_elapsed(substream);
 }
@@ -163,10 +173,22 @@ static int dmaengine_pcm_prepare_and_sub
 		flags |= DMA_PREP_INTERRUPT;
 
 	prtd->pos = 0;
-	desc = dmaengine_prep_dma_cyclic(chan,
-		substream->runtime->dma_addr,
-		snd_pcm_lib_buffer_bytes(substream),
-		snd_pcm_lib_period_bytes(substream), direction, flags);
+#ifdef CONFIG_SND_SUNXI_SOC_AHUB
+	if (sunxi_ahub_get_rawflag() > 1) {
+#else
+	if (!strcmp(substream->pcm->card->id, "sndhdmiraw")) {
+#endif
+		desc = dmaengine_prep_dma_cyclic(chan,
+			substream->runtime->dma_addr,
+			2 * snd_pcm_lib_buffer_bytes(substream),
+			2 * snd_pcm_lib_period_bytes(substream),
+			direction, flags);
+	} else {
+		desc = dmaengine_prep_dma_cyclic(chan,
+			substream->runtime->dma_addr,
+			snd_pcm_lib_buffer_bytes(substream),
+			snd_pcm_lib_period_bytes(substream), direction, flags);
+	}
 
 	if (!desc)
 		return -ENOMEM;
@@ -225,6 +247,149 @@ int snd_dmaengine_pcm_trigger(struct snd
 }
 EXPORT_SYMBOL_GPL(snd_dmaengine_pcm_trigger);
 
+#ifdef CONFIG_SND_CORE_SUNXI_PCM_DMA
+/**
+ * sunxi_snd_dmaengine_pcm_open - Open a dmaengine based PCM substream
+ * @rtd: dmaengine pcm runtime data
+ *
+ * Returns 0 on success, a negative error code otherwise.
+ *
+ * The function should usually be called from the pcm open callback. Note that
+ * this function will use private_data field of the substream's runtime. So it
+ * is not available to your pcm driver implementation.
+ */
+int sunxi_snd_dmaengine_pcm_open(void *rtd, dma_filter_fn filter_fn,
+			void *filter_data)
+{
+	struct dmaengine_pcm_runtime_data *prtd =
+		(struct dmaengine_pcm_runtime_data *)rtd;
+
+	prtd->dma_chan = snd_dmaengine_pcm_request_channel(filter_fn, filter_data);
+	if (!prtd->dma_chan) {
+		kfree(prtd);
+		return -EBUSY;
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(sunxi_snd_dmaengine_pcm_open);
+
+static int sunxi_dmaengine_pcm_prepare_and_submit(void *rtd,
+		dma_addr_t dma_addr, enum dma_transfer_direction direction,
+		int buffer_bytes, int period_bytes)
+{
+	struct dmaengine_pcm_runtime_data *prtd =
+		(struct dmaengine_pcm_runtime_data *)rtd;
+	struct dma_chan *chan = prtd->dma_chan;
+	struct dma_async_tx_descriptor *desc;
+	unsigned long flags = DMA_CTRL_ACK;
+
+	flags |= DMA_PREP_INTERRUPT;
+	prtd->pos = 0;
+	desc = dmaengine_prep_dma_cyclic(chan,
+			dma_addr,
+			buffer_bytes,
+			period_bytes, direction, flags);
+
+	if (!desc)
+		return -ENOMEM;
+
+	desc->callback = NULL;
+	desc->callback_param = NULL;
+	prtd->cookie = dmaengine_submit(desc);
+
+	return 0;
+}
+
+/**
+ * sunxi_snd_dmaengine_pcm_trigger - dmaengine based PCM Trigger
+ * implementation
+ * @rtd: dmaengine pcm runtime data
+ * @cmd: Trigger command
+ *
+ * Returns 0 on success, a negative error code otherwise.
+ *
+ * This function can be used as the PCM trigger callback for dmaengine based PCM
+ * driver implementations.
+ */
+int sunxi_snd_dmaengine_pcm_trigger(void *rtd, int cmd, dma_addr_t dma_addr,
+		enum dma_transfer_direction direction,
+		int buffer_bytes, int period_bytes)
+{
+	struct dmaengine_pcm_runtime_data *prtd =
+			(struct dmaengine_pcm_runtime_data *)rtd;
+	int ret;
+
+	switch (cmd) {
+	case SNDRV_PCM_TRIGGER_START:
+		ret = sunxi_dmaengine_pcm_prepare_and_submit(prtd, dma_addr,
+				direction, buffer_bytes, period_bytes);
+		if (ret) {
+			pr_err("[%s] trigger start error %d\n", __func__, ret);
+			return ret;
+		}
+		dma_async_issue_pending(prtd->dma_chan);
+		break;
+	case SNDRV_PCM_TRIGGER_RESUME:
+	case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:
+		dmaengine_resume(prtd->dma_chan);
+		break;
+	case SNDRV_PCM_TRIGGER_SUSPEND:
+		//dmaengine_pause(prtd->dma_chan);
+		dmaengine_terminate_async(prtd->dma_chan);
+		break;
+	case SNDRV_PCM_TRIGGER_PAUSE_PUSH:
+		dmaengine_pause(prtd->dma_chan);
+		break;
+	case SNDRV_PCM_TRIGGER_STOP:
+		dmaengine_terminate_async(prtd->dma_chan);
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(sunxi_snd_dmaengine_pcm_trigger);
+
+/**
+ * sunxi_snd_dmaengine_pcm_close - Close a dmaengine based PCM substream
+ * @rtd: dmaengine pcm runtime data
+ */
+int sunxi_snd_dmaengine_pcm_close(void *rtd)
+{
+	struct dmaengine_pcm_runtime_data *prtd =
+			(struct dmaengine_pcm_runtime_data *)rtd;
+
+	dmaengine_synchronize(prtd->dma_chan);
+	dma_release_channel(prtd->dma_chan);
+	kfree(prtd);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(sunxi_snd_dmaengine_pcm_close);
+
+/**
+ * sunxi_snd_dmaengine_pcm_release_chan_close - Close a dmaengine_pcm_runtime_data
+ * based PCM substream and release channel
+ * @rtd: dmaengine pcm runtime data
+ *
+ * Releases the DMA channel associated with the PCM substream.
+ */
+int sunxi_snd_dmaengine_pcm_close_release_chan(void *rtd)
+{
+	struct dmaengine_pcm_runtime_data *prtd =
+			(struct dmaengine_pcm_runtime_data *)rtd;
+
+	dmaengine_synchronize(prtd->dma_chan);
+	dma_release_channel(prtd->dma_chan);
+	kfree(prtd);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(sunxi_snd_dmaengine_pcm_close_release_chan);
+#endif
+
 /**
  * snd_dmaengine_pcm_pointer_no_residue - dmaengine based PCM pointer implementation
  * @substream: PCM substream
@@ -235,6 +400,7 @@ EXPORT_SYMBOL_GPL(snd_dmaengine_pcm_trig
 snd_pcm_uframes_t snd_dmaengine_pcm_pointer_no_residue(struct snd_pcm_substream *substream)
 {
 	struct dmaengine_pcm_runtime_data *prtd = substream_to_prtd(substream);
+
 	return bytes_to_frames(substream->runtime, prtd->pos);
 }
 EXPORT_SYMBOL_GPL(snd_dmaengine_pcm_pointer_no_residue);
