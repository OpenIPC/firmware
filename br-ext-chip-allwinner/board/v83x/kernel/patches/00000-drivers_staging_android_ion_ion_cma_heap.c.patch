diff -drupN a/drivers/staging/android/ion/ion_cma_heap.c b/drivers/staging/android/ion/ion_cma_heap.c
--- a/drivers/staging/android/ion/ion_cma_heap.c	2018-08-06 17:23:04.000000000 +0300
+++ b/drivers/staging/android/ion/ion_cma_heap.c	2022-06-12 05:28:14.000000000 +0300
@@ -49,14 +49,6 @@ static int ion_cma_allocate(struct ion_h
 	struct device *dev = cma_heap->dev;
 	struct ion_cma_buffer_info *info;
 
-	dev_dbg(dev, "Request buffer allocation len %ld\n", len);
-
-	if (buffer->flags & ION_FLAG_CACHED)
-		return -EINVAL;
-
-	if (align > PAGE_SIZE)
-		return -EINVAL;
-
 	info = kzalloc(sizeof(struct ion_cma_buffer_info), GFP_KERNEL);
 	if (!info)
 		return ION_CMA_ALLOCATE_FAILED;
@@ -79,7 +71,6 @@ static int ion_cma_allocate(struct ion_h
 	/* keep this for memory release */
 	buffer->priv_virt = info;
 	buffer->sg_table = info->table;
-	dev_dbg(dev, "Allocate buffer %p\n", buffer);
 	return 0;
 
 free_table:
@@ -97,7 +88,6 @@ static void ion_cma_free(struct ion_buff
 	struct device *dev = cma_heap->dev;
 	struct ion_cma_buffer_info *info = buffer->priv_virt;
 
-	dev_dbg(dev, "Release buffer %p\n", buffer);
 	/* release memory */
 	dma_free_coherent(dev, buffer->size, info->cpu_addr, info->handle);
 	/* release sg table */
@@ -109,12 +99,16 @@ static void ion_cma_free(struct ion_buff
 static int ion_cma_mmap(struct ion_heap *mapper, struct ion_buffer *buffer,
 			struct vm_area_struct *vma)
 {
-	struct ion_cma_heap *cma_heap = to_cma_heap(buffer->heap);
-	struct device *dev = cma_heap->dev;
 	struct ion_cma_buffer_info *info = buffer->priv_virt;
-
-	return dma_mmap_coherent(dev, vma, info->cpu_addr, info->handle,
-				 buffer->size);
+	/* we need cached map in most case, so donot use dma_mmap_coherent */
+	/*
+	 *return dma_mmap_coherent(dev, vma, info->cpu_addr, info->handle,
+	 *			 buffer->size);
+	*/
+	return remap_pfn_range(vma, vma->vm_start,
+			      __phys_to_pfn((u32)info->handle) + vma->vm_pgoff,
+			      vma->vm_end - vma->vm_start,
+			      vma->vm_page_prot);
 }
 
 static void *ion_cma_map_kernel(struct ion_heap *heap,
@@ -130,13 +124,40 @@ static void ion_cma_unmap_kernel(struct
 {
 }
 
+/* return physical address in addr */
+static int ion_cma_phys(struct ion_heap *heap, struct ion_buffer *buffer,
+			ion_phys_addr_t *addr, size_t *len)
+{
+	struct ion_cma_heap *cma_heap = to_cma_heap(buffer->heap);
+	struct device *dev = cma_heap->dev;
+	struct ion_cma_buffer_info *info = buffer->priv_virt;
+
+	dev_dbg(dev, "Return buffer %p physical address 0x%pa\n", buffer,
+		&info->handle);
+
+	*addr = info->handle;
+	*len = buffer->size;
+
+	return 0;
+}
+
 static struct ion_heap_ops ion_cma_ops = {
 	.allocate = ion_cma_allocate,
 	.free = ion_cma_free,
 	.map_user = ion_cma_mmap,
 	.map_kernel = ion_cma_map_kernel,
 	.unmap_kernel = ion_cma_unmap_kernel,
+	.phys = ion_cma_phys,
 };
+static int ion_cma_debug_show(struct ion_heap *heap,
+			struct seq_file *sq, void *para)
+{
+	if (!heap || !sq)
+		return (-EINVAL);
+	if (heap->type != ION_HEAP_TYPE_DMA)
+		return (-ENODEV);
+	return dma_contiguous_area_maps(sq);
+}
 
 struct ion_heap *ion_cma_heap_create(struct ion_platform_heap *data)
 {
@@ -154,6 +175,7 @@ struct ion_heap *ion_cma_heap_create(str
 	 */
 	cma_heap->dev = data->priv;
 	cma_heap->heap.type = ION_HEAP_TYPE_DMA;
+	cma_heap->heap.debug_show = ion_cma_debug_show;
 	return &cma_heap->heap;
 }
 
