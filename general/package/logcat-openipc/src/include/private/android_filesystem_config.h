/*
 * Copyright (C) 2007 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* This file is used to define the properties of the filesystem
** images generated by build tools (mkbootfs and mkyaffs2image) and
** by the device side of adb.
*/

#ifndef _ANDROID_FILESYSTEM_CONFIG_H_
#define _ANDROID_FILESYSTEM_CONFIG_H_

#include <string.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <stdint.h>
#include <linux/capability.h>

/* This is the master Users and Groups config for the platform.
** DO NOT EVER RENUMBER.
*/

#define AID_ROOT             0  /* traditional unix root user */

#define AID_SYSTEM          100

/* EUREKA non-superuser */
#define AID_CHROME          1000
#define AID_NETFLIX         1001
#define AID_BLUETOOTH       1002
#define AID_SNTPD           1003
#define AID_SSHD            1004
#define AID_LOG             1005
#define AID_GRAPHICS        1006
#define AID_WIFI            1008
#define AID_NET_MGR         1009
#define AID_WATCHDOG        1010
#define AID_PANEL           1012
#define AID_DHCP            1013
#define AID_METRICS         1014
#define AID_MDNS            1015
#define AID_AUDIO           1016
#define AID_TESTER          1017
#define AID_LED             1018
#define AID_TRUSTZONE       1019
#define AID_DEVMEM          1020  /* Write access to /dev/mem */
#define AID_MEDIA           1021  /* Media service */
#define AID_TOUCH           1022  /* Atmel touch */
#define AID_INPUT           1023
#define AID_MESSAGEBUS      1024
#define AID_GWIFI           1025
#define AID_WEBSERVD        1026
#define AID_TRACING         1027  /* collect system traces */
#define AID_CAMERA          1028

#define AID_SHELL           2000  /* adb and debug shell user */

/* The 3000 series are intended for use as supplemental group id's only.
 * They indicate special Android capabilities that the kernel is aware of. */

/*
 * EUREKA: keep INET for now since it is used in ANDROID kernel we are using
 * currently.
 */
#define AID_INET          3003  /* can create AF_INET and AF_INET6 sockets */
#define AID_NET_BT_STACK  3008  /* bluetooth: access config files */

#if !defined(EXCLUDE_FS_CONFIG_STRUCTURES)
struct android_id_info {
    const char *name;
    unsigned aid;
    const char *dir;
};

static const struct android_id_info android_ids[] = {
    { "root",      AID_ROOT,        "/" },

    { "system",    AID_SYSTEM,      "/data/system" },

    { "chrome",    AID_CHROME,      "/data/chrome" },
    { "netflix",   AID_NETFLIX,     "/data/netflix" },
    { "bluetooth", AID_BLUETOOTH,   "/data/bluetooth" },
    { "sntpd",     AID_SNTPD,       "/data/sntpd" },
    { "sshd",      AID_SSHD,        "/data/sshd" },
    { "log",       AID_LOG,         "/data/log" },
    { "graphics",  AID_GRAPHICS,    "/data/graphics" },
    { "wifi",      AID_WIFI,        "/data/wifi" },
    { "net_mgr",   AID_NET_MGR,     "/data/net_mgr" },
    { "watchdog",  AID_WATCHDOG,    "/data/watchdog" },
    { "panel",     AID_PANEL,       "/data/panel" },
    { "dhcp",      AID_DHCP,        "/data/dhcp" },
    { "metrics",   AID_METRICS,     "/data/metrics" },
    { "mdns",      AID_MDNS,        "/data/mdns" },
    { "audio",     AID_AUDIO,       "/data/audio" },
    { "tester",    AID_TESTER,      "/data/tester" },
    { "led",       AID_LED,         "/data/led" },
    { "trustzone", AID_TRUSTZONE,   "/data/trustzone" },
    { "devmem",    AID_DEVMEM,      "/data/devmem" },
    { "media",     AID_MEDIA,       "/data/media" },
    { "touch",     AID_TOUCH,       "/data/touch" },
    { "input",     AID_INPUT,       "/data/input" },
    { "messagebus",AID_MESSAGEBUS,  "/data/messagebus" },
    { "gwifi",     AID_GWIFI,       "/data/gwifi" },
    { "webservd",  AID_WEBSERVD,    "/data/webservd" },
    { "tracing",   AID_TRACING,     "/data/tracing" },
    { "camera",    AID_CAMERA,      "/data/camera" },

    { "shell",     AID_SHELL,       "/data/shell" },

    { "inet",      AID_INET,        "/data/inet" },
    { "net_bt_stack",AID_NET_BT_STACK,"/data/bluetooth" }
};

#define android_id_count \
    (sizeof(android_ids) / sizeof(android_ids[0]))

struct fs_path_config {
    unsigned mode;
    unsigned uid;
    unsigned gid;
    uint64_t capabilities;
    const char *prefix;
};

/* Rules for directories.
** These rules are applied based on "first match", so they
** should start with the most specific path and work their
** way up to the root.
*/

static struct fs_path_config android_dirs[] = {
    // Allow cast_recovery to update /chrome. Will run as AID_CHROME.
    { 00755, AID_CHROME,    AID_CHROME,   0, "system/chrome" },
    { 00755, AID_CHROME,    AID_CHROME,   0, "system/chrome/*" },

    // Mesh-specific configuration.
    { 00755, AID_GWIFI,     AID_GWIFI,    0, "system/gwifi" },
    { 00755, AID_GWIFI,     AID_GWIFI,    0, "system/gwifi/*" },

    { 00755, AID_ROOT,      AID_ROOT,     0, "*" },
    { 00755, AID_ROOT,      AID_ROOT,     0, 0 },
};

/* Rules for files.
** These rules are applied based on "first match", so they
** should start with the most specific path and work their
** way up to the root. Prefixes ending in * denotes wildcard
** and will allow partial matches.
*/
static struct fs_path_config android_files[] = {
    // SUID for chrome-sandbox helper binary.
    // Sandbox source code explicitly checks against 4755.
    { 04755, AID_ROOT,      AID_CHROME,   0, "system/chrome/chrome-sandbox" },
    // SUID for dumpstate
    { 04750, AID_ROOT,      AID_CHROME,   0, "system/chrome/dumpstate" },

    // SUID for bt_debug_enable
    { 04750, AID_BLUETOOTH, AID_CHROME,   0, "system/bin/bt_debug_enable" },

    // rootfs
    { 00600, AID_ROOT,      AID_ROOT,     0, "default.prop" },
    { 00700, AID_ROOT,      AID_ROOT,     0, "init" },
    { 00600, AID_ROOT,      AID_ROOT,     0, "init.*" },
    { 00600, AID_ROOT,      AID_ROOT,     0, "ueventd.*" },
    { 00755, AID_ROOT,      AID_ROOT,     0, "bin/*" },
    { 00755, AID_ROOT,      AID_ROOT,     0, "lib/ld-*" },
    { 00700, AID_ROOT,      AID_ROOT,     0, "sbin/*" },
    { 00755, AID_ROOT,      AID_ROOT,     0, "setup/*" },
    // end of rootfs

    // system
    { 00755, AID_ROOT,      AID_ROOT,     0, "system/bin/*" },
    { 00600, AID_ROOT,      AID_ROOT,     0, "system/boot/*" },
    { 00600, AID_ROOT,      AID_ROOT,     0, "system/build.prop" },
    { 00700, AID_CHROME,    AID_CHROME,   0, "system/chrome/cast_cli" },
    { 00700, AID_CHROME,    AID_CHROME,   0, "system/chrome/cast_control_cli" },
    { 00700, AID_CHROME,    AID_CHROME,   0, "system/chrome/cast_shell" },
    { 00700, AID_TRACING,   AID_TRACING,  0, "system/chrome/traced" },
    { 00700, AID_ROOT,      AID_ROOT,     0, "system/chrome/dogfood/dumpstate_uploader" },
    { 00400, AID_ROOT,      AID_ROOT,     0, "system/chrome/dogfood/fake.dmp" },
    { 00700, AID_ROOT,      AID_ROOT,     0, "system/chrome/client_auth_indiv" },
    { 00700, AID_CHROME,    AID_CHROME,   0, "system/chrome/crash_uploader" },
    { 00700, AID_CHROME,    AID_CHROME,   0, "system/chrome/power_cycle_volume_reset" },
    { 00700, AID_CHROME,    AID_CHROME,   0, "system/chrome/process_manager" },
    { 00700, AID_CHROME,    AID_CHROME,   0, "system/chrome/update_engine" },
    { 00700, AID_CHROME,    AID_CHROME,   0, "system/chrome/v2mirroring" },
    { 00644, AID_ROOT,      AID_ROOT,     0, "system/chrome/watchdog/wd.dmp" },
    { 00644, AID_CHROME,    AID_CHROME,   0, "system/chrome/fake_log_report.dmp" },
    { 00700, AID_CHROME,    AID_CHROME,   0, "system/chrome/bin/*" },
    { 00600, AID_CHROME,    AID_CHROME,   0, "system/chrome/*" },
    { 00700, AID_DHCP,      AID_DHCP,     0, "system/etc/dhcpcd/*" },
    { 00755, AID_ROOT,      AID_ROOT,     0, "system/etc/init.d/*" },

    // Mesh-specific configuration.
    { 00644, AID_ROOT,      AID_ROOT,     0, "system/etc/dbus-1/*" },
    { 00700, AID_WEBSERVD,  AID_WEBSERVD, 0, "system/gwifi/bin/webservd" },
    { 00755, AID_GWIFI,     AID_GWIFI,    0, "system/gwifi/*" },

    // not in user build
    { 00755, AID_ROOT,      AID_ROOT,     0, "system/home/galois/*" },

    { 00755, AID_ROOT,      AID_ROOT,     0, "system/sbin/*" },
    { 00755, AID_ROOT,      AID_ROOT,     0, "system/usr/bin/*" },
    { 00755, AID_ROOT,      AID_ROOT,     0, "system/usr/local/bin/*" },
    { 00755, AID_ROOT,      AID_ROOT,     0, "system/usr/sbin/*" },
    { 00755, AID_ROOT,      AID_ROOT,     0, "system/xbin/*" },
    // end of system partition

    // files in factory test images
    { 00755, AID_ROOT,      AID_ROOT,     0, "home/galois/*" },
    { 00755, AID_ROOT,      AID_ROOT,     0, "home/flex/bin/*" },

    { 00644, AID_ROOT,      AID_ROOT,     0, "*" },
    { 00555, AID_ROOT,      AID_ROOT,     0, 0 },
};

static inline void fs_config(const char *path, int dir,
                             unsigned *uid, unsigned *gid, unsigned *mode, uint64_t *capabilities)
{
    const struct fs_path_config *pc;
    int plen;

    if (path[0] == '/') {
        path++;
    }

    pc = dir ? android_dirs : android_files;
    plen = strlen(path);
    for(; pc->prefix; pc++){
        int len = strlen(pc->prefix);
        if (dir) {
            if(plen < len) continue;
            if(!strncmp(pc->prefix, path, len)) break;
            continue;
        }
        /* If name ends in * then allow partial matches. */
        if (pc->prefix[len -1] == '*') {
            if(!strncmp(pc->prefix, path, len - 1)) break;
        } else if (plen == len){
            if(!strncmp(pc->prefix, path, len)) break;
        }
    }
    *uid = pc->uid;
    *gid = pc->gid;
    *mode = (*mode & (~07777)) | pc->mode;
    *capabilities = pc->capabilities;

#if 0
    fprintf(stderr,"< '%s' '%s' %d %d %o >\n",
            path, pc->prefix ? pc->prefix : "", *uid, *gid, *mode);
#endif
}
#endif
#endif
