#!/bin/sh
####################Variables Definition##########################

# SoC detect
CHIP_TYPE=$(ipcinfo --chip-name)

# Dumb cpu remapping
if [ "$CHIP_TYPE" == "gk7205v210" ]; then
  CHIP_TYPE=gk7205v200
fi

# Memory config
mem_start=0x40000000 # phy mem start

mem_total=$(fw_printenv -n totalmem | tr -d 'M')
mem_total=${mem_total:=64}

os_mem_size=$(fw_printenv -n osmem | tr -d 'M')
os_mem_size=${os_mem_size:=32}

BOARD=demo
YUV_TYPE0=0 # 0 -- raw, 1 --DC, 2 --bt1120, 3 --bt656

cd /lib/modules/$(uname -r)/goke/

##################################################################

# DDR start:0x40000000, kernel start:0x40000000,  OS(32M); MMZ start:0x42000000
#
# echo "${chipid}: ${mem_total}/${os_mem_size} | ${mem_start}/${mmz_start} | ${mmz_size}"

# GK7202V300
#
# mem_total=64                  # 64M, total mem
# mem_start=0x40000000          # phy mem start
# os_mem_size=32                # 32M, os mem
# mmz_start=0x42000000;         # mmz start addr
# mmz_size=32M;                 # 32M, mmz size

# GK7205V200
#
# mem_total=64                  # 64M, total mem
# mem_start=0x40000000          # phy mem start
# os_mem_size=32                # 32M, os mem
# mmz_start=0x42000000;         # mmz start addr
# mmz_size=32M;                 # 32M, mmz size

# GK7205V300
#
# mem_total=128                 # 128M, total mem
# mem_start=0x40000000          # phy mem start
# os_mem_size=32                # 32M, os mem
# mmz_start=0x42000000;         # mmz start addr
# mmz_size=96M;                 # 96M, mmz size

# GK7605V100
#
# mem_total=512                 # 512M, total mem
# mem_start=0x40000000          # phy mem start
# os_mem_size=32                # 32M, os mem
# mmz_start=0x42000000;         # mmz start addr
# mmz_size=480M;                # 480M, mmz size

##################################################################

report_error() {
	echo "******* Error: There's something wrong, please check! *****"
	exit 1
}

check_allocator() {
	allocator=$(grep mmz_allocator /proc/cmdline)
	if [ -z "${allocator}" ]; then
		if [ ${mem_total} -ge 128 ]; then
			set_allocator cma
		else
			set_allocator gk
		fi
	fi
}

insert_osal() {
	check_allocator

	MMZ=$(awk -F '=' '$1=="mmz"{print $2}' RS=" " /proc/cmdline)
	if [ -z "$MMZ" ]; then
		modprobe open_osal anony=1 mmz_allocator=gk mmz=anonymous,0,$mmz_start,$mmz_size || report_error
	else
		modprobe open_osal anony=1 mmz_allocator=cma mmz=$MMZ || report_error
	fi
}

insert_detect() {
	modprobe open_sys_config chip=$CHIP_TYPE sensors=unknown g_cmos_yuv_flag=$YUV_TYPE0 board=$BOARD
	insert_osal
	insmod gk7205v200_base.ko
	modprobe open_isp
	modprobe open_sensor_i2c
	modprobe open_sensor_spi
}

remove_detect() {
	rmmod -w open_sensor_spi
	rmmod -w open_sensor_i2c
	rmmod -w gk7205v200_isp
	rmmod -w gk7205v200_base
	rmmod -w open_osal >/dev/null 2>&1
	rmmod -w open_sys_config
}

insert_audio() {
	insmod gk7205v200_aio.ko
	insmod gk7205v200_ai.ko
	insmod gk7205v200_ao.ko
	insmod gk7205v200_aenc.ko
	insmod gk7205v200_adec.ko
	insmod gk7205v200_acodec.ko
	echo "insert audio"
}

remove_audio() {
	rmmod -w gk7205v200_acodec
	rmmod -w gk7205v200_adec
	rmmod -w gk7205v200_aenc
	rmmod -w gk7205v200_ao
	rmmod -w gk7205v200_ai
	rmmod -w gk7205v200_aio
	echo "remove audio"
}

insert_isp() {
	modprobe open_isp
}

insert_sil9024() {
	i2c_sel=2
	if [ "$CHIP_TYPE" == "gk7205v300" ]; then
		i2c_sel=1
	fi

	if [ "$BOARD" == "sck" ]; then
		insmod sil9024.ko norm=12 i2c_num=$i2c_sel #1080P@30fps
	fi
}

insert_adv7179() {
	i2c_sel=2
	if [ "$CHIP_TYPE" == "gk7205v300" ]; then
		i2c_sel=1
	fi

	if [ "$BOARD" == "sck" ]; then
		insmod adv7179.ko norm_mode=0 i2c_num=$i2c_sel # norm_mode = 0:PAL, 1:NTSC
	fi
}

insert_isp_piris() {
	if [ "$CHIP_TYPE" == "gk7605v100" -a "$BOARD" == "demo" ]; then
		modprobe open_piris
	fi
}

insert_ko() {
	if [ "$SENSOR" == "bt656" ]; then
		YUV_TYPE0=1
	fi
	modprobe open_sys_config chip=$CHIP_TYPE sensors=$SENSOR g_cmos_yuv_flag=$YUV_TYPE0 board=$BOARD
	insert_osal
	insmod gk7205v200_base.ko
	insmod gk7205v200_sys.ko
	# insmod gk7205v200_tde.ko
	insmod gk7205v200_rgn.ko
	insmod gk7205v200_vgs.ko
	insmod gk7205v200_vi.ko
	insert_isp
	insmod gk7205v200_vpss.ko
	# insmod gk7205v200_vo.ko                       # unused on OpenIPC
	# insmod gfbg.ko video="gfbg:vram0_size:1620"   # unused on OpenIPC  # default fb0:D1
	insmod gk7205v200_chnl.ko
	insmod gk7205v200_vedu.ko
	insmod gk7205v200_rc.ko
	insmod gk7205v200_venc.ko
	insmod gk7205v200_h264e.ko
	insmod gk7205v200_h265e.ko
	insmod gk7205v200_jpege.ko
	insmod gk7205v200_ive.ko save_power=0
	modprobe open_pwm
	modprobe open_sensor_i2c
	modprobe open_sensor_spi
	# insert_isp_piris                              # unused on OpenIPC
	# insert_sil9024;                               # unused on OpenIPC  # BT1120
	insert_audio
	modprobe open_mipi_rx
	# insmod gk7205v200_pm.ko                       # unused on OpenIPC
	modprobe open_wdt
}

remove_ko() {
	rmmod -w open_wdt
	# rmmod -w gk7205v200_pm                           # unused on OpenIPC
	remove_audio
	rmmod -w open_mipi_rx
	# rmmod -w open_piris                              # unused on OpenIPC
	# rmmod -w sil9024 &> /dev/null                    # unused on OpenIPC
	rmmod -w gk7205v200_ive
	rmmod -w gk7205v200_rc
	rmmod -w gk7205v200_jpege
	rmmod -w gk7205v200_h264e
	rmmod -w gk7205v200_h265e
	rmmod -w gk7205v200_venc
	rmmod -w gk7205v200_vedu
	rmmod -w gk7205v200_chnl
	# rmmod -w gfbg                                    # unused on OpenIPC
	# rmmod -w gk7205v200_vo                           # unused on OpenIPC
	rmmod -w gk7205v200_vpss
	rmmod -w open_isp
	rmmod -w gk7205v200_vi
	rmmod -w gk7205v200_vgs
	rmmod -w gk7205v200_rgn
	# rmmod -w gk7205v200_tde
	rmmod -w open_sensor_i2c &>/dev/null
	rmmod -w open_sensor_spi &>/dev/null
	rmmod -w open_pwm
	rmmod -w gk7205v200_sys
	rmmod -w gk7205v200_base
	rmmod -w open_osal
	rmmod -w open_sys_config
}

load_usage() {
	echo "Usage:  ./load_goke [-option] [sensor_name]"
	echo "options:"
	echo "    -i                       insert modules"
	echo "    -r                       remove modules"
	echo "    -a                       remove modules first, then insert modules"
	echo "    -sensor sensor_name      config sensor type [default: imx307]"
	echo "    -h                       help information"
	echo -e "Available sensors: gc2053 imx307 imx327 imx335 os05a sc2231 sc3235 sc4236  etc."
	echo -e "for example: ./load_goke -i -sensor imx307 -osmem 32M -board demo -yuv0 0\n"
}

calc_mmz_info() {
	mmz_start=$(echo "$mem_start $os_mem_size" |
		awk 'BEGIN { temp = 0; }
        {
                temp = $1/1024/1024 + $2;
        }
        END { printf("0x%x00000\n", temp); }')

	mmz_size=$(echo "$mem_total $os_mem_size" |
		awk 'BEGIN { temp = 0; }
        {
                temp = $1 - $2;
        }
        END { printf("%dM\n", temp); }')
	echo "mmz_start: $mmz_start, mmz_size: $mmz_size"
}

######################parse arg###################################
b_arg_sensor0=0
b_arg_sensor1=0
b_arg_yuv_type0=0
b_arg_insmod=0
b_arg_remove=0
b_arg_os_mem=0
b_arg_board=0

for arg in $@; do
	if [ $b_arg_sensor0 -eq 1 ]; then
		b_arg_sensor0=0
		SENSOR=$arg
	fi

	if [ $b_arg_os_mem -eq 1 ]; then
		b_arg_os_mem=0
		os_mem_size=$arg

		if [ -z $os_mem_size ]; then
			echo "[error] os_mem_size is null"
			exit
		fi
	fi

	if [ $b_arg_yuv_type0 -eq 1 ]; then
		b_arg_yuv_type0=0
		YUV_TYPE0=$arg
	fi

	if [ $b_arg_board -eq 1 ]; then
		b_arg_board=0
		BOARD=$arg
	fi

	case $arg in
	"-i")
		b_arg_insmod=1
		;;
	"-r")
		b_arg_remove=1
		;;
	"-a")
		b_arg_insmod=1
		b_arg_remove=1
		;;
	"-h")
		load_usage
		;;
	"-sensor0")
		b_arg_sensor0=1
		;;
	"-sensor")
		b_arg_sensor0=1
		;;
	"-osmem")
		b_arg_os_mem=1
		;;
	"-yuv0")
		b_arg_yuv_type0=1
		;;
	"-board")
		b_arg_board=1
		;;
	esac
done
#######################parse arg end########################
if [ $os_mem_size -ge $mem_total ]; then
	echo "[err] os_mem[$os_mem_size], over total_mem[$mem_total]"
	exit
fi

calc_mmz_info

#######################Action###############################

if [ $# -lt 1 ]; then
	load_usage
	exit 0
fi

if [ $b_arg_insmod -eq 1 ]; then
	if [ -n "$SENSOR" ]; then
		logger -s -p daemon.info -t goke "SENSOR: ${SENSOR}"
	else
		if fw_printenv -n sensor >/dev/null; then
			export SENSOR=$(fw_printenv -n sensor)
			logger -s -p daemon.info -t goke "Get data from U-Boot ENV and set SENSOR as ${SENSOR}"
		else
			insert_detect
			SENSOR_DETECT=$(ipcinfo --short-sensor)
			export SENSOR=${SENSOR_DETECT:=unknown}
			remove_detect
			logger -s -p daemon.info -t goke "Get data from ipcinfo and set SENSOR as ${SENSOR}"
			fw_setenv sensor $SENSOR && logger -s -p daemon.info -t goke "Writing ${SENSOR} to U-Boot ENV"
		fi
	fi
fi

if [ $b_arg_remove -eq 1 ]; then
	remove_ko
fi

if [ "$SENSOR" = "unknown" ]; then
	logger -s -p daemon.err -t goke "SENSOR is not detected, aborting..."
	exit 1
else
	if [ $b_arg_insmod -eq 1 ]; then
		insert_ko
	fi
fi
