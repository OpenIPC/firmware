diff -drupN a/drivers/usb/dwc2/platform.c b/drivers/usb/dwc2/platform.c
--- a/drivers/usb/dwc2/platform.c	2017-10-21 18:09:07.000000000 +0300
+++ b/drivers/usb/dwc2/platform.c	2022-06-09 05:02:34.000000000 +0300
@@ -54,52 +54,28 @@
 
 static const char dwc2_driver_name[] = "dwc2";
 
-static const struct dwc2_core_params params_bcm2835 = {
-	.otg_cap			= 0,	/* HNP/SRP capable */
-	.otg_ver			= 0,	/* 1.3 */
-	.dma_enable			= 1,
-	.dma_desc_enable		= 0,
-	.speed				= 0,	/* High Speed */
-	.enable_dynamic_fifo		= 1,
-	.en_multiple_tx_fifo		= 1,
-	.host_rx_fifo_size		= 774,	/* 774 DWORDs */
-	.host_nperio_tx_fifo_size	= 256,	/* 256 DWORDs */
-	.host_perio_tx_fifo_size	= 512,	/* 512 DWORDs */
-	.max_transfer_size		= 65535,
-	.max_packet_count		= 511,
-	.host_channels			= 8,
-	.phy_type			= 1,	/* UTMI */
-	.phy_utmi_width			= 8,	/* 8 bits */
-	.phy_ulpi_ddr			= 0,	/* Single */
-	.phy_ulpi_ext_vbus		= 0,
-	.i2c_enable			= 0,
-	.ulpi_fs_ls			= 0,
-	.host_support_fs_ls_low_power	= 0,
-	.host_ls_low_power_phy_clk	= 0,	/* 48 MHz */
-	.ts_dline			= 0,
-	.reload_ctl			= 0,
-	.ahbcfg				= 0x10,
-	.uframe_sched			= 0,
-	.external_id_pin_ctl		= -1,
-	.hibernation			= -1,
-};
+static const struct dwc2_core_params params_jz4780 = {
+	.otg_cap			= 2,
+	.otg_ver			= 1,
+	.dma_enable			=  1,	/* DMA Enabled */
+#ifdef CONFIG_USB_DWC2_DMA_BUFFER_MODE
+	.dma_desc_enable		=  0,
+#endif
+#ifdef CONFIG_USB_DWC2_DMA_DESCRIPTOR_MODE
+	.dma_desc_enable		=  1,
+#endif
 
-static const struct dwc2_core_params params_rk3066 = {
-	.otg_cap			= 2,	/* non-HNP/non-SRP */
-	.otg_ver			= -1,
-	.dma_enable			= -1,
-	.dma_desc_enable		= 0,
 	.speed				= -1,
-	.enable_dynamic_fifo		= 1,
+	.enable_dynamic_fifo		= -1,
 	.en_multiple_tx_fifo		= -1,
-	.host_rx_fifo_size		= 520,	/* 520 DWORDs */
-	.host_nperio_tx_fifo_size	= 128,	/* 128 DWORDs */
-	.host_perio_tx_fifo_size	= 256,	/* 256 DWORDs */
-	.max_transfer_size		= 65535,
+	.host_rx_fifo_size		=  1024, /* 1024 DWORDs */
+	.host_nperio_tx_fifo_size	=  1024, /* 1024 DWORDs */
+	.host_perio_tx_fifo_size	=  1024, /* 1024 DWORDs */
+	.max_transfer_size		= -1,
 	.max_packet_count		= -1,
 	.host_channels			= -1,
 	.phy_type			= -1,
-	.phy_utmi_width			= -1,
+	.phy_utmi_width			= 16,
 	.phy_ulpi_ddr			= -1,
 	.phy_ulpi_ext_vbus		= -1,
 	.i2c_enable			= -1,
@@ -108,39 +84,26 @@ static const struct dwc2_core_params par
 	.host_ls_low_power_phy_clk	= -1,
 	.ts_dline			= -1,
 	.reload_ctl			= -1,
-	.ahbcfg				= GAHBCFG_HBSTLEN_INCR16 <<
-					  GAHBCFG_HBSTLEN_SHIFT,
+	.ahbcfg				= -1,
 	.uframe_sched			= -1,
 	.external_id_pin_ctl		= -1,
-	.hibernation			= -1,
+	.hibernation			= 0,
 };
 
 static int __dwc2_lowlevel_hw_enable(struct dwc2_hsotg *hsotg)
 {
-	struct platform_device *pdev = to_platform_device(hsotg->dev);
 	int ret;
 
-	ret = regulator_bulk_enable(ARRAY_SIZE(hsotg->supplies),
-				    hsotg->supplies);
-	if (ret)
-		return ret;
-
 	if (hsotg->clk) {
 		ret = clk_prepare_enable(hsotg->clk);
 		if (ret)
 			return ret;
+		printk("OTG CLK %x\n", *(volatile unsigned int *)(0xb0000020));
 	}
 
 	if (hsotg->uphy)
 		ret = usb_phy_init(hsotg->uphy);
-	else if (hsotg->plat && hsotg->plat->phy_init)
-		ret = hsotg->plat->phy_init(pdev, hsotg->plat->phy_type);
-	else {
-		ret = phy_power_on(hsotg->phy);
-		if (ret == 0)
-			ret = phy_init(hsotg->phy);
-	}
-
+	printk("CPCCR CLK %x\n", *(volatile unsigned int *)(0xb0000024));
 	return ret;
 }
 
@@ -162,27 +125,14 @@ int dwc2_lowlevel_hw_enable(struct dwc2_
 
 static int __dwc2_lowlevel_hw_disable(struct dwc2_hsotg *hsotg)
 {
-	struct platform_device *pdev = to_platform_device(hsotg->dev);
 	int ret = 0;
 
 	if (hsotg->uphy)
 		usb_phy_shutdown(hsotg->uphy);
-	else if (hsotg->plat && hsotg->plat->phy_exit)
-		ret = hsotg->plat->phy_exit(pdev, hsotg->plat->phy_type);
-	else {
-		ret = phy_exit(hsotg->phy);
-		if (ret == 0)
-			ret = phy_power_off(hsotg->phy);
-	}
-	if (ret)
-		return ret;
 
 	if (hsotg->clk)
 		clk_disable_unprepare(hsotg->clk);
 
-	ret = regulator_bulk_disable(ARRAY_SIZE(hsotg->supplies),
-				     hsotg->supplies);
-
 	return ret;
 }
 
@@ -204,78 +154,35 @@ int dwc2_lowlevel_hw_disable(struct dwc2
 
 static int dwc2_lowlevel_hw_init(struct dwc2_hsotg *hsotg)
 {
-	int i, ret;
+	int ret;
 
 	/* Set default UTMI width */
 	hsotg->phyif = GUSBCFG_PHYIF16;
 
-	/*
-	 * Attempt to find a generic PHY, then look for an old style
-	 * USB PHY and then fall back to pdata
-	 */
-	hsotg->phy = devm_phy_get(hsotg->dev, "usb2-phy");
-	if (IS_ERR(hsotg->phy)) {
-		ret = PTR_ERR(hsotg->phy);
+	hsotg->uphy = devm_usb_get_phy_by_phandle(hsotg->dev, "ingenic,usbphy", 0);
+	if (IS_ERR(hsotg->uphy)) {
+		ret = PTR_ERR(hsotg->uphy);
 		switch (ret) {
 		case -ENODEV:
-		case -ENOSYS:
-			hsotg->phy = NULL;
+		case -ENXIO:
+			hsotg->uphy = NULL;
 			break;
 		case -EPROBE_DEFER:
 			return ret;
 		default:
-			dev_err(hsotg->dev, "error getting phy %d\n", ret);
-			return ret;
-		}
-	}
-
-	if (!hsotg->phy) {
-		hsotg->uphy = devm_usb_get_phy(hsotg->dev, USB_PHY_TYPE_USB2);
-		if (IS_ERR(hsotg->uphy)) {
-			ret = PTR_ERR(hsotg->uphy);
-			switch (ret) {
-			case -ENODEV:
-			case -ENXIO:
-				hsotg->uphy = NULL;
-				break;
-			case -EPROBE_DEFER:
-				return ret;
-			default:
-				dev_err(hsotg->dev, "error getting usb phy %d\n",
+			dev_err(hsotg->dev, "error getting usb phy %d\n",
 					ret);
-				return ret;
-			}
+			return ret;
 		}
 	}
 
 	hsotg->plat = dev_get_platdata(hsotg->dev);
 
-	if (hsotg->phy) {
-		/*
-		 * If using the generic PHY framework, check if the PHY bus
-		 * width is 8-bit and set the phyif appropriately.
-		 */
-		if (phy_get_bus_width(hsotg->phy) == 8)
-			hsotg->phyif = GUSBCFG_PHYIF8;
-	}
-
-	/* Clock */
-	hsotg->clk = devm_clk_get(hsotg->dev, "otg");
+	hsotg->clk = devm_clk_get(hsotg->dev, "gate_otg");
 	if (IS_ERR(hsotg->clk)) {
 		hsotg->clk = NULL;
 		dev_dbg(hsotg->dev, "cannot get otg clock\n");
 	}
-
-	/* Regulators */
-	for (i = 0; i < ARRAY_SIZE(hsotg->supplies); i++)
-		hsotg->supplies[i].supply = dwc2_hsotg_supply_names[i];
-
-	ret = devm_regulator_bulk_get(hsotg->dev, ARRAY_SIZE(hsotg->supplies),
-				      hsotg->supplies);
-	if (ret) {
-		dev_err(hsotg->dev, "failed to request supplies: %d\n", ret);
-		return ret;
-	}
 	return 0;
 }
 
@@ -299,7 +206,6 @@ static int dwc2_driver_remove(struct pla
 		dwc2_hcd_remove(hsotg);
 	if (hsotg->gadget_enabled)
 		dwc2_hsotg_remove(hsotg);
-
 	if (hsotg->ll_hw_enabled)
 		dwc2_lowlevel_hw_disable(hsotg);
 
@@ -307,10 +213,7 @@ static int dwc2_driver_remove(struct pla
 }
 
 static const struct of_device_id dwc2_of_match_table[] = {
-	{ .compatible = "brcm,bcm2835-usb", .data = &params_bcm2835 },
-	{ .compatible = "rockchip,rk3066-usb", .data = &params_rk3066 },
-	{ .compatible = "snps,dwc2", .data = NULL },
-	{ .compatible = "samsung,s3c6400-hsotg", .data = NULL},
+	{ .compatible = "ingenic,dwc2-hsotg", .data = (void *)&params_jz4780},
 	{},
 };
 MODULE_DEVICE_TABLE(of, dwc2_of_match_table);
@@ -444,6 +347,7 @@ static int dwc2_driver_probe(struct plat
 		hsotg->hcd_enabled = 1;
 	}
 
+
 	platform_set_drvdata(dev, hsotg);
 
 	dwc2_debugfs_init(hsotg);
