diff -drupN a/drivers/net/ethernet/ingenic/ingenic_mac.h b/drivers/net/ethernet/ingenic/ingenic_mac.h
--- a/drivers/net/ethernet/ingenic/ingenic_mac.h	1970-01-01 03:00:00.000000000 +0300
+++ b/drivers/net/ethernet/ingenic/ingenic_mac.h	2022-06-09 05:02:30.000000000 +0300
@@ -0,0 +1,132 @@
+#ifndef __INGENIC_MAC_H__
+#define __INGENIC_MAC_H__
+
+
+#include "synopGMAC_Dev.h"
+
+/* wrapper around a pointer to a socket buffer,
+ * so a DMA handle can be stored along with the buffer */
+struct ingenic_mac_buffer {
+	struct sk_buff *skb;
+	dma_addr_t dma;
+	unsigned long time_stamp;
+	u16 length;
+	volatile u8 transfering; /* used by tx */
+	volatile u8 invalid;	 /* used by rx */
+	u16 mapped_as_page;
+	unsigned int segs;
+};
+
+/* TX/RX descriptor defines */
+#define INGENIC_MAC_TX_DESC_COUNT                128
+#define INGENIC_MAC_MAX_TXD                      256
+#define INGENIC_MAC_MIN_TXD                       80
+
+#define INGENIC_MAC_RX_DESC_COUNT                128
+#define INGENIC_MAC_MAX_RXD                      256
+#define INGENIC_MAC_MIN_RXD                       80
+
+struct ingenic_mac_tx_ring {
+	/* pointer to the descriptor ring memory */
+	DmaDesc *desc;
+	/* physical address of the descriptor ring */
+	dma_addr_t dma;
+	/* number of descriptors in the ring */
+	unsigned int count;
+	/* next descriptor to associate a buffer with */
+	unsigned int next_to_use;
+	/* next descriptor to check for trans done status */
+	unsigned int next_to_clean;
+	/* array of buffer information structs */
+	struct ingenic_mac_buffer *buffer_info;
+};
+
+struct ingenic_mac_rx_ring {
+	/* pointer to the descriptor ring memory */
+	DmaDesc *desc;
+	/* physical address of the descriptor ring */
+	dma_addr_t dma;
+	/* number of descriptors in the ring */
+	unsigned int count;
+	/* next descriptor to associate a buffer with */
+	unsigned int next_to_use;
+	/* next descriptor to check for DD status bit */
+	unsigned int next_to_clean;
+	/* array of buffer information structs */
+	struct ingenic_mac_buffer *buffer_info;
+};
+
+#define INGENIC_MAC_DESC_UNUSED(R)						\
+	((((R)->next_to_clean > (R)->next_to_use)			\
+	  ? 0 : (R)->count) + (R)->next_to_clean - (R)->next_to_use - 1)
+
+#define INGENIC_MAC_DESC_USED(R)  (((R)->count - 1) - INGENIC_MAC_DESC_UNUSED(R))
+
+#define INGENIC_MAC_GET_DESC(R, i)	(&(((DmaDesc *)((R).desc))[i]))
+#define INGENIC_MAC_RX_DESC(R, i)		INGENIC_MAC_GET_DESC(R, i)
+#define INGENIC_MAC_TX_DESC(R, i)		INGENIC_MAC_GET_DESC(R, i)
+
+struct ingenic_mac_local {
+	struct clk *clk_gate;
+	struct clk *clk_cgu;
+	void __iomem *baseaddr;
+
+	struct ingenic_mac_tx_ring tx_ring;
+	unsigned int restart_queue;
+	u32 tx_timeout_count;
+
+	struct timer_list watchdog_timer;
+	struct ingenic_mac_rx_ring rx_ring;
+
+	struct napi_struct napi;
+	spinlock_t napi_poll_lock;
+
+	struct net_device *netdev;
+	struct platform_device *pdev;
+	struct net_device_stats net_stats;
+
+	spinlock_t stats_lock;
+	unsigned int total_tx_bytes;
+	unsigned int total_tx_packets;
+	unsigned int total_rx_bytes;
+	unsigned int total_rx_packets;
+
+	atomic_t tx_fifo_used;
+
+	unsigned char Mac[6];	/* MAC address of the board */
+	spinlock_t link_lock;
+
+	/* MII and PHY stuffs */
+	int old_link;
+	int old_speed;
+	int old_duplex;
+
+	struct phy_device *phydev;
+	struct mii_bus *mii_bus;
+	bool use_mdio_goio;
+	struct platform_device *mii_pdev;
+
+	u32 alloc_rx_buff_failed;
+
+	struct work_struct reset_task;
+	struct mii_if_info mii;
+
+	/*hw reset*/
+	u32 reset_ms;
+	int reset_gpio;
+	u32 reset_lvl;
+	int id;
+
+	synopGMACdevice *gmacdev;
+	unsigned int interface;
+};
+
+
+extern struct proc_dir_entry *proc_create_data(const char *name, umode_t mode,
+					struct proc_dir_entry *parent,
+					const struct file_operations *proc_fops,
+					void *data);
+extern int jz_clk_set_rate(struct clk *clk, unsigned long rate);
+extern void *PDE_DATA(const struct inode *inode);
+
+#endif	/* __INGENIC_MAC_H__ */
