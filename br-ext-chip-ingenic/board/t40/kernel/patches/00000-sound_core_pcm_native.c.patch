diff -drupN a/sound/core/pcm_native.c b/sound/core/pcm_native.c
--- a/sound/core/pcm_native.c	2017-10-21 18:09:07.000000000 +0300
+++ b/sound/core/pcm_native.c	2022-06-09 05:02:37.000000000 +0300
@@ -1757,6 +1757,34 @@ static int snd_pcm_drain(struct snd_pcm_
 	return result;
 }
 
+#ifdef CONFIG_SND_ALSA_COMMON_CODEC
+#include <sound/soc.h>
+
+extern void common_codec_must_be_mute(struct snd_pcm_substream *substream);
+
+extern void common_codec_can_be_unmute(struct snd_pcm_substream *substream);
+
+
+static void (*codec_must_be_mute)(struct snd_pcm_substream *substream);
+static void (*codec_can_be_unmute)(struct snd_pcm_substream *substream);
+
+void snd_pcm_set_codec_mute_callback(
+    void (*_codec_must_be_mute)(struct snd_pcm_substream *),
+    void (*_codec_can_be_unmute)(struct snd_pcm_substream *))
+{
+    if (_codec_must_be_mute && codec_must_be_mute)
+        panic("mute callback has been set %p %p", _codec_must_be_mute, codec_must_be_mute);
+
+    if (_codec_can_be_unmute && codec_can_be_unmute)
+        panic("unmute callback has been set %p %p", _codec_can_be_unmute, codec_can_be_unmute);
+
+    codec_must_be_mute = _codec_must_be_mute;
+    codec_can_be_unmute = _codec_can_be_unmute;
+}
+EXPORT_SYMBOL(snd_pcm_set_codec_mute_callback);
+
+#endif
+
 /*
  * drop ioctl
  *
@@ -1776,6 +1804,13 @@ static int snd_pcm_drop(struct snd_pcm_s
 	    runtime->status->state == SNDRV_PCM_STATE_SUSPENDED)
 		return -EBADFD;
 
+#ifdef CONFIG_SND_ALSA_COMMON_CODEC
+	common_codec_must_be_mute(substream);
+
+    if (codec_must_be_mute)
+        codec_must_be_mute(substream);
+#endif
+
 	snd_pcm_stream_lock_irq(substream);
 	/* resume pause */
 	if (runtime->status->state == SNDRV_PCM_STATE_PAUSED)
@@ -2777,8 +2812,16 @@ static int snd_pcm_common_ioctl1(struct
 		return snd_pcm_prepare(substream, file);
 	case SNDRV_PCM_IOCTL_RESET:
 		return snd_pcm_reset(substream);
-	case SNDRV_PCM_IOCTL_START:
-		return snd_pcm_action_lock_irq(&snd_pcm_action_start, substream, SNDRV_PCM_STATE_RUNNING);
+	case SNDRV_PCM_IOCTL_START: {
+		int ret;
+		ret = snd_pcm_action_lock_irq(&snd_pcm_action_start, substream, SNDRV_PCM_STATE_RUNNING);
+#ifdef CONFIG_SND_ALSA_COMMON_CODEC
+		common_codec_can_be_unmute(substream);
+        if (codec_can_be_unmute)
+            codec_can_be_unmute(substream);
+#endif
+		return ret;
+    }
 	case SNDRV_PCM_IOCTL_LINK:
 		return snd_pcm_link(substream, (int)(unsigned long) arg);
 	case SNDRV_PCM_IOCTL_UNLINK:
