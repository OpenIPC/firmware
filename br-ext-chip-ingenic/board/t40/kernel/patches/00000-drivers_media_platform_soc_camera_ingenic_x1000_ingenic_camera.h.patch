diff -drupN a/drivers/media/platform/soc_camera/ingenic/x1000/ingenic_camera.h b/drivers/media/platform/soc_camera/ingenic/x1000/ingenic_camera.h
--- a/drivers/media/platform/soc_camera/ingenic/x1000/ingenic_camera.h	1970-01-01 03:00:00.000000000 +0300
+++ b/drivers/media/platform/soc_camera/ingenic/x1000/ingenic_camera.h	2022-06-09 05:02:29.000000000 +0300
@@ -0,0 +1,202 @@
+
+#ifndef __INGENIC_CAMERA_H__
+#define __INGENIC_CAMERA_H__
+
+#include <media/soc_camera.h>
+#include <linux/clk.h>
+#include <linux/proc_fs.h>
+
+#define INGENIC_CAMERA_DATA_HIGH         1
+#define INGENIC_CAMERA_PCLK_RISING       2
+#define INGENIC_CAMERA_VSYNC_HIGH        4
+
+/* define the maximum number of camera sensor that attach to cim controller */
+#define MAX_SOC_CAM_NUM         	2
+struct ingenic_camera_pdata {
+	unsigned long mclk_10khz;
+	unsigned long flags;
+};
+
+/*
+ * CIM registers
+ */
+#define CIM_CFG				(0x00)
+#define CIM_CTRL			(0x04)
+#define CIM_STATE			(0x08)
+#define CIM_IID				(0x0c)
+#define CIM_DA				(0x20)
+#define CIM_FA				(0x24)
+#define CIM_FID				(0x28)
+#define CIM_CMD				(0x2c)
+#define CIM_SIZE			(0x30)
+#define CIM_OFFSET			(0x34)
+#define CIM_CTRL2			(0x50)
+#define CIM_FS				(0x54)
+#define CIM_IMR				(0x58)
+
+/*CIM Configuration Register (CIMCFG)*/
+#define CIM_CFG_VSP_HIGH		(1 << 14) 			/* VSYNC Polarity: 1-falling edge active */
+#define CIM_CFG_HSP_HIGH		(1 << 13) 			/* HSYNC Polarity: 1-falling edge active */
+#define CIM_CFG_PCP_HIGH		(1 << 12) 			/* PCLK working edge: 1-falling */
+
+#define CIM_CFG_DMA_BURST_TYPE		10
+#define CIM_CFG_DMA_BURST_INCR8		(0 << CIM_CFG_DMA_BURST_TYPE)
+#define CIM_CFG_DMA_BURST_INCR16	(1 << CIM_CFG_DMA_BURST_TYPE)
+#define CIM_CFG_DMA_BURST_INCR32	(2 << CIM_CFG_DMA_BURST_TYPE)
+#define CIM_CFG_DMA_BURST_INCR64	(3 << CIM_CFG_DMA_BURST_TYPE)
+
+#define CIM_CFG_PACK			4
+#define CIM_CFG_PACK_VY1UY0		(0 << CIM_CFG_PACK)
+#define CIM_CFG_PACK_Y0VY1U		(1 << CIM_CFG_PACK)
+#define CIM_CFG_PACK_UY0VY1		(2 << CIM_CFG_PACK)
+#define CIM_CFG_PACK_Y1UY0V		(3 << CIM_CFG_PACK)
+#define CIM_CFG_PACK_Y0UY1V		(4 << CIM_CFG_PACK)
+#define CIM_CFG_PACK_UY1VY0		(5 << CIM_CFG_PACK)
+#define CIM_CFG_PACK_Y1VY0U		(6 << CIM_CFG_PACK)
+#define CIM_CFG_PACK_VY0UY1		(7 << CIM_CFG_PACK)
+
+#define CIM_CFG_BS0             	16
+#define CIM_CFG_BS0_2_OBYT0		(0 << CIM_CFG_BS0)
+#define CIM_CFG_BS1_2_OBYT0     	(1 << CIM_CFG_BS0)
+#define CIM_CFG_BS2_2_OBYT0     	(2 << CIM_CFG_BS0)
+#define CIM_CFG_BS3_2_OBYT0     	(3 << CIM_CFG_BS0)
+
+#define CIM_CFG_BS1             	18
+#define CIM_CFG_BS0_2_OBYT1		(0 << CIM_CFG_BS1)
+#define CIM_CFG_BS1_2_OBYT1     	(1 << CIM_CFG_BS1)
+#define CIM_CFG_BS2_2_OBYT1     	(2 << CIM_CFG_BS1)
+#define CIM_CFG_BS3_2_OBYT1     	(3 << CIM_CFG_BS1)
+
+#define CIM_CFG_BS2             	20
+#define CIM_CFG_BS0_2_OBYT2		(0 << CIM_CFG_BS2)
+#define CIM_CFG_BS1_2_OBYT2     	(1 << CIM_CFG_BS2)
+#define CIM_CFG_BS2_2_OBYT2     	(2 << CIM_CFG_BS2)
+#define CIM_CFG_BS3_2_OBYT2     	(3 << CIM_CFG_BS2)
+
+#define CIM_CFG_BS3             	22
+#define CIM_CFG_BS0_2_OBYT3		(0 << CIM_CFG_BS3)
+#define CIM_CFG_BS1_2_OBYT3     	(1 << CIM_CFG_BS3)
+#define CIM_CFG_BS2_2_OBYT3     	(2 << CIM_CFG_BS3)
+#define CIM_CFG_BS3_2_OBYT3     	(3 << CIM_CFG_BS3)
+
+#define CIM_CFG_DSM			0
+#define CIM_CFG_DSM_CPM			(0 << CIM_CFG_DSM)		/* CCIR656 Progressive Mode */
+#define CIM_CFG_DSM_CIM			(1 << CIM_CFG_DSM)		/* CCIR656 Interlace Mode */
+#define CIM_CFG_DSM_GCM			(2 << CIM_CFG_DSM)		/* Gated Clock Mode */
+
+/* CIM State Register  (CIM_STATE) */
+#define CIM_STATE_DMA_EEOF		(1 << 11)			/* DMA Line EEOf irq */
+#define CIM_STATE_DMA_STOP		(1 << 10)			/* DMA stop irq */
+#define CIM_STATE_DMA_EOF		(1 << 9)			/* DMA end irq */
+#define CIM_STATE_DMA_SOF		(1 << 8)			/* DMA start irq */
+#define CIM_STATE_SIZE_ERR		(1 << 3)			/* Frame size check error */
+#define CIM_STATE_RXF_OF		(1 << 2)			/* RXFIFO over flow irq */
+#define CIM_STATE_RXF_EMPTY		(1 << 1)			/* RXFIFO empty irq */
+#define CIM_STATE_STP_ACK		(1 << 0)			/* CIM disabled status */
+#define CIM_STATE_RXOF_STOP_EOF		(CIM_STATE_RXF_OF | CIM_STATE_DMA_STOP | CIM_STATE_DMA_EOF)
+
+/* CIM DMA Command Register (CIM_CMD) */
+#define CIM_CMD_SOFINT			(1 << 31)			/* enable DMA start irq */
+#define CIM_CMD_EOFINT			(1 << 30)			/* enable DMA end irq */
+#define CIM_CMD_EEOFINT			(1 << 29)			/* enable DMA EEOF irq */
+#define CIM_CMD_STOP			(1 << 28)			/* enable DMA stop irq */
+#define CIM_CMD_OFRCV			(1 << 27)
+
+/*CIM Control Register (CIMCR)*/
+#define CIM_CTRL_FRC_BIT		16
+#define CIM_CTRL_FRC_1			(0x0 << CIM_CTRL_FRC_BIT) 	/* Sample every n+1 frame */
+#define CIM_CTRL_FRC_10			(0x9 << CIM_CTRL_FRC_BIT)
+
+#define CIM_CTRL_DMA_SYNC		(1 << 7)        		/*when change DA, do frame sync */
+#define CIM_CTRL_STP_REQ		(1 << 4) 			/*request to stop */
+#define CIM_CTRL_CIM_RST		(1 << 3)
+#define CIM_CTRL_DMA_EN			(1 << 2) 			/* Enable DMA */
+#define CIM_CTRL_RXF_RST		(1 << 1) 			/* RxFIFO reset */
+#define CIM_CTRL_ENA			(1 << 0) 			/* Enable CIM */
+
+/* CIM Control Register 2 (CIMCR2) */
+#define CIM_CTRL2_FSC			(1 << 23)			/* enable frame size check */
+#define CIM_CTRL2_ARIF			(1 << 22)			/* enable auto-recovery for incomplete frame */
+#define CIM_CTRL2_OPG_BIT		4				/* option priority configuration */
+#define CIM_CTRL2_OPG_MASK		(0x3 << CIM_CTRL2_OPG_BIT)
+#define CIM_CTRL2_OPE			(1 << 2)			/* optional priority mode enable */
+#define CIM_CTRL2_APM			(1 << 0)			/* auto priority mode enable*/
+
+/*CIM Interrupt Mask Register (CIMIMR)*/
+#define CIM_IMR_STPM			(1<<10)
+#define CIM_IMR_EOFM			(1<<9)
+#define CIM_IMR_SOFM			(1<<8)
+#define CIM_IMR_FSEM			(1<<3)
+#define CIM_IMR_RFIFO_OFM		(1<<2)
+#define CIM_IMR_STPM_1			(1<<0)
+
+/* CIM Frame Size Register (CIM_FS) */
+#define CIM_FS_FVS_BIT			16				/* vertical size of the frame */
+#define CIM_FS_FVS_MASK			(0x1fff << CIM_FS_FVS_BIT)
+#define CIM_FS_BPP_BIT			14				/* bytes per pixel */
+#define CIM_FS_BPP_MASK			(0x3 << CIM_FS_BPP_BIT)
+#define CIM_FS_FHS_BIT			0       			/* horizontal size of the frame */
+#define CIM_FS_FHS_MASK			(0x1fff << CIM_FS_FHS_BIT)
+
+#define VERSION_CODE		KERNEL_VERSION(0, 0, 1)
+#define DRIVER_NAME		"ingenic-cim"
+
+#define MAX_BUFFER_NUM		(32)
+#define MAX_VIDEO_MEM		(16*1024*1024)
+
+/*
+ * Structures
+ */
+struct ingenic_camera_dma_desc {
+	dma_addr_t next;
+	unsigned int id;
+	unsigned int buf;
+	unsigned int cmd;
+	/* only used when SEP = 1 */
+	unsigned int cb_frame;
+	unsigned int cb_len;
+	unsigned int cr_frame;
+	unsigned int cr_len;
+} __attribute__ ((aligned (32)));
+
+/* buffer for one video frame */
+struct ingenic_buffer {
+	/* common v4l buffer stuff -- must be first */
+	struct vb2_v4l2_buffer vb;
+	struct list_head queue;
+};
+
+struct ingenic_camera_dev {
+	struct soc_camera_host soc_host;
+	struct soc_camera_device *icd[MAX_SOC_CAM_NUM];
+	struct ingenic_camera_pdata *pdata;
+
+	struct resource *res;
+	struct clk *clk;
+	struct clk *lcd_clk;
+	struct clk *mclk;
+	void __iomem *base;
+	unsigned int irq;
+
+	spinlock_t lock;
+	struct list_head capture;
+	struct ingenic_buffer *active;
+
+	struct vb2_alloc_ctx	*alloc_ctx;
+	unsigned int buf_cnt;
+	struct ingenic_camera_dma_desc *dma_desc;
+	void *desc_vaddr;
+
+	struct ingenic_camera_dma_desc *dma_desc_head;
+	struct ingenic_camera_dma_desc *dma_desc_tail;
+
+	int start_streaming_called;
+	unsigned int field;
+	unsigned int sequence;
+	int dma_stopped;
+
+	/* for debug */
+	long long debug_ms_start;
+};
+
+#endif	/* __INGENIC_CAMERA_H__ */
