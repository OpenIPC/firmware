diff -drupN a/drivers/mtd/devices/ingenic_sfc_v2/nand_device/dosilicon_nand.c b/drivers/mtd/devices/ingenic_sfc_v2/nand_device/dosilicon_nand.c
--- a/drivers/mtd/devices/ingenic_sfc_v2/nand_device/dosilicon_nand.c	1970-01-01 03:00:00.000000000 +0300
+++ b/drivers/mtd/devices/ingenic_sfc_v2/nand_device/dosilicon_nand.c	2022-06-09 05:02:30.000000000 +0300
@@ -0,0 +1,167 @@
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/errno.h>
+#include <linux/device.h>
+#include <linux/slab.h>
+#include <linux/mtd/partitions.h>
+#include "../spinand.h"
+#include "../ingenic_sfc_common.h"
+#include "nand_common.h"
+
+#define DOSILICON_DEVICES_NUM         2
+#define THOLD	    5
+#define TSETUP	    5
+#define TSHSL_R	    100
+#define TSHSL_W	    100
+
+#define TRD	    90
+#define TPP	    700
+#define TBE	    10
+
+struct ingenic_sfcnand_device *dosilicon_nand;
+
+static struct ingenic_sfcnand_base_param dosilicon_param[DOSILICON_DEVICES_NUM] = {
+	[0] = {
+	/*DS35X1GAXXX*/
+		.pagesize = 2 * 1024,
+		.blocksize = 2 * 1024 * 64,
+		.oobsize = 64,
+		.flashsize = 2 * 1024 * 64 * 1024,
+
+		.tHOLD  = THOLD,
+		.tSETUP = TSETUP,
+		.tSHSL_R = TSHSL_R,
+		.tSHSL_W = TSHSL_W,
+
+		.tRD = 70,
+		.tPP = TPP,
+		.tBE = TBE,
+
+		.plane_select = 0,
+		.ecc_max = 0x4,
+#ifdef CONFIG_SPI_STANDARD_MODE
+		.need_quad = 0,
+#else
+		.need_quad = 1,
+#endif
+	},
+	[1] = {
+	/*DS35Q2GAXXX*/
+		.pagesize = 2 * 1024,
+		.blocksize = 2 * 1024 * 64,
+		.oobsize = 64,
+		.flashsize = 2 * 1024 * 64 * 2048,
+
+		.tHOLD  = THOLD,
+		.tSETUP = TSETUP,
+		.tSHSL_R = TSHSL_R,
+		.tSHSL_W = TSHSL_W,
+
+		.tRD = 90,
+		.tPP = TPP,
+		.tBE = TBE,
+
+		.plane_select = 1,
+		.ecc_max = 0x4,
+#ifdef CONFIG_SPI_STANDARD_MODE
+		.need_quad = 0,
+#else
+		.need_quad = 1,
+#endif
+	},
+};
+
+static struct device_id_struct device_id[DOSILICON_DEVICES_NUM] = {
+	DEVICE_ID_STRUCT(0x71, "DS35X1GAXXX", &dosilicon_param[0]),
+	DEVICE_ID_STRUCT(0x72, "DS35Q2GAXXX", &dosilicon_param[1]),
+};
+
+
+static cdt_params_t *dosilicon_get_cdt_params(struct sfc_flash *flash, uint8_t device_id)
+{
+	CDT_PARAMS_INIT(dosilicon_nand->cdt_params);
+
+	switch(device_id) {
+	    case 0x71:
+	    case 0x72:
+		    break;
+	    default:
+		    dev_err(flash->dev, "device_id err, please check your  device id: device_id = 0x%02x\n", device_id);
+		    return NULL;
+	}
+
+	return &dosilicon_nand->cdt_params;
+}
+
+
+static inline int deal_ecc_status(struct sfc_flash *flash, uint8_t device_id, uint8_t ecc_status)
+{
+	int ret = 0;
+
+	switch(device_id) {
+		case 0x71:
+			switch((ecc_status >> 0x4) & 0x3) {
+				case 0x0:
+					break;
+				case 0x1:
+					dev_err(flash->dev, "SFC ECC:1 ~ 4 bits error and been corrected.\n");
+					break;
+			    case 0x2:
+					dev_err(flash->dev, "SFC ECC:Bit errors greater than 4 bits detected and not corrected.\n");
+				    ret = -EBADMSG;
+				    break;
+			    default:
+				    dev_err(flash->dev, "SFC ECC:Reserved.\n");
+			}
+			break;
+		case 0x72:
+			switch((ecc_status >> 0x4) & 0x7) {
+				case 0x0:
+					break;
+				case 0x1:
+					dev_err(flash->dev, "SFC ECC:1 ~ 3 bits error and been corrected.\n");
+					break;
+			    case 0x2:
+					dev_err(flash->dev, "SFC ECC:Bit errors greater than 8 bits detected and not corrected.\n");
+				    ret = -EBADMSG;
+				    break;
+				case 0x3:
+					dev_err(flash->dev, "SFC ECC:4 ~ 6 bits error and been corrected.\n");
+					break;
+				case 0x5:
+					dev_err(flash->dev, "SFC ECC:7 ~ 8 bits error and been corrected.\n");
+					break;
+			    default:
+				    dev_err(flash->dev, "SFC ECC:Reserved.\n");
+			}
+			break;
+		default:
+			dev_err(flash->dev, "device_id err,it maybe don`t support this device, please check your device id: device_id = 0x%02x\n", device_id);
+		ret = -EIO;
+	}
+	return ret;
+}
+
+
+static int dosilicon_nand_init(void) {
+
+	dosilicon_nand = kzalloc(sizeof(*dosilicon_nand), GFP_KERNEL);
+	if(!dosilicon_nand) {
+		pr_err("alloc dosilicon_nand struct fail\n");
+		return -ENOMEM;
+	}
+
+	dosilicon_nand->id_manufactory = 0xE5;
+	dosilicon_nand->id_device_list = device_id;
+	dosilicon_nand->id_device_count = DOSILICON_DEVICES_NUM;
+
+	dosilicon_nand->ops.get_cdt_params = dosilicon_get_cdt_params;
+	dosilicon_nand->ops.deal_ecc_status = deal_ecc_status;
+
+	/* use private get feature interface, please define it in this document */
+	dosilicon_nand->ops.get_feature = NULL;
+
+	return ingenic_sfcnand_register(dosilicon_nand);
+}
+
+fs_initcall(dosilicon_nand_init);
